
ymodem-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800bbec  0800bbec  0000cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd5c  0800bd5c  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd5c  0800bd5c  0000cd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd64  0800bd64  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd64  0800bd64  0000cd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd68  0800bd68  0000cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bd6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  200001e0  0800bf4c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  0800bf4c  0000dcd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ac5  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff8  00000000  00000000  00026cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f34  00000000  00000000  0002c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213c3  00000000  00000000  0002d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018629  00000000  00000000  0004e3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bffac  00000000  00000000  000669f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001269a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab0  00000000  00000000  001269e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0012c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbd4 	.word	0x0800bbd4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800bbd4 	.word	0x0800bbd4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <CDC_ReceiveCplt_FS>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CDC_ReceiveCplt_FS(uint8_t *Buf, uint32_t Len){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]

}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <_write_to_usb_cdc>:

uint8_t _write_to_usb_cdc(uint8_t *buf, uint32_t len){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, buf, len, 100);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b29a      	uxth	r2, r3
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <_write_to_usb_cdc+0x24>)
 8000628:	f004 fad1 	bl	8004bce <HAL_UART_Transmit>

	return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000320 	.word	0x20000320

0800063c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	counter = 0;
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <HAL_UART_RxCpltCallback+0x38>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	RecBytes++;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <HAL_UART_RxCpltCallback+0x3c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a09      	ldr	r2, [pc, #36]	@ (800068c <HAL_UART_RxCpltCallback+0x3c>)
 8000666:	6013      	str	r3, [r2, #0]
	ymodem_ReceiveByte(&Ymodem, RxUart);
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_UART_RxCpltCallback+0x40>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	4809      	ldr	r0, [pc, #36]	@ (8000694 <HAL_UART_RxCpltCallback+0x44>)
 8000670:	f00a f80a 	bl	800a688 <ymodem_ReceiveByte>
	HAL_UART_Receive_DMA(huart, &RxUart, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	4906      	ldr	r1, [pc, #24]	@ (8000690 <HAL_UART_RxCpltCallback+0x40>)
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f004 fb37 	bl	8004cec <HAL_UART_Receive_DMA>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200009a8 	.word	0x200009a8
 800068c:	200009ac 	.word	0x200009ac
 8000690:	200009b0 	.word	0x200009b0
 8000694:	20000474 	.word	0x20000474

08000698 <ymodem_FileCallback>:

ymodem_err_e ymodem_FileCallback(ymodem_t *ymodem, ymodem_file_cb_e e, uint8_t *data, uint32_t len){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	460b      	mov	r3, r1
 80006a6:	72fb      	strb	r3, [r7, #11]
	switch (e){
 80006a8:	7afb      	ldrb	r3, [r7, #11]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d80f      	bhi.n	80006ce <ymodem_FileCallback+0x36>
 80006ae:	a201      	add	r2, pc, #4	@ (adr r2, 80006b4 <ymodem_FileCallback+0x1c>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006c5 	.word	0x080006c5
 80006b8:	080006cf 	.word	0x080006cf
 80006bc:	080006cf 	.word	0x080006cf
 80006c0:	080006cf 	.word	0x080006cf
	case YMODEM_FILE_CB_NAME:
		printf("File Name %s", (char*)data);
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <ymodem_FileCallback+0x40>)
 80006c8:	f00a fbce 	bl	800ae68 <iprintf>
		break;
 80006cc:	bf00      	nop
	case YMODEM_FILE_CB_ABORTED:

		break;
	}

	return YMODEM_OK;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	0800bbec 	.word	0x0800bbec

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char welcome[] = "Device is ready!\n";
 80006e2:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <main+0x9c>)
 80006e4:	1d3c      	adds	r4, r7, #4
 80006e6:	461d      	mov	r5, r3
 80006e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ec:	682b      	ldr	r3, [r5, #0]
 80006ee:	8023      	strh	r3, [r4, #0]
	uint8_t d = 'c';
 80006f0:	2363      	movs	r3, #99	@ 0x63
 80006f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fd0d 	bl	8001112 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f84a 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 f95e 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 f91a 	bl	8000938 <MX_DMA_Init>
  MX_SPI3_Init();
 8000704:	f000 f88e 	bl	8000824 <MX_SPI3_Init>
  MX_USB_Device_Init();
 8000708:	f009 f972 	bl	80099f0 <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 800070c:	f000 f8c8 	bl	80008a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000714:	f000 fd6e 	bl	80011f4 <HAL_Delay>
  HAL_UART_Transmit(&huart3, (uint8_t*)welcome, strlen(welcome), 100);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd80 	bl	8000220 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	2364      	movs	r3, #100	@ 0x64
 8000728:	4814      	ldr	r0, [pc, #80]	@ (800077c <main+0xa0>)
 800072a:	f004 fa50 	bl	8004bce <HAL_UART_Transmit>
  HAL_Delay(200);
 800072e:	20c8      	movs	r0, #200	@ 0xc8
 8000730:	f000 fd60 	bl	80011f4 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, &RxUart, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	4912      	ldr	r1, [pc, #72]	@ (8000780 <main+0xa4>)
 8000738:	4810      	ldr	r0, [pc, #64]	@ (800077c <main+0xa0>)
 800073a:	f004 fad7 	bl	8004cec <HAL_UART_Receive_DMA>
  ymodem_Init(&Ymodem, _write_to_usb_cdc);
 800073e:	4911      	ldr	r1, [pc, #68]	@ (8000784 <main+0xa8>)
 8000740:	4811      	ldr	r0, [pc, #68]	@ (8000788 <main+0xac>)
 8000742:	f009 fe47 	bl	800a3d4 <ymodem_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000746:	200a      	movs	r0, #10
 8000748:	f000 fd54 	bl	80011f4 <HAL_Delay>
	  counter++;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <main+0xb0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <main+0xb0>)
 8000756:	701a      	strb	r2, [r3, #0]
	  if (counter > 100){
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <main+0xb0>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b64      	cmp	r3, #100	@ 0x64
 800075e:	d9f2      	bls.n	8000746 <main+0x6a>
		  counter = 0;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <main+0xb0>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
		  ymodem_Reset(&Ymodem);
 8000766:	4808      	ldr	r0, [pc, #32]	@ (8000788 <main+0xac>)
 8000768:	f009 ff52 	bl	800a610 <ymodem_Reset>
		  _write_to_usb_cdc(&d, 1);
 800076c:	1cfb      	adds	r3, r7, #3
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff4f 	bl	8000614 <_write_to_usb_cdc>
	  HAL_Delay(10);
 8000776:	e7e6      	b.n	8000746 <main+0x6a>
 8000778:	0800bbfc 	.word	0x0800bbfc
 800077c:	20000320 	.word	0x20000320
 8000780:	200009b0 	.word	0x200009b0
 8000784:	08000615 	.word	0x08000615
 8000788:	20000474 	.word	0x20000474
 800078c:	200009a8 	.word	0x200009a8

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	@ 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2238      	movs	r2, #56	@ 0x38
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f00a fbb7 	bl	800af12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007b6:	f003 f81d 	bl	80037f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80007d0:	2324      	movs	r3, #36	@ 0x24
 80007d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80007d8:	2306      	movs	r3, #6
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f8b9 	bl	800395c <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80007f0:	f000 f960 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2303      	movs	r3, #3
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fbb7 	bl	8003f80 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000818:	f000 f94c 	bl	8000ab4 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_SPI3_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_SPI3_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI3_Init+0x74>)
 800083e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000842:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000856:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI3_Init+0x74>)
 800085a:	2218      	movs	r2, #24
 800085c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SPI3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI3_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_SPI3_Init+0x74>)
 8000884:	f003 ff88 	bl	8004798 <HAL_SPI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f911 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001fc 	.word	0x200001fc
 800089c:	40003c00 	.word	0x40003c00

080008a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <MX_USART3_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008ea:	f004 f920 	bl	8004b2e <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f000 f8de 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 80008fc:	f005 fd00 	bl	8006300 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f000 f8d5 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 800090e:	f005 fd35 	bl	800637c <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f000 f8cc 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_USART3_UART_Init+0x90>)
 800091e:	f005 fcb6 	bl	800628e <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f8c4 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000320 	.word	0x20000320
 8000934:	40004800 	.word	0x40004800

08000938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_DMA_Init+0x80>)
 8000940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000942:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <MX_DMA_Init+0x80>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6493      	str	r3, [r2, #72]	@ 0x48
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_DMA_Init+0x80>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_DMA_Init+0x80>)
 8000958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800095a:	4a17      	ldr	r2, [pc, #92]	@ (80009b8 <MX_DMA_Init+0x80>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6493      	str	r3, [r2, #72]	@ 0x48
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_DMA_Init+0x80>)
 8000964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200b      	movs	r0, #11
 8000974:	f000 fd3b 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000978:	200b      	movs	r0, #11
 800097a:	f000 fd52 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	200c      	movs	r0, #12
 8000984:	f000 fd33 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000988:	200c      	movs	r0, #12
 800098a:	f000 fd4a 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	200d      	movs	r0, #13
 8000994:	f000 fd2b 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000998:	200d      	movs	r0, #13
 800099a:	f000 fd42 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	200e      	movs	r0, #14
 80009a4:	f000 fd23 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009a8:	200e      	movs	r0, #14
 80009aa:	f000 fd3a 	bl	8001422 <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b35      	ldr	r3, [pc, #212]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a34      	ldr	r2, [pc, #208]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b32      	ldr	r3, [pc, #200]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0xec>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a38:	481c      	ldr	r0, [pc, #112]	@ (8000aac <MX_GPIO_Init+0xf0>)
 8000a3a:	f001 f9c1 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOR_CS_GPIO_Port, NOR_CS_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a44:	481a      	ldr	r0, [pc, #104]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a46:	f001 f9bb 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4812      	ldr	r0, [pc, #72]	@ (8000aac <MX_GPIO_Init+0xf0>)
 8000a64:	f001 f82a 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	@ (8000aac <MX_GPIO_Init+0xf0>)
 8000a7e:	f001 f81d 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : NOR_CS_Pin */
  GPIO_InitStruct.Pin = NOR_CS_Pin;
 8000a82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NOR_CS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a9c:	f001 f80e 	bl	8001abc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	@ 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48000800 	.word	0x48000800
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000af6:	f002 ff21 	bl	800393c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a53      	ldr	r2, [pc, #332]	@ (8000c74 <HAL_SPI_MspInit+0x16c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	f040 809f 	bne.w	8000c6a <HAL_SPI_MspInit+0x162>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2c:	4b52      	ldr	r3, [pc, #328]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b30:	4a51      	ldr	r2, [pc, #324]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b38:	4b4f      	ldr	r3, [pc, #316]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b4c      	ldr	r3, [pc, #304]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	4a4b      	ldr	r2, [pc, #300]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b50:	4b49      	ldr	r3, [pc, #292]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b46      	ldr	r3, [pc, #280]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	4a45      	ldr	r2, [pc, #276]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b68:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <HAL_SPI_MspInit+0x170>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b86:	2306      	movs	r3, #6
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483a      	ldr	r0, [pc, #232]	@ (8000c7c <HAL_SPI_MspInit+0x174>)
 8000b92:	f000 ff93 	bl	8001abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000b96:	2328      	movs	r3, #40	@ 0x28
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4833      	ldr	r0, [pc, #204]	@ (8000c80 <HAL_SPI_MspInit+0x178>)
 8000bb2:	f000 ff83 	bl	8001abc <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel1;
 8000bb6:	4b33      	ldr	r3, [pc, #204]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bb8:	4a33      	ldr	r2, [pc, #204]	@ (8000c88 <HAL_SPI_MspInit+0x180>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8000bbc:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bbe:	220e      	movs	r2, #14
 8000bc0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000bec:	4825      	ldr	r0, [pc, #148]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000bee:	f000 fc33 	bl	8001458 <HAL_DMA_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8000bf8:	f7ff ff5c 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a21      	ldr	r2, [pc, #132]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000c00:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c02:	4a20      	ldr	r2, [pc, #128]	@ (8000c84 <HAL_SPI_MspInit+0x17c>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel2;
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c0a:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <HAL_SPI_MspInit+0x188>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c10:	220f      	movs	r2, #15
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c16:	2210      	movs	r2, #16
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000c3e:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c40:	f000 fc0a 	bl	8001458 <HAL_DMA_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8000c4a:	f7ff ff33 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c52:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <HAL_SPI_MspInit+0x184>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2033      	movs	r0, #51	@ 0x33
 8000c60:	f000 fbc5 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000c64:	2033      	movs	r0, #51	@ 0x33
 8000c66:	f000 fbdc 	bl	8001422 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	@ 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40003c00 	.word	0x40003c00
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000400 	.word	0x48000400
 8000c84:	20000260 	.word	0x20000260
 8000c88:	40020008 	.word	0x40020008
 8000c8c:	200002c0 	.word	0x200002c0
 8000c90:	4002001c 	.word	0x4002001c

08000c94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	@ 0x68
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2244      	movs	r2, #68	@ 0x44
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00a f92c 	bl	800af12 <memset>
  if(huart->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a4d      	ldr	r2, [pc, #308]	@ (8000df4 <HAL_UART_MspInit+0x160>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f040 8092 	bne.w	8000dea <HAL_UART_MspInit+0x156>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fb70 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff fee9 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	4b45      	ldr	r3, [pc, #276]	@ (8000df8 <HAL_UART_MspInit+0x164>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a44      	ldr	r2, [pc, #272]	@ (8000df8 <HAL_UART_MspInit+0x164>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b42      	ldr	r3, [pc, #264]	@ (8000df8 <HAL_UART_MspInit+0x164>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000df8 <HAL_UART_MspInit+0x164>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8000df8 <HAL_UART_MspInit+0x164>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b3c      	ldr	r3, [pc, #240]	@ (8000df8 <HAL_UART_MspInit+0x164>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d24:	2307      	movs	r3, #7
 8000d26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4833      	ldr	r0, [pc, #204]	@ (8000dfc <HAL_UART_MspInit+0x168>)
 8000d30:	f000 fec4 	bl	8001abc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000d34:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d36:	4a33      	ldr	r2, [pc, #204]	@ (8000e04 <HAL_UART_MspInit+0x170>)
 8000d38:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d3c:	221c      	movs	r2, #28
 8000d3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d40:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d4e:	2280      	movs	r2, #128	@ 0x80
 8000d50:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d58:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d6a:	4825      	ldr	r0, [pc, #148]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d6c:	f000 fb74 	bl	8001458 <HAL_DMA_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000d76:	f7ff fe9d 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d82:	4a1f      	ldr	r2, [pc, #124]	@ (8000e00 <HAL_UART_MspInit+0x16c>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000d8a:	4a20      	ldr	r2, [pc, #128]	@ (8000e0c <HAL_UART_MspInit+0x178>)
 8000d8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000d90:	221d      	movs	r2, #29
 8000d92:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000d96:	2210      	movs	r2, #16
 8000d98:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000dbe:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000dc0:	f000 fb4a 	bl	8001458 <HAL_DMA_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000dca:	f7ff fe73 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000dd2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <HAL_UART_MspInit+0x174>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2027      	movs	r0, #39	@ 0x27
 8000de0:	f000 fb05 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000de4:	2027      	movs	r0, #39	@ 0x27
 8000de6:	f000 fb1c 	bl	8001422 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3768      	adds	r7, #104	@ 0x68
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40004800 	.word	0x40004800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	200003b4 	.word	0x200003b4
 8000e04:	40020030 	.word	0x40020030
 8000e08:	20000414 	.word	0x20000414
 8000e0c:	40020044 	.word	0x40020044

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e66:	f000 f9a7 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <DMA1_Channel1_IRQHandler+0x10>)
 8000e76:	f000 fcd2 	bl	800181e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000260 	.word	0x20000260

08000e84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <DMA1_Channel2_IRQHandler+0x10>)
 8000e8a:	f000 fcc8 	bl	800181e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200002c0 	.word	0x200002c0

08000e98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <DMA1_Channel3_IRQHandler+0x10>)
 8000e9e:	f000 fcbe 	bl	800181e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200003b4 	.word	0x200003b4

08000eac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <DMA1_Channel4_IRQHandler+0x10>)
 8000eb2:	f000 fcb4 	bl	800181e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000414 	.word	0x20000414

08000ec0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <USB_HP_IRQHandler+0x10>)
 8000ec6:	f001 f883 	bl	8001fd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20001690 	.word	0x20001690

08000ed4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <USB_LP_IRQHandler+0x10>)
 8000eda:	f001 f879 	bl	8001fd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001690 	.word	0x20001690

08000ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USART3_IRQHandler+0x10>)
 8000eee:	f003 ff49 	bl	8004d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000320 	.word	0x20000320

08000efc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <SPI3_IRQHandler+0x10>)
 8000f02:	f003 fcf5 	bl	80048f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001fc 	.word	0x200001fc

08000f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return 1;
 8000f14:	2301      	movs	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_kill>:

int _kill(int pid, int sig)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f2a:	f00a f841 	bl	800afb0 <__errno>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2216      	movs	r2, #22
 8000f32:	601a      	str	r2, [r3, #0]
  return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_exit>:

void _exit (int status)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffe7 	bl	8000f20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f52:	bf00      	nop
 8000f54:	e7fd      	b.n	8000f52 <_exit+0x12>

08000f56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e00a      	b.n	8000f7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f68:	f3af 8000 	nop.w
 8000f6c:	4601      	mov	r1, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	60ba      	str	r2, [r7, #8]
 8000f74:	b2ca      	uxtb	r2, r1
 8000f76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dbf0      	blt.n	8000f68 <_read+0x12>
  }

  return len;
 8000f86:	687b      	ldr	r3, [r7, #4]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e009      	b.n	8000fb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	60ba      	str	r2, [r7, #8]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dbf1      	blt.n	8000fa2 <_write+0x12>
  }
  return len;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_close>:

int _close(int file)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_isatty>:

int _isatty(int file)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001008:	2301      	movs	r3, #1
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <_sbrk+0x5c>)
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <_sbrk+0x60>)
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <_sbrk+0x64>)
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <_sbrk+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d207      	bcs.n	8001070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001060:	f009 ffa6 	bl	800afb0 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106e:	e009      	b.n	8001084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20008000 	.word	0x20008000
 8001090:	00000400 	.word	0x00000400
 8001094:	200009b4 	.word	0x200009b4
 8001098:	20001cd8 	.word	0x20001cd8

0800109c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c4:	f7ff ffea 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	@ (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	@ (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f009 ff65 	bl	800afbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f2:	f7ff faf3 	bl	80006dc <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   r0, =_estack
 80010f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001104:	0800bd6c 	.word	0x0800bd6c
  ldr r2, =_sbss
 8001108:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800110c:	20001cd8 	.word	0x20001cd8

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>

08001112 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f95b 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f80e 	bl	8001144 <HAL_InitTick>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	e001      	b.n	8001138 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001134:	f7ff fcc4 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001138:	79fb      	ldrb	r3, [r7, #7]

}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <HAL_InitTick+0x68>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d022      	beq.n	800119e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_InitTick+0x6c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_InitTick+0x68>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001164:	fbb1 f3f3 	udiv	r3, r1, r3
 8001168:	fbb2 f3f3 	udiv	r3, r2, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f966 	bl	800143e <HAL_SYSTICK_Config>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10f      	bne.n	8001198 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	d809      	bhi.n	8001192 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117e:	2200      	movs	r2, #0
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001186:	f000 f932 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_InitTick+0x70>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e007      	b.n	80011a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e004      	b.n	80011a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e001      	b.n	80011a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_IncTick+0x20>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	200009b8 	.word	0x200009b8
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200009b8 	.word	0x200009b8

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800120c:	d004      	beq.n	8001218 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_Delay+0x40>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001218:	bf00      	nop
 800121a:	f7ff ffdf 	bl	80011dc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	429a      	cmp	r2, r3
 8001228:	d8f7      	bhi.n	800121a <HAL_Delay+0x26>
  {
  }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000008 	.word	0x20000008

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	@ (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff40 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff90 	bl	800132c <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5f 	bl	80012d8 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff33 	bl	800129c <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa4 	bl	8001394 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e08d      	b.n	8001586 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_DMA_Init+0x138>)
 8001472:	429a      	cmp	r2, r3
 8001474:	d80f      	bhi.n	8001496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b45      	ldr	r3, [pc, #276]	@ (8001594 <HAL_DMA_Init+0x13c>)
 800147e:	4413      	add	r3, r2
 8001480:	4a45      	ldr	r2, [pc, #276]	@ (8001598 <HAL_DMA_Init+0x140>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	009a      	lsls	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a42      	ldr	r2, [pc, #264]	@ (800159c <HAL_DMA_Init+0x144>)
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40
 8001494:	e00e      	b.n	80014b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b40      	ldr	r3, [pc, #256]	@ (80015a0 <HAL_DMA_Init+0x148>)
 800149e:	4413      	add	r3, r2
 80014a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001598 <HAL_DMA_Init+0x140>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	009a      	lsls	r2, r3, #2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a3c      	ldr	r2, [pc, #240]	@ (80015a4 <HAL_DMA_Init+0x14c>)
 80014b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa76 	bl	80019f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001514:	d102      	bne.n	800151c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001530:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <HAL_DMA_Init+0x104>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d80c      	bhi.n	800155c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fa96 	bl	8001a74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	e008      	b.n	800156e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40020407 	.word	0x40020407
 8001594:	bffdfff8 	.word	0xbffdfff8
 8001598:	cccccccd 	.word	0xcccccccd
 800159c:	40020000 	.word	0x40020000
 80015a0:	bffdfbf8 	.word	0xbffdfbf8
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_DMA_Start_IT+0x20>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e066      	b.n	8001696 <HAL_DMA_Start_IT+0xee>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d155      	bne.n	8001688 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f9bb 	bl	800197c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 020e 	orr.w	r2, r2, #14
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e00f      	b.n	8001640 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0204 	bic.w	r2, r2, #4
 800162e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 020a 	orr.w	r2, r2, #10
 800163e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800165c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001674:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e005      	b.n	8001694 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001690:	2302      	movs	r3, #2
 8001692:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001694:	7dfb      	ldrb	r3, [r7, #23]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d005      	beq.n	80016c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e037      	b.n	8001732 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020e 	bic.w	r2, r2, #14
 80016d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f003 021f 	and.w	r2, r3, #31
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800170e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00c      	beq.n	8001732 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001722:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001726:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001730:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d00d      	beq.n	8001784 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e047      	b.n	8001814 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 020e 	bic.w	r2, r2, #14
 8001792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00c      	beq.n	80017f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
    }
  }
  return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2204      	movs	r2, #4
 8001840:	409a      	lsls	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d026      	beq.n	8001898 <HAL_DMA_IRQHandler+0x7a>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d021      	beq.n	8001898 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0204 	bic.w	r2, r2, #4
 8001870:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f003 021f 	and.w	r2, r3, #31
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	2104      	movs	r1, #4
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	2b00      	cmp	r3, #0
 800188c:	d071      	beq.n	8001972 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001896:	e06c      	b.n	8001972 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2202      	movs	r2, #2
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d02e      	beq.n	800190a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d029      	beq.n	800190a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10b      	bne.n	80018dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 020a 	bic.w	r2, r2, #10
 80018d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	2102      	movs	r1, #2
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d038      	beq.n	8001972 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001908:	e033      	b.n	8001972 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2208      	movs	r2, #8
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d02a      	beq.n	8001974 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d025      	beq.n	8001974 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020e 	bic.w	r2, r2, #14
 8001936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001972:	bf00      	nop
 8001974:	bf00      	nop
}
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001992:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f003 021f 	and.w	r2, r3, #31
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d108      	bne.n	80019dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019da:	e007      	b.n	80019ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d802      	bhi.n	8001a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e001      	b.n	8001a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a14:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3b08      	subs	r3, #8
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40020407 	.word	0x40020407
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020820 	.word	0x40020820
 8001a6c:	cccccccd 	.word	0xcccccccd
 8001a70:	40020880 	.word	0x40020880

08001a74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a96:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	1000823f 	.word	0x1000823f
 8001ab8:	40020940 	.word	0x40020940

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aca:	e15a      	b.n	8001d82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 814c 	beq.w	8001d7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d005      	beq.n	8001afc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d017      	beq.n	8001b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d123      	bne.n	8001bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	6939      	ldr	r1, [r7, #16]
 8001bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0203 	and.w	r2, r3, #3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80a6 	beq.w	8001d7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c30:	4b5b      	ldr	r3, [pc, #364]	@ (8001da0 <HAL_GPIO_Init+0x2e4>)
 8001c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c34:	4a5a      	ldr	r2, [pc, #360]	@ (8001da0 <HAL_GPIO_Init+0x2e4>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c3c:	4b58      	ldr	r3, [pc, #352]	@ (8001da0 <HAL_GPIO_Init+0x2e4>)
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c48:	4a56      	ldr	r2, [pc, #344]	@ (8001da4 <HAL_GPIO_Init+0x2e8>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c72:	d01f      	beq.n	8001cb4 <HAL_GPIO_Init+0x1f8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4c      	ldr	r2, [pc, #304]	@ (8001da8 <HAL_GPIO_Init+0x2ec>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d019      	beq.n	8001cb0 <HAL_GPIO_Init+0x1f4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8001dac <HAL_GPIO_Init+0x2f0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1f0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a4a      	ldr	r2, [pc, #296]	@ (8001db0 <HAL_GPIO_Init+0x2f4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1ec>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a49      	ldr	r2, [pc, #292]	@ (8001db4 <HAL_GPIO_Init+0x2f8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a48      	ldr	r2, [pc, #288]	@ (8001db8 <HAL_GPIO_Init+0x2fc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1e4>
 8001c9c:	2305      	movs	r3, #5
 8001c9e:	e00a      	b.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	e008      	b.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e006      	b.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e004      	b.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc6:	4937      	ldr	r1, [pc, #220]	@ (8001da4 <HAL_GPIO_Init+0x2e8>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf8:	4a30      	ldr	r2, [pc, #192]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d22:	4a26      	ldr	r2, [pc, #152]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d76:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_GPIO_Init+0x300>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f ae9d 	bne.w	8001acc <HAL_GPIO_Init+0x10>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	48001000 	.word	0x48001000
 8001db8:	48001400 	.word	0x48001400
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0c0      	b.n	8001f84 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f007 ffd0 	bl	8009dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 fb4a 	bl	80064c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e03e      	b.n	8001eb2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3311      	adds	r3, #17
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3310      	adds	r3, #16
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3313      	adds	r3, #19
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3320      	adds	r3, #32
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3324      	adds	r3, #36	@ 0x24
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3bb      	bcc.n	8001e34 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e044      	b.n	8001f4c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	791b      	ldrb	r3, [r3, #4]
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3b5      	bcc.n	8001ec2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f62:	f004 fac9 	bl	80064f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7a9b      	ldrb	r3, [r3, #10]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 fc0e 	bl	800379e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_PCD_Start+0x16>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e012      	b.n	8001fc8 <HAL_PCD_Start+0x3c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fa70 	bl	8006494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f006 f84d 	bl	8008058 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f006 f852 	bl	8008086 <USB_ReadInterrupts>
 8001fe2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fb06 	bl	8002600 <PCD_EP_ISR_Handler>

    return;
 8001ff4:	e110      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002008:	b29a      	uxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002012:	b292      	uxth	r2, r2
 8002014:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f007 ff68 	bl	8009eee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f8fc 	bl	800221e <HAL_PCD_SetAddress>

    return;
 8002026:	e0f7      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002044:	b292      	uxth	r2, r2
 8002046:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800204a:	e0e5      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002068:	b292      	uxth	r2, r2
 800206a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800206e:	e0d3      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d034      	beq.n	80020e4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0204 	bic.w	r2, r2, #4
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020bc:	2100      	movs	r1, #0
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f008 f908 	bl	800a2d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f007 ff4b 	bl	8009f60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020dc:	b292      	uxth	r2, r2
 80020de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020e2:	e099      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d027      	beq.n	800213e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0208 	orr.w	r2, r2, #8
 8002100:	b292      	uxth	r2, r2
 8002102:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002118:	b292      	uxth	r2, r2
 800211a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0204 	orr.w	r2, r2, #4
 8002130:	b292      	uxth	r2, r2
 8002132:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f007 fef8 	bl	8009f2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800213c:	e06c      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d040      	beq.n	80021ca <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d12b      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0208 	orr.w	r2, r2, #8
 8002194:	b292      	uxth	r2, r2
 8002196:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021b8:	2101      	movs	r1, #1
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f008 f88a 	bl	800a2d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80021c0:	e02a      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f007 feb2 	bl	8009f2c <HAL_PCD_SuspendCallback>
    return;
 80021c8:	e026      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00f      	beq.n	80021f4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021e6:	b292      	uxth	r2, r2
 80021e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f007 fe70 	bl	8009ed2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021f2:	e011      	b.n	8002218 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002210:	b292      	uxth	r2, r2
 8002212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002216:	bf00      	nop
  }
}
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_PCD_SetAddress+0x1a>
 8002234:	2302      	movs	r3, #2
 8002236:	e012      	b.n	800225e <HAL_PCD_SetAddress+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f005 feee 	bl	8008030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	4608      	mov	r0, r1
 8002270:	4611      	mov	r1, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4603      	mov	r3, r0
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	460b      	mov	r3, r1
 800227a:	803b      	strh	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da0e      	bge.n	80022aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 0207 	and.w	r2, r3, #7
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	3310      	adds	r3, #16
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	705a      	strb	r2, [r3, #1]
 80022a8:	e00e      	b.n	80022c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0207 	and.w	r2, r3, #7
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80022d4:	883b      	ldrh	r3, [r7, #0]
 80022d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	78ba      	ldrb	r2, [r7, #2]
 80022e2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022e4:	78bb      	ldrb	r3, [r7, #2]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d102      	bne.n	80022f0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_PCD_EP_Open+0x98>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e00e      	b.n	800231c <HAL_PCD_EP_Open+0xb6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	4618      	mov	r0, r3
 800230e:	f004 f911 	bl	8006534 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800231a:	7afb      	ldrb	r3, [r7, #11]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	da0e      	bge.n	8002356 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 0207 	and.w	r2, r3, #7
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	3310      	adds	r3, #16
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	705a      	strb	r2, [r3, #1]
 8002354:	e00e      	b.n	8002374 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 0207 	and.w	r2, r3, #7
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_PCD_EP_Close+0x6a>
 800238a:	2302      	movs	r3, #2
 800238c:	e00e      	b.n	80023ac <HAL_PCD_EP_Close+0x88>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68f9      	ldr	r1, [r7, #12]
 800239c:	4618      	mov	r0, r3
 800239e:	f004 fdb1 	bl	8006f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	460b      	mov	r3, r1
 80023c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	f003 0207 	and.w	r2, r3, #7
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4413      	add	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6979      	ldr	r1, [r7, #20]
 8002406:	4618      	mov	r0, r3
 8002408:	f004 ff69 	bl	80072de <USB_EPStartXfer>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 0207 	and.w	r2, r3, #7
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002438:	681b      	ldr	r3, [r3, #0]
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	460b      	mov	r3, r1
 8002454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	f003 0207 	and.w	r2, r3, #7
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	3310      	adds	r3, #16
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4413      	add	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2201      	movs	r2, #1
 8002490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	b2da      	uxtb	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 ff1a 	bl	80072de <USB_EPStartXfer>

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	7912      	ldrb	r2, [r2, #4]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e03e      	b.n	8002550 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da0e      	bge.n	80024f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 0207 	and.w	r2, r3, #7
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	3310      	adds	r3, #16
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	705a      	strb	r2, [r3, #1]
 80024f6:	e00c      	b.n	8002512 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_PCD_EP_SetStall+0x7e>
 800252e:	2302      	movs	r3, #2
 8002530:	e00e      	b.n	8002550 <HAL_PCD_EP_SetStall+0x9c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	4618      	mov	r0, r3
 8002542:	f005 fc7b 	bl	8007e3c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	7912      	ldrb	r2, [r2, #4]
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e040      	b.n	80025f8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da0e      	bge.n	800259c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 0207 	and.w	r2, r3, #7
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3310      	adds	r3, #16
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
 800259a:	e00e      	b.n	80025ba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_PCD_EP_ClrStall+0x82>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e00e      	b.n	80025f8 <HAL_PCD_EP_ClrStall+0xa0>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 fc78 	bl	8007ede <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b092      	sub	sp, #72	@ 0x48
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002608:	e333      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002612:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002614:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002620:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 8108 	bne.w	800283a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800262a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d14c      	bne.n	80026ce <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	893b      	ldrh	r3, [r7, #8]
 800264c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002654:	b29b      	uxth	r3, r3
 8002656:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3310      	adds	r3, #16
 800265c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4413      	add	r3, r2
 8002678:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002684:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	441a      	add	r2, r3
 8002690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002692:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002694:	2100      	movs	r1, #0
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f007 fc01 	bl	8009e9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7b1b      	ldrb	r3, [r3, #12]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 82e5 	beq.w	8002c72 <PCD_EP_ISR_Handler+0x672>
 80026a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 82e0 	bne.w	8002c72 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7b1b      	ldrb	r3, [r3, #12]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	731a      	strb	r2, [r3, #12]
 80026cc:	e2d1      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026d4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d032      	beq.n	800274e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	4413      	add	r3, r2
 8002702:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800270c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800270e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800271a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800271c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800271e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002720:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002722:	b29b      	uxth	r3, r3
 8002724:	f005 fd02 	bl	800812c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29a      	uxth	r2, r3
 8002730:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002734:	4013      	ands	r3, r2
 8002736:	817b      	strh	r3, [r7, #10]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	897a      	ldrh	r2, [r7, #10]
 800273e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002742:	b292      	uxth	r2, r2
 8002744:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f007 fb7c 	bl	8009e44 <HAL_PCD_SetupStageCallback>
 800274c:	e291      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800274e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002752:	2b00      	cmp	r3, #0
 8002754:	f280 828d 	bge.w	8002c72 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29a      	uxth	r2, r3
 8002760:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002764:	4013      	ands	r3, r2
 8002766:	81fb      	strh	r3, [r7, #14]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	89fa      	ldrh	r2, [r7, #14]
 800276e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002772:	b292      	uxth	r2, r2
 8002774:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4413      	add	r3, r2
 8002790:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800279a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800279c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800279e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <PCD_EP_ISR_Handler+0x1da>
 80027a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b4:	6959      	ldr	r1, [r3, #20]
 80027b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f005 fcb4 	bl	800812c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	441a      	add	r2, r3
 80027ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027d2:	2100      	movs	r1, #0
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f007 fb47 	bl	8009e68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 8242 	bne.w	8002c72 <PCD_EP_ISR_Handler+0x672>
 80027ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027f0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80027f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027f8:	f000 823b 	beq.w	8002c72 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280c:	81bb      	strh	r3, [r7, #12]
 800280e:	89bb      	ldrh	r3, [r7, #12]
 8002810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002814:	81bb      	strh	r3, [r7, #12]
 8002816:	89bb      	ldrh	r3, [r7, #12]
 8002818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800281c:	81bb      	strh	r3, [r7, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	89bb      	ldrh	r3, [r7, #12]
 8002824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800282c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002834:	b29b      	uxth	r3, r3
 8002836:	8013      	strh	r3, [r2, #0]
 8002838:	e21b      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800284c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002850:	2b00      	cmp	r3, #0
 8002852:	f280 80f1 	bge.w	8002a38 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29a      	uxth	r2, r3
 8002868:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800286c:	4013      	ands	r3, r2
 800286e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002880:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002884:	b292      	uxth	r2, r2
 8002886:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002888:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800289e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a0:	7b1b      	ldrb	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d123      	bne.n	80028ee <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80028ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 808b 	beq.w	80029ee <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028de:	6959      	ldr	r1, [r3, #20]
 80028e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e2:	88da      	ldrh	r2, [r3, #6]
 80028e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80028e8:	f005 fc20 	bl	800812c <USB_ReadPMA>
 80028ec:	e07f      	b.n	80029ee <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f0:	78db      	ldrb	r3, [r3, #3]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d109      	bne.n	800290a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028f8:	461a      	mov	r2, r3
 80028fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9c6 	bl	8002c8e <HAL_PCD_EP_DB_Receive>
 8002902:	4603      	mov	r3, r0
 8002904:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002908:	e071      	b.n	80029ee <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002924:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	441a      	add	r2, r3
 8002934:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800293a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800293e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002942:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002946:	b29b      	uxth	r3, r3
 8002948:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d022      	beq.n	80029aa <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	4413      	add	r3, r2
 800297e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002988:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800298c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02c      	beq.n	80029ee <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800299a:	6959      	ldr	r1, [r3, #20]
 800299c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800299e:	891a      	ldrh	r2, [r3, #8]
 80029a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029a4:	f005 fbc2 	bl	800812c <USB_ReadPMA>
 80029a8:	e021      	b.n	80029ee <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80029d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e4:	895a      	ldrh	r2, [r3, #10]
 80029e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029ea:	f005 fb9f 	bl	800812c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029f6:	441a      	add	r2, r3
 80029f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a04:	441a      	add	r2, r3
 8002a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x41e>
 8002a12:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d206      	bcs.n	8002a2c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f007 fa1f 	bl	8009e68 <HAL_PCD_DataOutStageCallback>
 8002a2a:	e005      	b.n	8002a38 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fc53 	bl	80072de <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8117 	beq.w	8002c72 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a44:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	3310      	adds	r3, #16
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a92:	78db      	ldrb	r3, [r3, #3]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 80a1 	bne.w	8002bdc <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa2:	7b1b      	ldrb	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8092 	beq.w	8002bce <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d046      	beq.n	8002b42 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d126      	bne.n	8002b0a <PCD_EP_ISR_Handler+0x50a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	00da      	lsls	r2, r3, #3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4413      	add	r3, r2
 8002ade:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	e061      	b.n	8002bce <PCD_EP_ISR_Handler+0x5ce>
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d15d      	bne.n	8002bce <PCD_EP_ISR_Handler+0x5ce>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	00da      	lsls	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e045      	b.n	8002bce <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d126      	bne.n	8002b9e <PCD_EP_ISR_Handler+0x59e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	4413      	add	r3, r2
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	00da      	lsls	r2, r3, #3
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e017      	b.n	8002bce <PCD_EP_ISR_Handler+0x5ce>
 8002b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d113      	bne.n	8002bce <PCD_EP_ISR_Handler+0x5ce>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	4413      	add	r3, r2
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	00da      	lsls	r2, r3, #3
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f007 f962 	bl	8009e9e <HAL_PCD_DataInStageCallback>
 8002bda:	e04a      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d13f      	bne.n	8002c66 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d906      	bls.n	8002c24 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8002c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e002      	b.n	8002c2a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f007 f930 	bl	8009e9e <HAL_PCD_DataInStageCallback>
 8002c3e:	e018      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c46:	441a      	add	r2, r3
 8002c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c4a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c52:	441a      	add	r2, r3
 8002c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c56:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fb3d 	bl	80072de <USB_EPStartXfer>
 8002c64:	e005      	b.n	8002c72 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f917 	bl	8002ea0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f6ff acc3 	blt.w	800260a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3748      	adds	r7, #72	@ 0x48
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d07c      	beq.n	8002da0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	8b7b      	ldrh	r3, [r7, #26]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d306      	bcc.n	8002ce4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	8b7b      	ldrh	r3, [r7, #26]
 8002cdc:	1ad2      	subs	r2, r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	619a      	str	r2, [r3, #24]
 8002ce2:	e002      	b.n	8002cea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d123      	bne.n	8002d3a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0c:	833b      	strh	r3, [r7, #24]
 8002d0e:	8b3b      	ldrh	r3, [r7, #24]
 8002d10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d14:	833b      	strh	r3, [r7, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	441a      	add	r2, r3
 8002d24:	8b3b      	ldrh	r3, [r7, #24]
 8002d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01f      	beq.n	8002d84 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5e:	82fb      	strh	r3, [r7, #22]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	8afb      	ldrh	r3, [r7, #22]
 8002d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d84:	8b7b      	ldrh	r3, [r7, #26]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8085 	beq.w	8002e96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6959      	ldr	r1, [r3, #20]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	891a      	ldrh	r2, [r3, #8]
 8002d98:	8b7b      	ldrh	r3, [r7, #26]
 8002d9a:	f005 f9c7 	bl	800812c <USB_ReadPMA>
 8002d9e:	e07a      	b.n	8002e96 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	8b7b      	ldrh	r3, [r7, #26]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d306      	bcc.n	8002dde <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	8b7b      	ldrh	r3, [r7, #26]
 8002dd6:	1ad2      	subs	r2, r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	619a      	str	r2, [r3, #24]
 8002ddc:	e002      	b.n	8002de4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d123      	bne.n	8002e34 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e06:	83fb      	strh	r3, [r7, #30]
 8002e08:	8bfb      	ldrh	r3, [r7, #30]
 8002e0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e0e:	83fb      	strh	r3, [r7, #30]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	8bfb      	ldrh	r3, [r7, #30]
 8002e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11f      	bne.n	8002e7e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e58:	83bb      	strh	r3, [r7, #28]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	8bbb      	ldrh	r3, [r7, #28]
 8002e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e7e:	8b7b      	ldrh	r3, [r7, #26]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6959      	ldr	r1, [r3, #20]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	895a      	ldrh	r2, [r3, #10]
 8002e90:	8b7b      	ldrh	r3, [r7, #26]
 8002e92:	f005 f94b 	bl	800812c <USB_ReadPMA>
    }
  }

  return count;
 8002e96:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0a6      	sub	sp, #152	@ 0x98
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 81f7 	beq.w	80032a8 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ede:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d907      	bls.n	8002efe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	619a      	str	r2, [r3, #24]
 8002efc:	e002      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80e1 	bne.w	80030d0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d126      	bne.n	8002f64 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	4413      	add	r3, r2
 8002f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	00da      	lsls	r2, r3, #3
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f60:	801a      	strh	r2, [r3, #0]
 8002f62:	e01a      	b.n	8002f9a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d116      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f80:	4413      	add	r3, r2
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00da      	lsls	r2, r3, #3
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	2200      	movs	r2, #0
 8002f98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d126      	bne.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00da      	lsls	r2, r3, #3
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	e017      	b.n	8003026 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d113      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300c:	4413      	add	r3, r2
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	00da      	lsls	r2, r3, #3
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	4413      	add	r3, r2
 800301a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	2200      	movs	r2, #0
 8003024:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	78db      	ldrb	r3, [r3, #3]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d123      	bne.n	8003076 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003048:	837b      	strh	r3, [r7, #26]
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	f083 0320 	eor.w	r3, r3, #32
 8003050:	837b      	strh	r3, [r7, #26]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	441a      	add	r2, r3
 8003060:	8b7b      	ldrh	r3, [r7, #26]
 8003062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800306a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800306e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003072:	b29b      	uxth	r3, r3
 8003074:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f006 ff0e 	bl	8009e9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01f      	beq.n	80030cc <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030a6:	833b      	strh	r3, [r7, #24]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	8b3b      	ldrh	r3, [r7, #24]
 80030b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e31f      	b.n	8003710 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d021      	beq.n	800311e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003112:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 82ca 	bne.w	80036be <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003132:	441a      	add	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003140:	441a      	add	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	429a      	cmp	r2, r3
 8003150:	d309      	bcc.n	8003166 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a1a      	ldr	r2, [r3, #32]
 800315c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	621a      	str	r2, [r3, #32]
 8003164:	e015      	b.n	8003192 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800316e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003172:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800317c:	e009      	b.n	8003192 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d15f      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x3ba>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ae:	4413      	add	r3, r2
 80031b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00da      	lsls	r2, r3, #3
 80031b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_PCD_EP_DB_Transmit+0x34e>
 80031d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e051      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80031ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80031f2:	d816      	bhi.n	8003222 <HAL_PCD_EP_DB_Transmit+0x382>
 80031f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80031fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003206:	3301      	adds	r3, #1
 8003208:	653b      	str	r3, [r7, #80]	@ 0x50
 800320a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29a      	uxth	r2, r3
 8003210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	029b      	lsls	r3, r3, #10
 8003216:	b29b      	uxth	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b29a      	uxth	r2, r3
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	e037      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	653b      	str	r3, [r7, #80]	@ 0x50
 8003228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_PCD_EP_DB_Transmit+0x398>
 8003232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003234:	3b01      	subs	r3, #1
 8003236:	653b      	str	r3, [r7, #80]	@ 0x50
 8003238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29a      	uxth	r2, r3
 800323e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003240:	b29b      	uxth	r3, r3
 8003242:	029b      	lsls	r3, r3, #10
 8003244:	b29b      	uxth	r3, r3
 8003246:	4313      	orrs	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003252:	b29a      	uxth	r2, r3
 8003254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e01b      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d117      	bne.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003276:	4413      	add	r3, r2
 8003278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	00da      	lsls	r2, r3, #3
 8003280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003282:	4413      	add	r3, r2
 8003284:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003288:	647b      	str	r3, [r7, #68]	@ 0x44
 800328a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800328c:	b29a      	uxth	r2, r3
 800328e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003290:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	891a      	ldrh	r2, [r3, #8]
 800329e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f004 ff00 	bl	80080a6 <USB_WritePMA>
 80032a6:	e20a      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032cc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80032d8:	429a      	cmp	r2, r3
 80032da:	d307      	bcc.n	80032ec <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	619a      	str	r2, [r3, #24]
 80032ea:	e002      	b.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 80f6 	bne.w	80034e8 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d126      	bne.n	8003352 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	677b      	str	r3, [r7, #116]	@ 0x74
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003318:	4413      	add	r3, r2
 800331a:	677b      	str	r3, [r7, #116]	@ 0x74
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	00da      	lsls	r2, r3, #3
 8003322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003324:	4413      	add	r3, r2
 8003326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800332a:	673b      	str	r3, [r7, #112]	@ 0x70
 800332c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003336:	b29a      	uxth	r2, r3
 8003338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334a:	b29a      	uxth	r2, r3
 800334c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800334e:	801a      	strh	r2, [r3, #0]
 8003350:	e01a      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d116      	bne.n	8003388 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003368:	b29b      	uxth	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800336e:	4413      	add	r3, r2
 8003370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	00da      	lsls	r2, r3, #3
 8003378:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800337a:	4413      	add	r3, r2
 800337c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003380:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003384:	2200      	movs	r2, #0
 8003386:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d12f      	bne.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x558>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b0:	4413      	add	r3, r2
 80033b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00da      	lsls	r2, r3, #3
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c0:	4413      	add	r3, r2
 80033c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	e01c      	b.n	8003432 <HAL_PCD_EP_DB_Transmit+0x592>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d118      	bne.n	8003432 <HAL_PCD_EP_DB_Transmit+0x592>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003410:	4413      	add	r3, r2
 8003412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	00da      	lsls	r2, r3, #3
 800341c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003420:	4413      	add	r3, r2
 8003422:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003426:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800342a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800342e:	2200      	movs	r2, #0
 8003430:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d127      	bne.n	800348a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003454:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003458:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800345c:	f083 0320 	eor.w	r3, r3, #32
 8003460:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800347a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800347e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003486:	b29b      	uxth	r3, r3
 8003488:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f006 fd04 	bl	8009e9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d121      	bne.n	80034e4 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e113      	b.n	8003710 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d121      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800352a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800352e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 80be 	bne.w	80036be <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800354a:	441a      	add	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003558:	441a      	add	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	429a      	cmp	r2, r3
 8003568:	d309      	bcc.n	800357e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	621a      	str	r2, [r3, #32]
 800357c:	e015      	b.n	80035aa <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003586:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800358a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003594:	e009      	b.n	80035aa <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d15f      	bne.n	8003678 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035cc:	4413      	add	r3, r2
 80035ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	00da      	lsls	r2, r3, #3
 80035d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035d8:	4413      	add	r3, r2
 80035da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035de:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <HAL_PCD_EP_DB_Transmit+0x76c>
 80035f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003604:	b29a      	uxth	r2, r3
 8003606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003608:	801a      	strh	r2, [r3, #0]
 800360a:	e04e      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x80a>
 800360c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800360e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003610:	d816      	bhi.n	8003640 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	663b      	str	r3, [r7, #96]	@ 0x60
 8003618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_PCD_EP_DB_Transmit+0x788>
 8003622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003624:	3301      	adds	r3, #1
 8003626:	663b      	str	r3, [r7, #96]	@ 0x60
 8003628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29a      	uxth	r2, r3
 800362e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003630:	b29b      	uxth	r3, r3
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	b29b      	uxth	r3, r3
 8003636:	4313      	orrs	r3, r2
 8003638:	b29a      	uxth	r2, r3
 800363a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	e034      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x80a>
 8003640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	663b      	str	r3, [r7, #96]	@ 0x60
 8003646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003652:	3b01      	subs	r3, #1
 8003654:	663b      	str	r3, [r7, #96]	@ 0x60
 8003656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29a      	uxth	r2, r3
 800365c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800365e:	b29b      	uxth	r3, r3
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	b29b      	uxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003670:	b29a      	uxth	r2, r3
 8003672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	e018      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x80a>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	785b      	ldrb	r3, [r3, #1]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d114      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0x80a>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003688:	b29b      	uxth	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800368e:	4413      	add	r3, r2
 8003690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	00da      	lsls	r2, r3, #3
 8003698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369a:	4413      	add	r3, r2
 800369c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6959      	ldr	r1, [r3, #20]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	895a      	ldrh	r2, [r3, #10]
 80036b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f004 fcf4 	bl	80080a6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d8:	82fb      	strh	r3, [r7, #22]
 80036da:	8afb      	ldrh	r3, [r7, #22]
 80036dc:	f083 0310 	eor.w	r3, r3, #16
 80036e0:	82fb      	strh	r3, [r7, #22]
 80036e2:	8afb      	ldrh	r3, [r7, #22]
 80036e4:	f083 0320 	eor.w	r3, r3, #32
 80036e8:	82fb      	strh	r3, [r7, #22]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3798      	adds	r7, #152	@ 0x98
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	4613      	mov	r3, r2
 8003728:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	f003 0207 	and.w	r2, r3, #7
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	3310      	adds	r3, #16
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e009      	b.n	8003762 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374e:	897a      	ldrh	r2, [r7, #10]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003762:	893b      	ldrh	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	b29a      	uxth	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	80da      	strh	r2, [r3, #6]
 8003776:	e00b      	b.n	8003790 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2201      	movs	r2, #1
 800377c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	b29a      	uxth	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	b29a      	uxth	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d141      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b4b      	ldr	r3, [pc, #300]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380e:	d131      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003816:	4a46      	ldr	r2, [pc, #280]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003828:	4a41      	ldr	r2, [pc, #260]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003830:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2232      	movs	r2, #50	@ 0x32
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a3f      	ldr	r2, [pc, #252]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003846:	e002      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384e:	4b38      	ldr	r3, [pc, #224]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385a:	d102      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f2      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386e:	d158      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e057      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003874:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387a:	4a2d      	ldr	r2, [pc, #180]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003884:	e04d      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388c:	d141      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800388e:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389a:	d131      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800389c:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a2:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ac:	4b20      	ldr	r3, [pc, #128]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2232      	movs	r2, #50	@ 0x32
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d2:	e002      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e6:	d102      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f2      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d112      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e011      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003910:	e007      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003912:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003920:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40007000 	.word	0x40007000
 8003934:	20000000 	.word	0x20000000
 8003938:	431bde83 	.word	0x431bde83

0800393c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a04      	ldr	r2, [pc, #16]	@ (8003958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800394a:	6093      	str	r3, [r2, #8]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40007000 	.word	0x40007000

0800395c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e2fe      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d075      	beq.n	8003a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397a:	4b97      	ldr	r3, [pc, #604]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003984:	4b94      	ldr	r3, [pc, #592]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d102      	bne.n	800399a <HAL_RCC_OscConfig+0x3e>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_OscConfig+0x44>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d157      	bne.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e2d9      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x74>
 80039c2:	4b85      	ldr	r3, [pc, #532]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a84      	ldr	r2, [pc, #528]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7e      	ldr	r2, [pc, #504]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7b      	ldr	r2, [pc, #492]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039f4:	4b78      	ldr	r3, [pc, #480]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a77      	ldr	r2, [pc, #476]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b75      	ldr	r3, [pc, #468]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a74      	ldr	r2, [pc, #464]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fd fbe2 	bl	80011dc <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fbde 	bl	80011dc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e29e      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fbce 	bl	80011dc <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fd fbca 	bl	80011dc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	@ 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e28a      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a56:	4b60      	ldr	r3, [pc, #384]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d075      	beq.n	8003b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a72:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7c:	4b56      	ldr	r3, [pc, #344]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_OscConfig+0x136>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_OscConfig+0x13c>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d11f      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a98:	4b4f      	ldr	r3, [pc, #316]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x154>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e25d      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b49      	ldr	r3, [pc, #292]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	4946      	ldr	r1, [pc, #280]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ac4:	4b45      	ldr	r3, [pc, #276]	@ (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fb3b 	bl	8001144 <HAL_InitTick>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d043      	beq.n	8003b5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e249      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fb76 	bl	80011dc <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fd fb72 	bl	80011dc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e232      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b06:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	492d      	ldr	r1, [pc, #180]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 8003b26:	e01a      	b.n	8003b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b28:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fb52 	bl	80011dc <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fd fb4e 	bl	80011dc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e20e      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b4e:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1e0>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d041      	beq.n	8003bee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01c      	beq.n	8003bac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b78:	4a17      	ldr	r2, [pc, #92]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd fb2b 	bl	80011dc <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fd fb27 	bl	80011dc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1e7      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ef      	beq.n	8003b8a <HAL_RCC_OscConfig+0x22e>
 8003baa:	e020      	b.n	8003bee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd fb0e 	bl	80011dc <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc2:	e00d      	b.n	8003be0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc4:	f7fd fb0a 	bl	80011dc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d906      	bls.n	8003be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1ca      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be0:	4b8c      	ldr	r3, [pc, #560]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ea      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80a6 	beq.w	8003d48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c00:	4b84      	ldr	r3, [pc, #528]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2b4>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x2b6>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b7f      	ldr	r3, [pc, #508]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c22:	4b7c      	ldr	r3, [pc, #496]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c32:	4b79      	ldr	r3, [pc, #484]	@ (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3e:	4b76      	ldr	r3, [pc, #472]	@ (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	@ (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fac7 	bl	80011dc <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fd fac3 	bl	80011dc <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e183      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c64:	4b6c      	ldr	r3, [pc, #432]	@ (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_RCC_OscConfig+0x32e>
 8003c78:	4b66      	ldr	r3, [pc, #408]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	4a65      	ldr	r2, [pc, #404]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c88:	e024      	b.n	8003cd4 <HAL_RCC_OscConfig+0x378>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d110      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x358>
 8003c92:	4b60      	ldr	r3, [pc, #384]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	4a5e      	ldr	r2, [pc, #376]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cb2:	e00f      	b.n	8003cd4 <HAL_RCC_OscConfig+0x378>
 8003cb4:	4b57      	ldr	r3, [pc, #348]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	4a56      	ldr	r2, [pc, #344]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	4a52      	ldr	r2, [pc, #328]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d016      	beq.n	8003d0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd fa7e 	bl	80011dc <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fa7a 	bl	80011dc <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e138      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfa:	4b46      	ldr	r3, [pc, #280]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ed      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x388>
 8003d08:	e015      	b.n	8003d36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fa67 	bl	80011dc <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fa63 	bl	80011dc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e121      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d28:	4b3a      	ldr	r3, [pc, #232]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ed      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	4a34      	ldr	r2, [pc, #208]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d03c      	beq.n	8003dce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d62:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fa36 	bl	80011dc <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d74:	f7fd fa32 	bl	80011dc <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0f2      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d86:	4b23      	ldr	r3, [pc, #140]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ef      	beq.n	8003d74 <HAL_RCC_OscConfig+0x418>
 8003d94:	e01b      	b.n	8003dce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d96:	4b1f      	ldr	r3, [pc, #124]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd fa19 	bl	80011dc <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dae:	f7fd fa15 	bl	80011dc <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0d5      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc0:	4b14      	ldr	r3, [pc, #80]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ef      	bne.n	8003dae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80c9 	beq.w	8003f6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	f000 8083 	beq.w	8003eec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d15e      	bne.n	8003eac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a08      	ldr	r2, [pc, #32]	@ (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fd f9ef 	bl	80011dc <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	e00c      	b.n	8003e1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd f9eb 	bl	80011dc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d905      	bls.n	8003e1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0ab      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ec      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e28:	4b52      	ldr	r3, [pc, #328]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	4b52      	ldr	r3, [pc, #328]	@ (8003f78 <HAL_RCC_OscConfig+0x61c>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6a11      	ldr	r1, [r2, #32]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e4a:	0852      	lsrs	r2, r2, #1
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0552      	lsls	r2, r2, #21
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0652      	lsls	r2, r2, #25
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e62:	06d2      	lsls	r2, r2, #27
 8003e64:	430a      	orrs	r2, r1
 8003e66:	4943      	ldr	r1, [pc, #268]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e6c:	4b41      	ldr	r3, [pc, #260]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a40      	ldr	r2, [pc, #256]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e78:	4b3e      	ldr	r3, [pc, #248]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd f9aa 	bl	80011dc <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd f9a6 	bl	80011dc <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e066      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9e:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x530>
 8003eaa:	e05e      	b.n	8003f6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd f990 	bl	80011dc <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd f98c 	bl	80011dc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e04c      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed2:	4b28      	ldr	r3, [pc, #160]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ede:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	4924      	ldr	r1, [pc, #144]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003ee4:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <HAL_RCC_OscConfig+0x620>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]
 8003eea:	e03e      	b.n	8003f6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e039      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_RCC_OscConfig+0x618>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d12c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	3b01      	subs	r3, #1
 8003f18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d123      	bne.n	8003f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d113      	bne.n	8003f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	019f800c 	.word	0x019f800c
 8003f7c:	feeefffc 	.word	0xfeeefffc

08003f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e11e      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b91      	ldr	r3, [pc, #580]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d910      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 020f 	bic.w	r2, r3, #15
 8003fae:	498c      	ldr	r1, [pc, #560]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b8a      	ldr	r3, [pc, #552]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e106      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d073      	beq.n	80040bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d129      	bne.n	8004030 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fdc:	4b81      	ldr	r3, [pc, #516]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0f4      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fec:	f000 f99e 	bl	800432c <RCC_GetSysClockFreqFromPLLSource>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4a7c      	ldr	r2, [pc, #496]	@ (80041e8 <HAL_RCC_ClockConfig+0x268>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d93f      	bls.n	800407a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800400e:	2b00      	cmp	r3, #0
 8004010:	d033      	beq.n	800407a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004016:	2b00      	cmp	r3, #0
 8004018:	d12f      	bne.n	800407a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800401a:	4b72      	ldr	r3, [pc, #456]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004022:	4a70      	ldr	r2, [pc, #448]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004028:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e024      	b.n	800407a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004038:	4b6a      	ldr	r3, [pc, #424]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0c6      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	4b66      	ldr	r3, [pc, #408]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0be      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004058:	f000 f8ce 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 800405c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4a61      	ldr	r2, [pc, #388]	@ (80041e8 <HAL_RCC_ClockConfig+0x268>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d909      	bls.n	800407a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004066:	4b5f      	ldr	r3, [pc, #380]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800406e:	4a5d      	ldr	r2, [pc, #372]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004074:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b5a      	ldr	r3, [pc, #360]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4957      	ldr	r1, [pc, #348]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd f8a6 	bl	80011dc <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fd f8a2 	bl	80011dc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e095      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b4e      	ldr	r3, [pc, #312]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d023      	beq.n	8004110 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b43      	ldr	r3, [pc, #268]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a42      	ldr	r2, [pc, #264]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80040da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040ec:	4b3d      	ldr	r3, [pc, #244]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040f4:	4a3b      	ldr	r2, [pc, #236]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80040f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b39      	ldr	r3, [pc, #228]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4936      	ldr	r1, [pc, #216]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
 800410e:	e008      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b80      	cmp	r3, #128	@ 0x80
 8004114:	d105      	bne.n	8004122 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004116:	4b33      	ldr	r3, [pc, #204]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4a32      	ldr	r2, [pc, #200]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800411c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004120:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004122:	4b2f      	ldr	r3, [pc, #188]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d21d      	bcs.n	800416c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004130:	4b2b      	ldr	r3, [pc, #172]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 020f 	bic.w	r2, r3, #15
 8004138:	4929      	ldr	r1, [pc, #164]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004140:	f7fd f84c 	bl	80011dc <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fd f848 	bl	80011dc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e03b      	b.n	80041d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d1ed      	bne.n	8004148 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004178:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4917      	ldr	r1, [pc, #92]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004196:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	490f      	ldr	r1, [pc, #60]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041aa:	f000 f825 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	490c      	ldr	r1, [pc, #48]	@ (80041ec <HAL_RCC_ClockConfig+0x26c>)
 80041bc:	5ccb      	ldrb	r3, [r1, r3]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	4a0a      	ldr	r2, [pc, #40]	@ (80041f0 <HAL_RCC_ClockConfig+0x270>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_RCC_ClockConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc ffb8 	bl	8001144 <HAL_InitTick>
 80041d4:	4603      	mov	r3, r0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40021000 	.word	0x40021000
 80041e8:	04c4b400 	.word	0x04c4b400
 80041ec:	0800bc6c 	.word	0x0800bc6c
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041fe:	4b2c      	ldr	r3, [pc, #176]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b04      	cmp	r3, #4
 8004208:	d102      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800420a:	4b2a      	ldr	r3, [pc, #168]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e047      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004210:	4b27      	ldr	r3, [pc, #156]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d102      	bne.n	8004222 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800421c:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	e03e      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004222:	4b23      	ldr	r3, [pc, #140]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d136      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800422e:	4b20      	ldr	r3, [pc, #128]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004238:	4b1d      	ldr	r3, [pc, #116]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	3301      	adds	r3, #1
 8004244:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d10c      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800424c:	4a1a      	ldr	r2, [pc, #104]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a16      	ldr	r2, [pc, #88]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004256:	68d2      	ldr	r2, [r2, #12]
 8004258:	0a12      	lsrs	r2, r2, #8
 800425a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	617b      	str	r3, [r7, #20]
      break;
 8004264:	e00c      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004266:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	0a12      	lsrs	r2, r2, #8
 8004274:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]
      break;
 800427e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0e5b      	lsrs	r3, r3, #25
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	3301      	adds	r3, #1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	e001      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042a0:	693b      	ldr	r3, [r7, #16]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	007a1200 	.word	0x007a1200

080042bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	@ (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4904      	ldr	r1, [pc, #16]	@ (80042fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800bc7c 	.word	0x0800bc7c

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004304:	f7ff ffda 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0adb      	lsrs	r3, r3, #11
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4904      	ldr	r1, [pc, #16]	@ (8004328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	0800bc7c 	.word	0x0800bc7c

0800432c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004332:	4b1e      	ldr	r3, [pc, #120]	@ (80043ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800433c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d10c      	bne.n	800436a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004350:	4a17      	ldr	r2, [pc, #92]	@ (80043b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	4a14      	ldr	r2, [pc, #80]	@ (80043ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800435a:	68d2      	ldr	r2, [r2, #12]
 800435c:	0a12      	lsrs	r2, r2, #8
 800435e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
    break;
 8004368:	e00c      	b.n	8004384 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800436a:	4a12      	ldr	r2, [pc, #72]	@ (80043b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	4a0e      	ldr	r2, [pc, #56]	@ (80043ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004374:	68d2      	ldr	r2, [r2, #12]
 8004376:	0a12      	lsrs	r2, r2, #8
 8004378:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]
    break;
 8004382:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	0e5b      	lsrs	r3, r3, #25
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800439e:	687b      	ldr	r3, [r7, #4]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40021000 	.word	0x40021000
 80043b0:	007a1200 	.word	0x007a1200
 80043b4:	00f42400 	.word	0x00f42400

080043b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043c0:	2300      	movs	r3, #0
 80043c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043c4:	2300      	movs	r3, #0
 80043c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8098 	beq.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043da:	4b43      	ldr	r3, [pc, #268]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10d      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e6:	4b40      	ldr	r3, [pc, #256]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	4a3f      	ldr	r2, [pc, #252]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f2:	4b3d      	ldr	r3, [pc, #244]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004402:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a39      	ldr	r2, [pc, #228]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800440e:	f7fc fee5 	bl	80011dc <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004414:	e009      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004416:	f7fc fee1 	bl	80011dc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d902      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	74fb      	strb	r3, [r7, #19]
        break;
 8004428:	e005      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800442a:	4b30      	ldr	r3, [pc, #192]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ef      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d159      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800443c:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004446:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	429a      	cmp	r2, r3
 8004456:	d019      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004458:	4b23      	ldr	r3, [pc, #140]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004464:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004474:	4b1c      	ldr	r3, [pc, #112]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	4a1b      	ldr	r2, [pc, #108]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004484:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fc fea1 	bl	80011dc <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449c:	e00b      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fc fe9d 	bl	80011dc <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d902      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	74fb      	strb	r3, [r7, #19]
            break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b6:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ec      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ca:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	4903      	ldr	r1, [pc, #12]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	74bb      	strb	r3, [r7, #18]
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f4:	7c7b      	ldrb	r3, [r7, #17]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d105      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	4aa5      	ldr	r2, [pc, #660]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004512:	4ba0      	ldr	r3, [pc, #640]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f023 0203 	bic.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	499c      	ldr	r1, [pc, #624]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004534:	4b97      	ldr	r3, [pc, #604]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f023 020c 	bic.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	4994      	ldr	r1, [pc, #592]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004556:	4b8f      	ldr	r3, [pc, #572]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	498b      	ldr	r1, [pc, #556]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004578:	4b86      	ldr	r3, [pc, #536]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	4983      	ldr	r1, [pc, #524]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800459a:	4b7e      	ldr	r3, [pc, #504]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	497a      	ldr	r1, [pc, #488]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045bc:	4b75      	ldr	r3, [pc, #468]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4972      	ldr	r1, [pc, #456]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4969      	ldr	r1, [pc, #420]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004600:	4b64      	ldr	r3, [pc, #400]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004606:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4961      	ldr	r1, [pc, #388]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004622:	4b5c      	ldr	r3, [pc, #368]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	4958      	ldr	r1, [pc, #352]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004644:	4b53      	ldr	r3, [pc, #332]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	4950      	ldr	r1, [pc, #320]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004662:	d105      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004664:	4b4b      	ldr	r3, [pc, #300]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a4a      	ldr	r2, [pc, #296]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800466e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800467c:	4b45      	ldr	r3, [pc, #276]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	4942      	ldr	r1, [pc, #264]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b3d      	ldr	r3, [pc, #244]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b4:	4b37      	ldr	r3, [pc, #220]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	4934      	ldr	r1, [pc, #208]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046d2:	d105      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ec:	4b29      	ldr	r3, [pc, #164]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fa:	4926      	ldr	r1, [pc, #152]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800470a:	d105      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470c:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a20      	ldr	r2, [pc, #128]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	4918      	ldr	r1, [pc, #96]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004742:	d105      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004744:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800474e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d015      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800475c:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	490a      	ldr	r1, [pc, #40]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800477a:	d105      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a04      	ldr	r2, [pc, #16]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004786:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004788:	7cbb      	ldrb	r3, [r7, #18]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000

08004798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e09d      	b.n	80048e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ba:	d009      	beq.n	80047d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]
 80047c2:	e005      	b.n	80047d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc f98c 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004806:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004810:	d902      	bls.n	8004818 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e002      	b.n	800481e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800481c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004826:	d007      	beq.n	8004838 <HAL_SPI_Init+0xa0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004830:	d002      	beq.n	8004838 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487a:	ea42 0103 	orr.w	r1, r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 0204 	and.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	099b      	lsrs	r3, r3, #6
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
    return;
 8004932:	e0d7      	b.n	8004ae4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_SPI_IRQHandler+0x66>
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	09db      	lsrs	r3, r3, #7
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
    return;
 8004954:	e0c6      	b.n	8004ae4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10c      	bne.n	800497c <HAL_SPI_IRQHandler+0x8c>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80b4 	beq.w	8004ae4 <HAL_SPI_IRQHandler+0x1f4>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ad 	beq.w	8004ae4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	099b      	lsrs	r3, r3, #6
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d023      	beq.n	80049de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d011      	beq.n	80049c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a6:	f043 0204 	orr.w	r2, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	e00b      	b.n	80049de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	693b      	ldr	r3, [r7, #16]
        return;
 80049dc:	e082      	b.n	8004ae4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d014      	beq.n	8004a14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	f043 0208 	orr.w	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04f      	beq.n	8004ae2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_SPI_IRQHandler+0x17e>
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d034      	beq.n	8004ad8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0203 	bic.w	r2, r2, #3
 8004a7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8a:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_SPI_IRQHandler+0x1fc>)
 8004a8c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fe5c 	bl	8001750 <HAL_DMA_Abort_IT>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8004aec <HAL_SPI_IRQHandler+0x1fc>)
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc fe46 	bl	8001750 <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ace:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004ad6:	e003      	b.n	8004ae0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f809 	bl	8004af0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ade:	e000      	b.n	8004ae2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ae0:	bf00      	nop
    return;
 8004ae2:	bf00      	nop
  }
}
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	08004b05 	.word	0x08004b05

08004af0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffe5 	bl	8004af0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e042      	b.n	8004bc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc f89e 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	@ 0x24
 8004b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 ff31 	bl	80059e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fc62 	bl	8005448 <UART_SetConfig>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e01b      	b.n	8004bc6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 ffb0 	bl	8005b24 <UART_CheckIdleState>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b08a      	sub	sp, #40	@ 0x28
 8004bd2:	af02      	add	r7, sp, #8
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d17b      	bne.n	8004ce0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Transmit+0x26>
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e074      	b.n	8004ce2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2221      	movs	r2, #33	@ 0x21
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c08:	f7fc fae8 	bl	80011dc <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	88fa      	ldrh	r2, [r7, #6]
 8004c12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c26:	d108      	bne.n	8004c3a <HAL_UART_Transmit+0x6c>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d104      	bne.n	8004c3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e003      	b.n	8004c42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c42:	e030      	b.n	8004ca6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2180      	movs	r1, #128	@ 0x80
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f001 f812 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e03d      	b.n	8004ce2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	3302      	adds	r3, #2
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	e007      	b.n	8004c94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3301      	adds	r3, #1
 8004c92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1c8      	bne.n	8004c44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2140      	movs	r1, #64	@ 0x40
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 ffdb 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e000      	b.n	8004ce2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
  }
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	@ 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d137      	bne.n	8004d74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_UART_Receive_DMA+0x24>
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e030      	b.n	8004d76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a18      	ldr	r2, [pc, #96]	@ (8004d80 <HAL_UART_Receive_DMA+0x94>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01f      	beq.n	8004d64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	69f9      	ldr	r1, [r7, #28]
 8004d56:	6a3a      	ldr	r2, [r7, #32]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fff2 	bl	8005d54 <UART_Start_Receive_DMA>
 8004d70:	4603      	mov	r3, r0
 8004d72:	e000      	b.n	8004d76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3728      	adds	r7, #40	@ 0x28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40008000 	.word	0x40008000

08004d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b0ba      	sub	sp, #232	@ 0xe8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004daa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004dae:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004db2:	4013      	ands	r3, r2
 8004db4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11b      	bne.n	8004df8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8300 	beq.w	80053ee <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4798      	blx	r3
      }
      return;
 8004df6:	e2fa      	b.n	80053ee <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8123 	beq.w	8005048 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e06:	4b8d      	ldr	r3, [pc, #564]	@ (800503c <HAL_UART_IRQHandler+0x2b8>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e12:	4b8b      	ldr	r3, [pc, #556]	@ (8005040 <HAL_UART_IRQHandler+0x2bc>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8116 	beq.w	8005048 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d011      	beq.n	8004e4c <HAL_UART_IRQHandler+0xc8>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d011      	beq.n	8004e7c <HAL_UART_IRQHandler+0xf8>
 8004e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d011      	beq.n	8004eac <HAL_UART_IRQHandler+0x128>
 8004e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d017      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ec4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ec8:	4b5c      	ldr	r3, [pc, #368]	@ (800503c <HAL_UART_IRQHandler+0x2b8>)
 8004eca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	f043 0208 	orr.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d012      	beq.n	8004f1a <HAL_UART_IRQHandler+0x196>
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8266 	beq.w	80053f2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d013      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d005      	beq.n	8004f7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d054      	beq.n	8005028 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 ffcf 	bl	8005f22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	d146      	bne.n	8005020 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1d9      	bne.n	8004f92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fee:	4a15      	ldr	r2, [pc, #84]	@ (8005044 <HAL_UART_IRQHandler+0x2c0>)
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc fba9 	bl	8001750 <HAL_DMA_Abort_IT>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005012:	4610      	mov	r0, r2
 8005014:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005016:	e00f      	b.n	8005038 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f9ff 	bl	800541c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501e:	e00b      	b.n	8005038 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f9fb 	bl	800541c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005026:	e007      	b.n	8005038 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f9f7 	bl	800541c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005036:	e1dc      	b.n	80053f2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	bf00      	nop
    return;
 800503a:	e1da      	b.n	80053f2 <HAL_UART_IRQHandler+0x66e>
 800503c:	10000001 	.word	0x10000001
 8005040:	04000120 	.word	0x04000120
 8005044:	080061d9 	.word	0x080061d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800504c:	2b01      	cmp	r3, #1
 800504e:	f040 8170 	bne.w	8005332 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8169 	beq.w	8005332 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8162 	beq.w	8005332 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2210      	movs	r2, #16
 8005074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	f040 80d8 	bne.w	8005236 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80af 	beq.w	80051fc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050a8:	429a      	cmp	r2, r3
 80050aa:	f080 80a7 	bcs.w	80051fc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 8087 	bne.w	80051da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005102:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800510e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1da      	bne.n	80050cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800513a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800513e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005142:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800514c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e1      	bne.n	8005116 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3308      	adds	r3, #8
 8005158:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005176:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005178:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800517c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e3      	bne.n	8005152 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051a8:	f023 0310 	bic.w	r3, r3, #16
 80051ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e4      	bne.n	8005198 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fc fa62 	bl	800169e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f91b 	bl	8005430 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051fa:	e0fc      	b.n	80053f6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005206:	429a      	cmp	r2, r3
 8005208:	f040 80f5 	bne.w	80053f6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b20      	cmp	r3, #32
 800521c:	f040 80eb 	bne.w	80053f6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8fe 	bl	8005430 <HAL_UARTEx_RxEventCallback>
      return;
 8005234:	e0df      	b.n	80053f6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005242:	b29b      	uxth	r3, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80d1 	beq.w	80053fa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80cc 	beq.w	80053fa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005284:	647b      	str	r3, [r7, #68]	@ 0x44
 8005286:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800528a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e4      	bne.n	8005262 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	623b      	str	r3, [r7, #32]
   return(result);
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e1      	bne.n	8005298 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f023 0310 	bic.w	r3, r3, #16
 80052fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	617b      	str	r3, [r7, #20]
   return(result);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e4      	bne.n	80052e8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f880 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005330:	e063      	b.n	80053fa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <HAL_UART_IRQHandler+0x5d8>
 800533e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 ff7c 	bl	8006252 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800535a:	e051      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d014      	beq.n	8005392 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005384:	2b00      	cmp	r3, #0
 8005386:	d03a      	beq.n	80053fe <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
    }
    return;
 8005390:	e035      	b.n	80053fe <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_UART_IRQHandler+0x62e>
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 ff26 	bl	80061fc <UART_EndTransmit_IT>
    return;
 80053b0:	e026      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_UART_IRQHandler+0x64e>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 ff55 	bl	800627a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d0:	e016      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <HAL_UART_IRQHandler+0x67c>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da0c      	bge.n	8005400 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 ff3d 	bl	8006266 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ec:	e008      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
      return;
 80053ee:	bf00      	nop
 80053f0:	e006      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
    return;
 80053f2:	bf00      	nop
 80053f4:	e004      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
      return;
 80053f6:	bf00      	nop
 80053f8:	e002      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
      return;
 80053fa:	bf00      	nop
 80053fc:	e000      	b.n	8005400 <HAL_UART_IRQHandler+0x67c>
    return;
 80053fe:	bf00      	nop
  }
}
 8005400:	37e8      	adds	r7, #232	@ 0xe8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop

08005408 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800544c:	b08c      	sub	sp, #48	@ 0x30
 800544e:	af00      	add	r7, sp, #0
 8005450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	431a      	orrs	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4313      	orrs	r3, r2
 800546e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4bab      	ldr	r3, [pc, #684]	@ (8005724 <UART_SetConfig+0x2dc>)
 8005478:	4013      	ands	r3, r2
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005480:	430b      	orrs	r3, r1
 8005482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4aa0      	ldr	r2, [pc, #640]	@ (8005728 <UART_SetConfig+0x2e0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80054be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	f023 010f 	bic.w	r1, r3, #15
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a91      	ldr	r2, [pc, #580]	@ (800572c <UART_SetConfig+0x2e4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d125      	bne.n	8005538 <UART_SetConfig+0xf0>
 80054ec:	4b90      	ldr	r3, [pc, #576]	@ (8005730 <UART_SetConfig+0x2e8>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d81a      	bhi.n	8005530 <UART_SetConfig+0xe8>
 80054fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <UART_SetConfig+0xb8>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005511 	.word	0x08005511
 8005504:	08005521 	.word	0x08005521
 8005508:	08005519 	.word	0x08005519
 800550c:	08005529 	.word	0x08005529
 8005510:	2301      	movs	r3, #1
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005516:	e0d6      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005518:	2302      	movs	r3, #2
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551e:	e0d2      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005526:	e0ce      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552e:	e0ca      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005536:	e0c6      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7d      	ldr	r2, [pc, #500]	@ (8005734 <UART_SetConfig+0x2ec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d138      	bne.n	80055b4 <UART_SetConfig+0x16c>
 8005542:	4b7b      	ldr	r3, [pc, #492]	@ (8005730 <UART_SetConfig+0x2e8>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f003 030c 	and.w	r3, r3, #12
 800554c:	2b0c      	cmp	r3, #12
 800554e:	d82d      	bhi.n	80055ac <UART_SetConfig+0x164>
 8005550:	a201      	add	r2, pc, #4	@ (adr r2, 8005558 <UART_SetConfig+0x110>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800558d 	.word	0x0800558d
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080055ad 	.word	0x080055ad
 8005564:	080055ad 	.word	0x080055ad
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080055ad 	.word	0x080055ad
 8005570:	080055ad 	.word	0x080055ad
 8005574:	080055ad 	.word	0x080055ad
 8005578:	08005595 	.word	0x08005595
 800557c:	080055ad 	.word	0x080055ad
 8005580:	080055ad 	.word	0x080055ad
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055a5 	.word	0x080055a5
 800558c:	2300      	movs	r3, #0
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e098      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005594:	2302      	movs	r3, #2
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e094      	b.n	80056c6 <UART_SetConfig+0x27e>
 800559c:	2304      	movs	r3, #4
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	e090      	b.n	80056c6 <UART_SetConfig+0x27e>
 80055a4:	2308      	movs	r3, #8
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055aa:	e08c      	b.n	80056c6 <UART_SetConfig+0x27e>
 80055ac:	2310      	movs	r3, #16
 80055ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b2:	e088      	b.n	80056c6 <UART_SetConfig+0x27e>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5f      	ldr	r2, [pc, #380]	@ (8005738 <UART_SetConfig+0x2f0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d125      	bne.n	800560a <UART_SetConfig+0x1c2>
 80055be:	4b5c      	ldr	r3, [pc, #368]	@ (8005730 <UART_SetConfig+0x2e8>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055c8:	2b30      	cmp	r3, #48	@ 0x30
 80055ca:	d016      	beq.n	80055fa <UART_SetConfig+0x1b2>
 80055cc:	2b30      	cmp	r3, #48	@ 0x30
 80055ce:	d818      	bhi.n	8005602 <UART_SetConfig+0x1ba>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d00a      	beq.n	80055ea <UART_SetConfig+0x1a2>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d814      	bhi.n	8005602 <UART_SetConfig+0x1ba>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <UART_SetConfig+0x19a>
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d008      	beq.n	80055f2 <UART_SetConfig+0x1aa>
 80055e0:	e00f      	b.n	8005602 <UART_SetConfig+0x1ba>
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e8:	e06d      	b.n	80056c6 <UART_SetConfig+0x27e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f0:	e069      	b.n	80056c6 <UART_SetConfig+0x27e>
 80055f2:	2304      	movs	r3, #4
 80055f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f8:	e065      	b.n	80056c6 <UART_SetConfig+0x27e>
 80055fa:	2308      	movs	r3, #8
 80055fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005600:	e061      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005602:	2310      	movs	r3, #16
 8005604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005608:	e05d      	b.n	80056c6 <UART_SetConfig+0x27e>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a4b      	ldr	r2, [pc, #300]	@ (800573c <UART_SetConfig+0x2f4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d125      	bne.n	8005660 <UART_SetConfig+0x218>
 8005614:	4b46      	ldr	r3, [pc, #280]	@ (8005730 <UART_SetConfig+0x2e8>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800561e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005620:	d016      	beq.n	8005650 <UART_SetConfig+0x208>
 8005622:	2bc0      	cmp	r3, #192	@ 0xc0
 8005624:	d818      	bhi.n	8005658 <UART_SetConfig+0x210>
 8005626:	2b80      	cmp	r3, #128	@ 0x80
 8005628:	d00a      	beq.n	8005640 <UART_SetConfig+0x1f8>
 800562a:	2b80      	cmp	r3, #128	@ 0x80
 800562c:	d814      	bhi.n	8005658 <UART_SetConfig+0x210>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <UART_SetConfig+0x1f0>
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d008      	beq.n	8005648 <UART_SetConfig+0x200>
 8005636:	e00f      	b.n	8005658 <UART_SetConfig+0x210>
 8005638:	2300      	movs	r3, #0
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563e:	e042      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005640:	2302      	movs	r3, #2
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005646:	e03e      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e03a      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005656:	e036      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565e:	e032      	b.n	80056c6 <UART_SetConfig+0x27e>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a30      	ldr	r2, [pc, #192]	@ (8005728 <UART_SetConfig+0x2e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d12a      	bne.n	80056c0 <UART_SetConfig+0x278>
 800566a:	4b31      	ldr	r3, [pc, #196]	@ (8005730 <UART_SetConfig+0x2e8>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005674:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005678:	d01a      	beq.n	80056b0 <UART_SetConfig+0x268>
 800567a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800567e:	d81b      	bhi.n	80056b8 <UART_SetConfig+0x270>
 8005680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005684:	d00c      	beq.n	80056a0 <UART_SetConfig+0x258>
 8005686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568a:	d815      	bhi.n	80056b8 <UART_SetConfig+0x270>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <UART_SetConfig+0x250>
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005694:	d008      	beq.n	80056a8 <UART_SetConfig+0x260>
 8005696:	e00f      	b.n	80056b8 <UART_SetConfig+0x270>
 8005698:	2300      	movs	r3, #0
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569e:	e012      	b.n	80056c6 <UART_SetConfig+0x27e>
 80056a0:	2302      	movs	r3, #2
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a6:	e00e      	b.n	80056c6 <UART_SetConfig+0x27e>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ae:	e00a      	b.n	80056c6 <UART_SetConfig+0x27e>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b6:	e006      	b.n	80056c6 <UART_SetConfig+0x27e>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056be:	e002      	b.n	80056c6 <UART_SetConfig+0x27e>
 80056c0:	2310      	movs	r3, #16
 80056c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <UART_SetConfig+0x2e0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	f040 80a8 	bne.w	8005822 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d834      	bhi.n	8005744 <UART_SetConfig+0x2fc>
 80056da:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <UART_SetConfig+0x298>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005705 	.word	0x08005705
 80056e4:	08005745 	.word	0x08005745
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005713 	.word	0x08005713
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005745 	.word	0x08005745
 8005700:	0800571b 	.word	0x0800571b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe fde6 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8005708:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800570a:	e021      	b.n	8005750 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570c:	4b0c      	ldr	r3, [pc, #48]	@ (8005740 <UART_SetConfig+0x2f8>)
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005710:	e01e      	b.n	8005750 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe fd71 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 8005716:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005718:	e01a      	b.n	8005750 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005720:	e016      	b.n	8005750 <UART_SetConfig+0x308>
 8005722:	bf00      	nop
 8005724:	cfff69f3 	.word	0xcfff69f3
 8005728:	40008000 	.word	0x40008000
 800572c:	40013800 	.word	0x40013800
 8005730:	40021000 	.word	0x40021000
 8005734:	40004400 	.word	0x40004400
 8005738:	40004800 	.word	0x40004800
 800573c:	40004c00 	.word	0x40004c00
 8005740:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800574e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 812a 	beq.w	80059ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	4a9e      	ldr	r2, [pc, #632]	@ (80059d8 <UART_SetConfig+0x590>)
 800575e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005762:	461a      	mov	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	fbb3 f3f2 	udiv	r3, r3, r2
 800576a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	429a      	cmp	r2, r3
 800577a:	d305      	bcc.n	8005788 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	429a      	cmp	r2, r3
 8005786:	d903      	bls.n	8005790 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800578e:	e10d      	b.n	80059ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	2200      	movs	r2, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	60fa      	str	r2, [r7, #12]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	4a8e      	ldr	r2, [pc, #568]	@ (80059d8 <UART_SetConfig+0x590>)
 800579e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2200      	movs	r2, #0
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057b2:	f7fa fd8d 	bl	80002d0 <__aeabi_uldivmod>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	020b      	lsls	r3, r1, #8
 80057c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057cc:	0202      	lsls	r2, r0, #8
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	6849      	ldr	r1, [r1, #4]
 80057d2:	0849      	lsrs	r1, r1, #1
 80057d4:	2000      	movs	r0, #0
 80057d6:	460c      	mov	r4, r1
 80057d8:	4605      	mov	r5, r0
 80057da:	eb12 0804 	adds.w	r8, r2, r4
 80057de:	eb43 0905 	adc.w	r9, r3, r5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	469a      	mov	sl, r3
 80057ea:	4693      	mov	fp, r2
 80057ec:	4652      	mov	r2, sl
 80057ee:	465b      	mov	r3, fp
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fa fd6c 	bl	80002d0 <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4613      	mov	r3, r2
 80057fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005806:	d308      	bcc.n	800581a <UART_SetConfig+0x3d2>
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580e:	d204      	bcs.n	800581a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	e0c8      	b.n	80059ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005820:	e0c4      	b.n	80059ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800582a:	d167      	bne.n	80058fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800582c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005830:	2b08      	cmp	r3, #8
 8005832:	d828      	bhi.n	8005886 <UART_SetConfig+0x43e>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <UART_SetConfig+0x3f4>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005861 	.word	0x08005861
 8005840:	08005869 	.word	0x08005869
 8005844:	08005871 	.word	0x08005871
 8005848:	08005887 	.word	0x08005887
 800584c:	08005877 	.word	0x08005877
 8005850:	08005887 	.word	0x08005887
 8005854:	08005887 	.word	0x08005887
 8005858:	08005887 	.word	0x08005887
 800585c:	0800587f 	.word	0x0800587f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005860:	f7fe fd38 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8005864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005866:	e014      	b.n	8005892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005868:	f7fe fd4a 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800586e:	e010      	b.n	8005892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005870:	4b5a      	ldr	r3, [pc, #360]	@ (80059dc <UART_SetConfig+0x594>)
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005874:	e00d      	b.n	8005892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005876:	f7fe fcbf 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 800587a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800587c:	e009      	b.n	8005892 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005884:	e005      	b.n	8005892 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8089 	beq.w	80059ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	4a4e      	ldr	r2, [pc, #312]	@ (80059d8 <UART_SetConfig+0x590>)
 80058a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ac:	005a      	lsls	r2, r3, #1
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	441a      	add	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	2b0f      	cmp	r3, #15
 80058c4:	d916      	bls.n	80058f4 <UART_SetConfig+0x4ac>
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058cc:	d212      	bcs.n	80058f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f023 030f 	bic.w	r3, r3, #15
 80058d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	8bfb      	ldrh	r3, [r7, #30]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	8bfa      	ldrh	r2, [r7, #30]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	e05b      	b.n	80059ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058fa:	e057      	b.n	80059ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005900:	2b08      	cmp	r3, #8
 8005902:	d828      	bhi.n	8005956 <UART_SetConfig+0x50e>
 8005904:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x4c4>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	08005957 	.word	0x08005957
 800591c:	08005947 	.word	0x08005947
 8005920:	08005957 	.word	0x08005957
 8005924:	08005957 	.word	0x08005957
 8005928:	08005957 	.word	0x08005957
 800592c:	0800594f 	.word	0x0800594f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7fe fcd0 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8005934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005936:	e014      	b.n	8005962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fe fce2 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 800593c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800593e:	e010      	b.n	8005962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005940:	4b26      	ldr	r3, [pc, #152]	@ (80059dc <UART_SetConfig+0x594>)
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005944:	e00d      	b.n	8005962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005946:	f7fe fc57 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 800594a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800594c:	e009      	b.n	8005962 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005954:	e005      	b.n	8005962 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005960:	bf00      	nop
    }

    if (pclk != 0U)
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d021      	beq.n	80059ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	4a1a      	ldr	r2, [pc, #104]	@ (80059d8 <UART_SetConfig+0x590>)
 800596e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005972:	461a      	mov	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	fbb3 f2f2 	udiv	r2, r3, r2
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	441a      	add	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2b0f      	cmp	r3, #15
 8005990:	d909      	bls.n	80059a6 <UART_SetConfig+0x55e>
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005998:	d205      	bcs.n	80059a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	b29a      	uxth	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	e002      	b.n	80059ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2200      	movs	r2, #0
 80059c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2200      	movs	r2, #0
 80059c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3730      	adds	r7, #48	@ 0x30
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	0800bc84 	.word	0x0800bc84
 80059dc:	00f42400 	.word	0x00f42400

080059e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01a      	beq.n	8005af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ade:	d10a      	bne.n	8005af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
  }
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b098      	sub	sp, #96	@ 0x60
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b34:	f7fb fb52 	bl	80011dc <HAL_GetTick>
 8005b38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d12f      	bne.n	8005ba8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f88e 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d022      	beq.n	8005ba8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e6      	bne.n	8005b62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e063      	b.n	8005c70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d149      	bne.n	8005c4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f857 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d03c      	beq.n	8005c4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e6      	bne.n	8005bd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c22:	61fa      	str	r2, [r7, #28]
 8005c24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	69b9      	ldr	r1, [r7, #24]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e012      	b.n	8005c70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3758      	adds	r7, #88	@ 0x58
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c88:	e04f      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c90:	d04b      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fb faa3 	bl	80011dc <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e04e      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d037      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b80      	cmp	r3, #128	@ 0x80
 8005cbe:	d034      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b40      	cmp	r3, #64	@ 0x40
 8005cc4:	d031      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d110      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f920 	bl	8005f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e029      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d04:	d111      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f906 	bl	8005f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e00f      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d0a0      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b096      	sub	sp, #88	@ 0x58
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2222      	movs	r2, #34	@ 0x22
 8005d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02d      	beq.n	8005de6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d90:	4a40      	ldr	r2, [pc, #256]	@ (8005e94 <UART_Start_Receive_DMA+0x140>)
 8005d92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e98 <UART_Start_Receive_DMA+0x144>)
 8005d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da4:	4a3d      	ldr	r2, [pc, #244]	@ (8005e9c <UART_Start_Receive_DMA+0x148>)
 8005da6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dae:	2200      	movs	r2, #0
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3324      	adds	r3, #36	@ 0x24
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	f7fb fbee 	bl	80015a8 <HAL_DMA_Start_IT>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e051      	b.n	8005e8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e02:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e40:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	613b      	str	r3, [r7, #16]
   return(result);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3308      	adds	r3, #8
 8005e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e74:	623a      	str	r2, [r7, #32]
 8005e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	69f9      	ldr	r1, [r7, #28]
 8005e7a:	6a3a      	ldr	r2, [r7, #32]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3758      	adds	r7, #88	@ 0x58
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	08005fef 	.word	0x08005fef
 8005e98:	0800611b 	.word	0x0800611b
 8005e9c:	08006159 	.word	0x08006159

08005ea0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b08f      	sub	sp, #60	@ 0x3c
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ec8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e6      	bne.n	8005ea8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efa:	61ba      	str	r2, [r7, #24]
 8005efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6979      	ldr	r1, [r7, #20]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	613b      	str	r3, [r7, #16]
   return(result);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e5      	bne.n	8005eda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005f16:	bf00      	nop
 8005f18:	373c      	adds	r7, #60	@ 0x3c
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b095      	sub	sp, #84	@ 0x54
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e6      	bne.n	8005f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e3      	bne.n	8005f5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d118      	bne.n	8005fce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f023 0310 	bic.w	r3, r3, #16
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6979      	ldr	r1, [r7, #20]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fe2:	bf00      	nop
 8005fe4:	3754      	adds	r7, #84	@ 0x54
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b09c      	sub	sp, #112	@ 0x70
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d171      	bne.n	80060ee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800600a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800600c:	2200      	movs	r2, #0
 800600e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006026:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006030:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006032:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006036:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800603e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3308      	adds	r3, #8
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	667b      	str	r3, [r7, #100]	@ 0x64
 800605c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006064:	647a      	str	r2, [r7, #68]	@ 0x44
 8006066:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800606a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e5      	bne.n	8006044 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	623b      	str	r3, [r7, #32]
   return(result);
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3308      	adds	r3, #8
 8006096:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006098:	633a      	str	r2, [r7, #48]	@ 0x30
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800609e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d118      	bne.n	80060ee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f023 0310 	bic.w	r3, r3, #16
 80060d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	69b9      	ldr	r1, [r7, #24]
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	617b      	str	r3, [r7, #20]
   return(result);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e6      	bne.n	80060bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f0:	2200      	movs	r2, #0
 80060f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006102:	4619      	mov	r1, r3
 8006104:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006106:	f7ff f993 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800610a:	e002      	b.n	8006112 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800610c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800610e:	f7fa fa9f 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8006112:	bf00      	nop
 8006114:	3770      	adds	r7, #112	@ 0x70
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d109      	bne.n	800614a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff f974 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006148:	e002      	b.n	8006150 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff f95c 	bl	8005408 <HAL_UART_RxHalfCpltCallback>
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006174:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006180:	2b80      	cmp	r3, #128	@ 0x80
 8006182:	d109      	bne.n	8006198 <UART_DMAError+0x40>
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2b21      	cmp	r3, #33	@ 0x21
 8006188:	d106      	bne.n	8006198 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	f7ff fe84 	bl	8005ea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	d109      	bne.n	80061ba <UART_DMAError+0x62>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b22      	cmp	r3, #34	@ 0x22
 80061aa:	d106      	bne.n	80061ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80061b4:	6978      	ldr	r0, [r7, #20]
 80061b6:	f7ff feb4 	bl	8005f22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	f043 0210 	orr.w	r2, r3, #16
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f7ff f926 	bl	800541c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff f914 	bl	800541c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	60bb      	str	r3, [r7, #8]
   return(result);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	613b      	str	r3, [r7, #16]
   return(result);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e6      	bne.n	8006204 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fa f9f9 	bl	800063c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800624a:	bf00      	nop
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e027      	b.n	80062f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	@ 0x24
 80062b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006314:	2302      	movs	r3, #2
 8006316:	e02d      	b.n	8006374 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	@ 0x24
 8006324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f84f 	bl	80063f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006390:	2302      	movs	r3, #2
 8006392:	e02d      	b.n	80063f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2224      	movs	r2, #36	@ 0x24
 80063a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f811 	bl	80063f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006418:	e031      	b.n	800647e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800641a:	2308      	movs	r3, #8
 800641c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800641e:	2308      	movs	r3, #8
 8006420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0e5b      	lsrs	r3, r3, #25
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	0f5b      	lsrs	r3, r3, #29
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	7b3a      	ldrb	r2, [r7, #12]
 8006446:	4911      	ldr	r1, [pc, #68]	@ (800648c <UARTEx_SetNbDataToProcess+0x94>)
 8006448:	5c8a      	ldrb	r2, [r1, r2]
 800644a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800644e:	7b3a      	ldrb	r2, [r7, #12]
 8006450:	490f      	ldr	r1, [pc, #60]	@ (8006490 <UARTEx_SetNbDataToProcess+0x98>)
 8006452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006454:	fb93 f3f2 	sdiv	r3, r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	7b7a      	ldrb	r2, [r7, #13]
 8006464:	4909      	ldr	r1, [pc, #36]	@ (800648c <UARTEx_SetNbDataToProcess+0x94>)
 8006466:	5c8a      	ldrb	r2, [r1, r2]
 8006468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800646c:	7b7a      	ldrb	r2, [r7, #13]
 800646e:	4908      	ldr	r1, [pc, #32]	@ (8006490 <UARTEx_SetNbDataToProcess+0x98>)
 8006470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006472:	fb93 f3f2 	sdiv	r3, r3, r2
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	0800bc9c 	.word	0x0800bc9c
 8006490:	0800bca4 	.word	0x0800bca4

08006494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064a4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064ca:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4013      	ands	r3, r2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	1d3b      	adds	r3, r7, #4
 8006502:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006534:	b480      	push	{r7}
 8006536:	b0a7      	sub	sp, #156	@ 0x9c
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d81f      	bhi.n	80065a6 <USB_ActivateEndpoint+0x72>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <USB_ActivateEndpoint+0x38>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	0800657d 	.word	0x0800657d
 8006570:	08006599 	.word	0x08006599
 8006574:	080065af 	.word	0x080065af
 8006578:	0800658b 	.word	0x0800658b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800657c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006580:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006584:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006588:	e012      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800658a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800658e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006592:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006596:	e00b      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006598:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800659c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80065a4:	e004      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80065ac:	e000      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>
      break;
 80065ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	b21b      	sxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	b21a      	sxth	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b21b      	sxth	r3, r3
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	7b1b      	ldrb	r3, [r3, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8180 	bne.w	8006926 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8084 	beq.w	8006738 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	4413      	add	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	00da      	lsls	r2, r3, #3
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	88db      	ldrh	r3, [r3, #6]
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	b29b      	uxth	r3, r3
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	827b      	strh	r3, [r7, #18]
 8006672:	8a7b      	ldrh	r3, [r7, #18]
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <USB_ActivateEndpoint+0x180>
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006692:	823b      	strh	r3, [r7, #16]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	8a3b      	ldrh	r3, [r7, #16]
 80066a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	78db      	ldrb	r3, [r3, #3]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d020      	beq.n	80066fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d2:	81bb      	strh	r3, [r7, #12]
 80066d4:	89bb      	ldrh	r3, [r7, #12]
 80066d6:	f083 0320 	eor.w	r3, r3, #32
 80066da:	81bb      	strh	r3, [r7, #12]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	89bb      	ldrh	r3, [r7, #12]
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]
 80066fc:	e3f9      	b.n	8006ef2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e3dc      	b.n	8006ef2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	633b      	str	r3, [r7, #48]	@ 0x30
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	4413      	add	r3, r2
 800674a:	633b      	str	r3, [r7, #48]	@ 0x30
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	00da      	lsls	r2, r3, #3
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	4413      	add	r3, r2
 8006756:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	88db      	ldrh	r3, [r3, #6]
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	b29b      	uxth	r3, r3
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	4413      	add	r3, r2
 800677e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	00da      	lsls	r2, r3, #3
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	4413      	add	r3, r2
 800678a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679a:	b29a      	uxth	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <USB_ActivateEndpoint+0x28a>
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e041      	b.n	8006842 <USB_ActivateEndpoint+0x30e>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80067c4:	d81c      	bhi.n	8006800 <USB_ActivateEndpoint+0x2cc>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <USB_ActivateEndpoint+0x2b2>
 80067dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067e0:	3301      	adds	r3, #1
 80067e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	029b      	lsls	r3, r3, #10
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4313      	orrs	r3, r2
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	e020      	b.n	8006842 <USB_ActivateEndpoint+0x30e>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <USB_ActivateEndpoint+0x2ec>
 8006816:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800681a:	3b01      	subs	r3, #1
 800681c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29a      	uxth	r2, r3
 8006826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800682a:	b29b      	uxth	r3, r3
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	b29b      	uxth	r3, r3
 8006830:	4313      	orrs	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006850:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01b      	beq.n	8006892 <USB_ActivateEndpoint+0x35e>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006870:	843b      	strh	r3, [r7, #32]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	8c3b      	ldrh	r3, [r7, #32]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800688a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d124      	bne.n	80068e4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b0:	83bb      	strh	r3, [r7, #28]
 80068b2:	8bbb      	ldrh	r3, [r7, #28]
 80068b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068b8:	83bb      	strh	r3, [r7, #28]
 80068ba:	8bbb      	ldrh	r3, [r7, #28]
 80068bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068c0:	83bb      	strh	r3, [r7, #28]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	8bbb      	ldrh	r3, [r7, #28]
 80068ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068de:	b29b      	uxth	r3, r3
 80068e0:	8013      	strh	r3, [r2, #0]
 80068e2:	e306      	b.n	8006ef2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fa:	83fb      	strh	r3, [r7, #30]
 80068fc:	8bfb      	ldrh	r3, [r7, #30]
 80068fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006902:	83fb      	strh	r3, [r7, #30]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	441a      	add	r2, r3
 800690e:	8bfb      	ldrh	r3, [r7, #30]
 8006910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800691c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006920:	b29b      	uxth	r3, r3
 8006922:	8013      	strh	r3, [r2, #0]
 8006924:	e2e5      	b.n	8006ef2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	78db      	ldrb	r3, [r3, #3]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d11e      	bne.n	800696c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006944:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800695e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
 800696a:	e01d      	b.n	80069a8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800697e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006982:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069b8:	4413      	add	r3, r2
 80069ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	00da      	lsls	r2, r3, #3
 80069c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	891b      	ldrh	r3, [r3, #8]
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	677b      	str	r3, [r7, #116]	@ 0x74
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069ec:	4413      	add	r3, r2
 80069ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	00da      	lsls	r2, r3, #3
 80069f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069f8:	4413      	add	r3, r2
 80069fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	895b      	ldrh	r3, [r3, #10]
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f040 81af 	bne.w	8006d78 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006a2a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01d      	beq.n	8006a72 <USB_ActivateEndpoint+0x53e>
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006a82:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01d      	beq.n	8006aca <USB_ActivateEndpoint+0x596>
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d16b      	bne.n	8006baa <USB_ActivateEndpoint+0x676>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae2:	4413      	add	r3, r2
 8006ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	00da      	lsls	r2, r3, #3
 8006aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <USB_ActivateEndpoint+0x5f0>
 8006b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	e05d      	b.n	8006be0 <USB_ActivateEndpoint+0x6ac>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b2a:	d81c      	bhi.n	8006b66 <USB_ActivateEndpoint+0x632>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <USB_ActivateEndpoint+0x618>
 8006b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b46:	3301      	adds	r3, #1
 8006b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e03c      	b.n	8006be0 <USB_ActivateEndpoint+0x6ac>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <USB_ActivateEndpoint+0x652>
 8006b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e01a      	b.n	8006be0 <USB_ActivateEndpoint+0x6ac>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d116      	bne.n	8006be0 <USB_ActivateEndpoint+0x6ac>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc2:	4413      	add	r3, r2
 8006bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	00da      	lsls	r2, r3, #3
 8006bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bce:	4413      	add	r3, r2
 8006bd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d16b      	bne.n	8006cc4 <USB_ActivateEndpoint+0x790>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bfc:	4413      	add	r3, r2
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00da      	lsls	r2, r3, #3
 8006c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <USB_ActivateEndpoint+0x70a>
 8006c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e05b      	b.n	8006cf6 <USB_ActivateEndpoint+0x7c2>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c44:	d81c      	bhi.n	8006c80 <USB_ActivateEndpoint+0x74c>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <USB_ActivateEndpoint+0x732>
 8006c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c60:	3301      	adds	r3, #1
 8006c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	029b      	lsls	r3, r3, #10
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e03a      	b.n	8006cf6 <USB_ActivateEndpoint+0x7c2>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <USB_ActivateEndpoint+0x76c>
 8006c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	029b      	lsls	r3, r3, #10
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e018      	b.n	8006cf6 <USB_ActivateEndpoint+0x7c2>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d114      	bne.n	8006cf6 <USB_ActivateEndpoint+0x7c2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd8:	4413      	add	r3, r2
 8006cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	00da      	lsls	r2, r3, #3
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d14:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d54:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8013      	strh	r3, [r2, #0]
 8006d76:	e0bc      	b.n	8006ef2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006d88:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01d      	beq.n	8006dd0 <USB_ActivateEndpoint+0x89c>
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006de0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01d      	beq.n	8006e28 <USB_ActivateEndpoint+0x8f4>
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e02:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	78db      	ldrb	r3, [r3, #3]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d024      	beq.n	8006e7a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e46:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006e4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e4e:	f083 0320 	eor.w	r3, r3, #32
 8006e52:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	441a      	add	r2, r3
 8006e60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
 8006e78:	e01d      	b.n	8006eb6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e90:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ecc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	441a      	add	r2, r3
 8006eda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006ef2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	379c      	adds	r7, #156	@ 0x9c
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b08d      	sub	sp, #52	@ 0x34
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	7b1b      	ldrb	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 808e 	bne.w	8007034 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d044      	beq.n	8006faa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	81bb      	strh	r3, [r7, #12]
 8006f2e:	89bb      	ldrh	r3, [r7, #12]
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01b      	beq.n	8006f70 <USB_DeactivateEndpoint+0x6c>
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4e:	817b      	strh	r3, [r7, #10]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	897b      	ldrh	r3, [r7, #10]
 8006f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f86:	813b      	strh	r3, [r7, #8]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	893b      	ldrh	r3, [r7, #8]
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]
 8006fa8:	e192      	b.n	80072d0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	827b      	strh	r3, [r7, #18]
 8006fb8:	8a7b      	ldrh	r3, [r7, #18]
 8006fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01b      	beq.n	8006ffa <USB_DeactivateEndpoint+0xf6>
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd8:	823b      	strh	r3, [r7, #16]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	8a3b      	ldrh	r3, [r7, #16]
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800700c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007010:	81fb      	strh	r3, [r7, #14]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	441a      	add	r2, r3
 800701c:	89fb      	ldrh	r3, [r7, #14]
 800701e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]
 8007032:	e14d      	b.n	80072d0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f040 80a5 	bne.w	8007188 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	843b      	strh	r3, [r7, #32]
 800704c:	8c3b      	ldrh	r3, [r7, #32]
 800704e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d01b      	beq.n	800708e <USB_DeactivateEndpoint+0x18a>
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706c:	83fb      	strh	r3, [r7, #30]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	441a      	add	r2, r3
 8007078:	8bfb      	ldrh	r3, [r7, #30]
 800707a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800707e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800708a:	b29b      	uxth	r3, r3
 800708c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	83bb      	strh	r3, [r7, #28]
 800709c:	8bbb      	ldrh	r3, [r7, #28]
 800709e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01b      	beq.n	80070de <USB_DeactivateEndpoint+0x1da>
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070bc:	837b      	strh	r3, [r7, #26]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	441a      	add	r2, r3
 80070c8:	8b7b      	ldrh	r3, [r7, #26]
 80070ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070da:	b29b      	uxth	r3, r3
 80070dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f4:	833b      	strh	r3, [r7, #24]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	441a      	add	r2, r3
 8007100:	8b3b      	ldrh	r3, [r7, #24]
 8007102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800710a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800710e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007112:	b29b      	uxth	r3, r3
 8007114:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800712c:	82fb      	strh	r3, [r7, #22]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	441a      	add	r2, r3
 8007138:	8afb      	ldrh	r3, [r7, #22]
 800713a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800713e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714a:	b29b      	uxth	r3, r3
 800714c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007164:	82bb      	strh	r3, [r7, #20]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	8abb      	ldrh	r3, [r7, #20]
 8007172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800717a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800717e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007182:	b29b      	uxth	r3, r3
 8007184:	8013      	strh	r3, [r2, #0]
 8007186:	e0a3      	b.n	80072d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007196:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <USB_DeactivateEndpoint+0x2d4>
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80071e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <USB_DeactivateEndpoint+0x324>
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007206:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007220:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800723a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800723e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	441a      	add	r2, r3
 800724a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800724c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007254:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800725c:	b29b      	uxth	r3, r3
 800725e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007276:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800728c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007294:	b29b      	uxth	r3, r3
 8007296:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	441a      	add	r2, r3
 80072ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3734      	adds	r7, #52	@ 0x34
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b0ac      	sub	sp, #176	@ 0xb0
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	f040 84ca 	bne.w	8007c86 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d904      	bls.n	8007308 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007306:	e003      	b.n	8007310 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	7b1b      	ldrb	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d122      	bne.n	800735e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6959      	ldr	r1, [r3, #20]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	88da      	ldrh	r2, [r3, #6]
 8007320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007324:	b29b      	uxth	r3, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 febd 	bl	80080a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4413      	add	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	00da      	lsls	r2, r3, #3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	f000 bc6f 	b.w	8007c3c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	2b02      	cmp	r3, #2
 8007364:	f040 831e 	bne.w	80079a4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	f240 82cf 	bls.w	8007914 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800738c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800739e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80073aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 814f 	beq.w	8007676 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	633b      	str	r3, [r7, #48]	@ 0x30
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d16b      	bne.n	80074bc <USB_EPStartXfer+0x1de>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	4413      	add	r3, r2
 80073f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	00da      	lsls	r2, r3, #3
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	4413      	add	r3, r2
 8007402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007406:	627b      	str	r3, [r7, #36]	@ 0x24
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007412:	b29a      	uxth	r2, r3
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <USB_EPStartXfer+0x158>
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29a      	uxth	r2, r3
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e05b      	b.n	80074ee <USB_EPStartXfer+0x210>
 8007436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800743a:	2b3e      	cmp	r3, #62	@ 0x3e
 800743c:	d81c      	bhi.n	8007478 <USB_EPStartXfer+0x19a>
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <USB_EPStartXfer+0x180>
 8007454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007458:	3301      	adds	r3, #1
 800745a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007468:	b29b      	uxth	r3, r3
 800746a:	029b      	lsls	r3, r3, #10
 800746c:	b29b      	uxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b29a      	uxth	r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e03a      	b.n	80074ee <USB_EPStartXfer+0x210>
 8007478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <USB_EPStartXfer+0x1ba>
 800748e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007492:	3b01      	subs	r3, #1
 8007494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4313      	orrs	r3, r2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e018      	b.n	80074ee <USB_EPStartXfer+0x210>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d114      	bne.n	80074ee <USB_EPStartXfer+0x210>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	4413      	add	r3, r2
 80074d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	00da      	lsls	r2, r3, #3
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	4413      	add	r3, r2
 80074de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	895b      	ldrh	r3, [r3, #10]
 80074f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6959      	ldr	r1, [r3, #20]
 80074fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fdce 	bl	80080a6 <USB_WritePMA>
            ep->xfer_buff += len;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007512:	441a      	add	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	429a      	cmp	r2, r3
 8007522:	d907      	bls.n	8007534 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	6a1a      	ldr	r2, [r3, #32]
 8007528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800752c:	1ad2      	subs	r2, r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	621a      	str	r2, [r3, #32]
 8007532:	e006      	b.n	8007542 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d16b      	bne.n	8007622 <USB_EPStartXfer+0x344>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	4413      	add	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	00da      	lsls	r2, r3, #3
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	4413      	add	r3, r2
 8007568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007578:	b29a      	uxth	r2, r3
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <USB_EPStartXfer+0x2be>
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007594:	b29a      	uxth	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e05d      	b.n	8007658 <USB_EPStartXfer+0x37a>
 800759c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80075a2:	d81c      	bhi.n	80075de <USB_EPStartXfer+0x300>
 80075a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <USB_EPStartXfer+0x2e6>
 80075ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075be:	3301      	adds	r3, #1
 80075c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	029b      	lsls	r3, r3, #10
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4313      	orrs	r3, r2
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e03c      	b.n	8007658 <USB_EPStartXfer+0x37a>
 80075de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <USB_EPStartXfer+0x320>
 80075f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075f8:	3b01      	subs	r3, #1
 80075fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29a      	uxth	r2, r3
 8007604:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007608:	b29b      	uxth	r3, r3
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	b29b      	uxth	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b29b      	uxth	r3, r3
 8007612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761a:	b29a      	uxth	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e01a      	b.n	8007658 <USB_EPStartXfer+0x37a>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d116      	bne.n	8007658 <USB_EPStartXfer+0x37a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	623b      	str	r3, [r7, #32]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007634:	b29b      	uxth	r3, r3
 8007636:	461a      	mov	r2, r3
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	4413      	add	r3, r2
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	00da      	lsls	r2, r3, #3
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	4413      	add	r3, r2
 8007648:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007652:	b29a      	uxth	r2, r3
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	891b      	ldrh	r3, [r3, #8]
 800765c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6959      	ldr	r1, [r3, #20]
 8007664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007668:	b29b      	uxth	r3, r3
 800766a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fd19 	bl	80080a6 <USB_WritePMA>
 8007674:	e2e2      	b.n	8007c3c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	785b      	ldrb	r3, [r3, #1]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d16b      	bne.n	8007756 <USB_EPStartXfer+0x478>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007688:	b29b      	uxth	r3, r3
 800768a:	461a      	mov	r2, r3
 800768c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800768e:	4413      	add	r3, r2
 8007690:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	00da      	lsls	r2, r3, #3
 8007698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800769a:	4413      	add	r3, r2
 800769c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <USB_EPStartXfer+0x3f2>
 80076ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	e05d      	b.n	800778c <USB_EPStartXfer+0x4ae>
 80076d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80076d6:	d81c      	bhi.n	8007712 <USB_EPStartXfer+0x434>
 80076d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <USB_EPStartXfer+0x41a>
 80076ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076f2:	3301      	adds	r3, #1
 80076f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007702:	b29b      	uxth	r3, r3
 8007704:	029b      	lsls	r3, r3, #10
 8007706:	b29b      	uxth	r3, r3
 8007708:	4313      	orrs	r3, r2
 800770a:	b29a      	uxth	r2, r3
 800770c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e03c      	b.n	800778c <USB_EPStartXfer+0x4ae>
 8007712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007716:	095b      	lsrs	r3, r3, #5
 8007718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800771c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <USB_EPStartXfer+0x454>
 8007728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800772c:	3b01      	subs	r3, #1
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29a      	uxth	r2, r3
 8007738:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800773c:	b29b      	uxth	r3, r3
 800773e:	029b      	lsls	r3, r3, #10
 8007740:	b29b      	uxth	r3, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	b29b      	uxth	r3, r3
 8007746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800774e:	b29a      	uxth	r2, r3
 8007750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	e01a      	b.n	800778c <USB_EPStartXfer+0x4ae>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d116      	bne.n	800778c <USB_EPStartXfer+0x4ae>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	653b      	str	r3, [r7, #80]	@ 0x50
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007768:	b29b      	uxth	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776e:	4413      	add	r3, r2
 8007770:	653b      	str	r3, [r7, #80]	@ 0x50
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	00da      	lsls	r2, r3, #3
 8007778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777a:	4413      	add	r3, r2
 800777c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007786:	b29a      	uxth	r2, r3
 8007788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	891b      	ldrh	r3, [r3, #8]
 8007790:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	6959      	ldr	r1, [r3, #20]
 8007798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800779c:	b29b      	uxth	r3, r3
 800779e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc7f 	bl	80080a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695a      	ldr	r2, [r3, #20]
 80077ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077b0:	441a      	add	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d907      	bls.n	80077d2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ca:	1ad2      	subs	r2, r2, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	621a      	str	r2, [r3, #32]
 80077d0:	e006      	b.n	80077e0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2200      	movs	r2, #0
 80077de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d16b      	bne.n	80078c4 <USB_EPStartXfer+0x5e6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	4413      	add	r3, r2
 80077fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00da      	lsls	r2, r3, #3
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	4413      	add	r3, r2
 800780a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800781a:	b29a      	uxth	r2, r3
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <USB_EPStartXfer+0x560>
 8007828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e05b      	b.n	80078f6 <USB_EPStartXfer+0x618>
 800783e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007842:	2b3e      	cmp	r3, #62	@ 0x3e
 8007844:	d81c      	bhi.n	8007880 <USB_EPStartXfer+0x5a2>
 8007846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <USB_EPStartXfer+0x588>
 800785c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007860:	3301      	adds	r3, #1
 8007862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29a      	uxth	r2, r3
 800786c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007870:	b29b      	uxth	r3, r3
 8007872:	029b      	lsls	r3, r3, #10
 8007874:	b29b      	uxth	r3, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	b29a      	uxth	r2, r3
 800787a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	e03a      	b.n	80078f6 <USB_EPStartXfer+0x618>
 8007880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800788a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <USB_EPStartXfer+0x5c2>
 8007896:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800789a:	3b01      	subs	r3, #1
 800789c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	029b      	lsls	r3, r3, #10
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078bc:	b29a      	uxth	r2, r3
 80078be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	e018      	b.n	80078f6 <USB_EPStartXfer+0x618>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	785b      	ldrb	r3, [r3, #1]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d114      	bne.n	80078f6 <USB_EPStartXfer+0x618>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d8:	4413      	add	r3, r2
 80078da:	643b      	str	r3, [r7, #64]	@ 0x40
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00da      	lsls	r2, r3, #3
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	895b      	ldrh	r3, [r3, #10]
 80078fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6959      	ldr	r1, [r3, #20]
 8007902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007906:	b29b      	uxth	r3, r3
 8007908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fbca 	bl	80080a6 <USB_WritePMA>
 8007912:	e193      	b.n	8007c3c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800792e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007932:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800794c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007954:	b29b      	uxth	r3, r3
 8007956:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007968:	4413      	add	r3, r2
 800796a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	00da      	lsls	r2, r3, #3
 8007972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007974:	4413      	add	r3, r2
 8007976:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800797a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800797c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007980:	b29a      	uxth	r2, r3
 8007982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007984:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	891b      	ldrh	r3, [r3, #8]
 800798a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6959      	ldr	r1, [r3, #20]
 8007992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007996:	b29b      	uxth	r3, r3
 8007998:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb82 	bl	80080a6 <USB_WritePMA>
 80079a2:	e14b      	b.n	8007c3c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ac:	1ad2      	subs	r2, r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 809a 	beq.w	8007afe <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d16b      	bne.n	8007aae <USB_EPStartXfer+0x7d0>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079e6:	4413      	add	r3, r2
 80079e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00da      	lsls	r2, r3, #3
 80079f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079f2:	4413      	add	r3, r2
 80079f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80079fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <USB_EPStartXfer+0x74a>
 8007a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e05b      	b.n	8007ae0 <USB_EPStartXfer+0x802>
 8007a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a2e:	d81c      	bhi.n	8007a6a <USB_EPStartXfer+0x78c>
 8007a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <USB_EPStartXfer+0x772>
 8007a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	029b      	lsls	r3, r3, #10
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e03a      	b.n	8007ae0 <USB_EPStartXfer+0x802>
 8007a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <USB_EPStartXfer+0x7ac>
 8007a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	029b      	lsls	r3, r3, #10
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e018      	b.n	8007ae0 <USB_EPStartXfer+0x802>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d114      	bne.n	8007ae0 <USB_EPStartXfer+0x802>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ac2:	4413      	add	r3, r2
 8007ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	00da      	lsls	r2, r3, #3
 8007acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ace:	4413      	add	r3, r2
 8007ad0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	895b      	ldrh	r3, [r3, #10]
 8007ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	6959      	ldr	r1, [r3, #20]
 8007aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fad5 	bl	80080a6 <USB_WritePMA>
 8007afc:	e09e      	b.n	8007c3c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d16b      	bne.n	8007bde <USB_EPStartXfer+0x900>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b16:	4413      	add	r3, r2
 8007b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	00da      	lsls	r2, r3, #3
 8007b20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b22:	4413      	add	r3, r2
 8007b24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <USB_EPStartXfer+0x87a>
 8007b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	e063      	b.n	8007c20 <USB_EPStartXfer+0x942>
 8007b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b5e:	d81c      	bhi.n	8007b9a <USB_EPStartXfer+0x8bc>
 8007b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <USB_EPStartXfer+0x8a2>
 8007b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	029b      	lsls	r3, r3, #10
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e042      	b.n	8007c20 <USB_EPStartXfer+0x942>
 8007b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <USB_EPStartXfer+0x8dc>
 8007bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	e020      	b.n	8007c20 <USB_EPStartXfer+0x942>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d11c      	bne.n	8007c20 <USB_EPStartXfer+0x942>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	00da      	lsls	r2, r3, #3
 8007c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	891b      	ldrh	r3, [r3, #8]
 8007c24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	6959      	ldr	r1, [r3, #20]
 8007c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa35 	bl	80080a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c52:	817b      	strh	r3, [r7, #10]
 8007c54:	897b      	ldrh	r3, [r7, #10]
 8007c56:	f083 0310 	eor.w	r3, r3, #16
 8007c5a:	817b      	strh	r3, [r7, #10]
 8007c5c:	897b      	ldrh	r3, [r7, #10]
 8007c5e:	f083 0320 	eor.w	r3, r3, #32
 8007c62:	817b      	strh	r3, [r7, #10]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	897b      	ldrh	r3, [r7, #10]
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]
 8007c84:	e0d5      	b.n	8007e32 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	7b1b      	ldrb	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d156      	bne.n	8007d3c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d122      	bne.n	8007cdc <USB_EPStartXfer+0x9fe>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	78db      	ldrb	r3, [r3, #3]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11e      	bne.n	8007cdc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	8013      	strh	r3, [r2, #0]
 8007cda:	e01d      	b.n	8007d18 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	441a      	add	r2, r3
 8007d00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d907      	bls.n	8007d34 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	1ad2      	subs	r2, r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	619a      	str	r2, [r3, #24]
 8007d32:	e054      	b.n	8007dde <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	619a      	str	r2, [r3, #24]
 8007d3a:	e050      	b.n	8007dde <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	78db      	ldrb	r3, [r3, #3]
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d142      	bne.n	8007dca <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d048      	beq.n	8007dde <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <USB_EPStartXfer+0xa96>
 8007d68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d12e      	bne.n	8007dde <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d128      	bne.n	8007dde <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	8013      	strh	r3, [r2, #0]
 8007dc8:	e009      	b.n	8007dde <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	78db      	ldrb	r3, [r3, #3]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d103      	bne.n	8007dda <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	619a      	str	r2, [r3, #24]
 8007dd8:	e001      	b.n	8007dde <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e02a      	b.n	8007e34 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007df8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007dfc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	37b0      	adds	r7, #176	@ 0xb0
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d020      	beq.n	8007e90 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e64:	81bb      	strh	r3, [r7, #12]
 8007e66:	89bb      	ldrh	r3, [r7, #12]
 8007e68:	f083 0310 	eor.w	r3, r3, #16
 8007e6c:	81bb      	strh	r3, [r7, #12]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	89bb      	ldrh	r3, [r7, #12]
 8007e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	8013      	strh	r3, [r2, #0]
 8007e8e:	e01f      	b.n	8007ed0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007eae:	81fb      	strh	r3, [r7, #14]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	441a      	add	r2, r3
 8007eba:	89fb      	ldrh	r3, [r7, #14]
 8007ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b087      	sub	sp, #28
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d04c      	beq.n	8007f8a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	823b      	strh	r3, [r7, #16]
 8007efe:	8a3b      	ldrh	r3, [r7, #16]
 8007f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01b      	beq.n	8007f40 <USB_EPClearStall+0x62>
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1e:	81fb      	strh	r3, [r7, #14]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	441a      	add	r2, r3
 8007f2a:	89fb      	ldrh	r3, [r7, #14]
 8007f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	78db      	ldrb	r3, [r3, #3]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d06c      	beq.n	8008022 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f5e:	81bb      	strh	r3, [r7, #12]
 8007f60:	89bb      	ldrh	r3, [r7, #12]
 8007f62:	f083 0320 	eor.w	r3, r3, #32
 8007f66:	81bb      	strh	r3, [r7, #12]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	441a      	add	r2, r3
 8007f72:	89bb      	ldrh	r3, [r7, #12]
 8007f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	8013      	strh	r3, [r2, #0]
 8007f88:	e04b      	b.n	8008022 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	82fb      	strh	r3, [r7, #22]
 8007f98:	8afb      	ldrh	r3, [r7, #22]
 8007f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <USB_EPClearStall+0xfc>
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	82bb      	strh	r3, [r7, #20]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	441a      	add	r2, r3
 8007fc4:	8abb      	ldrh	r3, [r7, #20]
 8007fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff0:	827b      	strh	r3, [r7, #18]
 8007ff2:	8a7b      	ldrh	r3, [r7, #18]
 8007ff4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ff8:	827b      	strh	r3, [r7, #18]
 8007ffa:	8a7b      	ldrh	r3, [r7, #18]
 8007ffc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008000:	827b      	strh	r3, [r7, #18]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	441a      	add	r2, r3
 800800c:	8a7b      	ldrh	r3, [r7, #18]
 800800e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801e:	b29b      	uxth	r3, r3
 8008020:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d103      	bne.n	800804a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2280      	movs	r2, #128	@ 0x80
 8008046:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008066:	b29b      	uxth	r3, r3
 8008068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008094:	b29b      	uxth	r3, r3
 8008096:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008098:	68fb      	ldr	r3, [r7, #12]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b08b      	sub	sp, #44	@ 0x2c
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	4611      	mov	r1, r2
 80080b2:	461a      	mov	r2, r3
 80080b4:	460b      	mov	r3, r1
 80080b6:	80fb      	strh	r3, [r7, #6]
 80080b8:	4613      	mov	r3, r2
 80080ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080bc:	88bb      	ldrh	r3, [r7, #4]
 80080be:	3301      	adds	r3, #1
 80080c0:	085b      	lsrs	r3, r3, #1
 80080c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080cc:	88fa      	ldrh	r2, [r7, #6]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	627b      	str	r3, [r7, #36]	@ 0x24
 80080dc:	e01c      	b.n	8008118 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	3301      	adds	r3, #1
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b21b      	sxth	r3, r3
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	b21a      	sxth	r2, r3
 80080f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	b21b      	sxth	r3, r3
 80080f8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	8a7a      	ldrh	r2, [r7, #18]
 80080fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	3302      	adds	r3, #2
 8008104:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	3301      	adds	r3, #1
 800810a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	3301      	adds	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	3b01      	subs	r3, #1
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1df      	bne.n	80080de <USB_WritePMA+0x38>
  }
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	372c      	adds	r7, #44	@ 0x2c
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800812c:	b480      	push	{r7}
 800812e:	b08b      	sub	sp, #44	@ 0x2c
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4611      	mov	r1, r2
 8008138:	461a      	mov	r2, r3
 800813a:	460b      	mov	r3, r1
 800813c:	80fb      	strh	r3, [r7, #6]
 800813e:	4613      	mov	r3, r2
 8008140:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008142:	88bb      	ldrh	r3, [r7, #4]
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	b29b      	uxth	r3, r3
 8008148:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800815c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
 8008162:	e018      	b.n	8008196 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	3302      	adds	r3, #2
 8008170:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	b2da      	uxtb	r2, r3
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	3301      	adds	r3, #1
 800817e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	b2da      	uxtb	r2, r3
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3301      	adds	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	3b01      	subs	r3, #1
 8008194:	627b      	str	r3, [r7, #36]	@ 0x24
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e3      	bne.n	8008164 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800819c:	88bb      	ldrh	r3, [r7, #4]
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	701a      	strb	r2, [r3, #0]
  }
}
 80081b8:	bf00      	nop
 80081ba:	372c      	adds	r7, #44	@ 0x2c
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80081d4:	f002 f8b4 	bl	800a340 <USBD_static_malloc>
 80081d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80081e8:	2302      	movs	r3, #2
 80081ea:	e066      	b.n	80082ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7c1b      	ldrb	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d119      	bne.n	8008230 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008200:	2202      	movs	r2, #2
 8008202:	2181      	movs	r1, #129	@ 0x81
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 ff42 	bl	800a08e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008214:	2202      	movs	r2, #2
 8008216:	2101      	movs	r1, #1
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 ff38 	bl	800a08e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2210      	movs	r2, #16
 800822a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800822e:	e016      	b.n	800825e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008230:	2340      	movs	r3, #64	@ 0x40
 8008232:	2202      	movs	r2, #2
 8008234:	2181      	movs	r1, #129	@ 0x81
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f001 ff29 	bl	800a08e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008242:	2340      	movs	r3, #64	@ 0x40
 8008244:	2202      	movs	r2, #2
 8008246:	2101      	movs	r1, #1
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 ff20 	bl	800a08e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2210      	movs	r2, #16
 800825a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800825e:	2308      	movs	r3, #8
 8008260:	2203      	movs	r2, #3
 8008262:	2182      	movs	r1, #130	@ 0x82
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 ff12 	bl	800a08e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	7c1b      	ldrb	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d109      	bne.n	80082a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800829a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800829e:	2101      	movs	r1, #1
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 ffe3 	bl	800a26c <USBD_LL_PrepareReceive>
 80082a6:	e007      	b.n	80082b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082ae:	2340      	movs	r3, #64	@ 0x40
 80082b0:	2101      	movs	r1, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 ffda 	bl	800a26c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80082ce:	2181      	movs	r1, #129	@ 0x81
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 ff02 	bl	800a0da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80082dc:	2101      	movs	r1, #1
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fefb 	bl	800a0da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082ec:	2182      	movs	r1, #130	@ 0x82
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fef3 	bl	800a0da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00e      	beq.n	800832c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800831e:	4618      	mov	r0, r3
 8008320:	f002 f81c 	bl	800a35c <USBD_static_free>
    pdev->pClassData = NULL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008348:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800835c:	2303      	movs	r3, #3
 800835e:	e0af      	b.n	80084c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008368:	2b00      	cmp	r3, #0
 800836a:	d03f      	beq.n	80083ec <USBD_CDC_Setup+0xb4>
 800836c:	2b20      	cmp	r3, #32
 800836e:	f040 809f 	bne.w	80084b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	88db      	ldrh	r3, [r3, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d02e      	beq.n	80083d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b25b      	sxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	da16      	bge.n	80083b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008390:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	88d2      	ldrh	r2, [r2, #6]
 8008396:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	2b07      	cmp	r3, #7
 800839e:	bf28      	it	cs
 80083a0:	2307      	movcs	r3, #7
 80083a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	89fa      	ldrh	r2, [r7, #14]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 fa9f 	bl	80098ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80083b0:	e085      	b.n	80084be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	785a      	ldrb	r2, [r3, #1]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	88db      	ldrh	r3, [r3, #6]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80083c8:	6939      	ldr	r1, [r7, #16]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	461a      	mov	r2, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fab8 	bl	8009946 <USBD_CtlPrepareRx>
      break;
 80083d6:	e072      	b.n	80084be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	7850      	ldrb	r0, [r2, #1]
 80083e4:	2200      	movs	r2, #0
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	4798      	blx	r3
      break;
 80083ea:	e068      	b.n	80084be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b0b      	cmp	r3, #11
 80083f2:	d852      	bhi.n	800849a <USBD_CDC_Setup+0x162>
 80083f4:	a201      	add	r2, pc, #4	@ (adr r2, 80083fc <USBD_CDC_Setup+0xc4>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	0800842d 	.word	0x0800842d
 8008400:	080084a9 	.word	0x080084a9
 8008404:	0800849b 	.word	0x0800849b
 8008408:	0800849b 	.word	0x0800849b
 800840c:	0800849b 	.word	0x0800849b
 8008410:	0800849b 	.word	0x0800849b
 8008414:	0800849b 	.word	0x0800849b
 8008418:	0800849b 	.word	0x0800849b
 800841c:	0800849b 	.word	0x0800849b
 8008420:	0800849b 	.word	0x0800849b
 8008424:	08008457 	.word	0x08008457
 8008428:	08008481 	.word	0x08008481
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b03      	cmp	r3, #3
 8008436:	d107      	bne.n	8008448 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008438:	f107 030a 	add.w	r3, r7, #10
 800843c:	2202      	movs	r2, #2
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 fa54 	bl	80098ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008446:	e032      	b.n	80084ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f9de 	bl	800980c <USBD_CtlError>
            ret = USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	75fb      	strb	r3, [r7, #23]
          break;
 8008454:	e02b      	b.n	80084ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b03      	cmp	r3, #3
 8008460:	d107      	bne.n	8008472 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008462:	f107 030d 	add.w	r3, r7, #13
 8008466:	2201      	movs	r2, #1
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 fa3f 	bl	80098ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008470:	e01d      	b.n	80084ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f9c9 	bl	800980c <USBD_CtlError>
            ret = USBD_FAIL;
 800847a:	2303      	movs	r3, #3
 800847c:	75fb      	strb	r3, [r7, #23]
          break;
 800847e:	e016      	b.n	80084ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b03      	cmp	r3, #3
 800848a:	d00f      	beq.n	80084ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 f9bc 	bl	800980c <USBD_CtlError>
            ret = USBD_FAIL;
 8008494:	2303      	movs	r3, #3
 8008496:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008498:	e008      	b.n	80084ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f9b5 	bl	800980c <USBD_CtlError>
          ret = USBD_FAIL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	75fb      	strb	r3, [r7, #23]
          break;
 80084a6:	e002      	b.n	80084ae <USBD_CDC_Setup+0x176>
          break;
 80084a8:	bf00      	nop
 80084aa:	e008      	b.n	80084be <USBD_CDC_Setup+0x186>
          break;
 80084ac:	bf00      	nop
      }
      break;
 80084ae:	e006      	b.n	80084be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 f9aa 	bl	800980c <USBD_CtlError>
      ret = USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	75fb      	strb	r3, [r7, #23]
      break;
 80084bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80084da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e04f      	b.n	800858a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	3318      	adds	r3, #24
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d029      	beq.n	800855c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	3318      	adds	r3, #24
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	78f9      	ldrb	r1, [r7, #3]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	460b      	mov	r3, r1
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4403      	add	r3, r0
 8008528:	3320      	adds	r3, #32
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008530:	fb01 f303 	mul.w	r3, r1, r3
 8008534:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008536:	2b00      	cmp	r3, #0
 8008538:	d110      	bne.n	800855c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	3318      	adds	r3, #24
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800854e:	78f9      	ldrb	r1, [r7, #3]
 8008550:	2300      	movs	r3, #0
 8008552:	2200      	movs	r2, #0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 fe68 	bl	800a22a <USBD_LL_Transmit>
 800855a:	e015      	b.n	8008588 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e015      	b.n	80085e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 fe78 	bl	800a2ae <USBD_LL_GetRxDataSize>
 80085be:	4602      	mov	r2, r0
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80085da:	4611      	mov	r1, r2
 80085dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	e01a      	b.n	8008638 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d014      	beq.n	8008636 <USBD_CDC_EP0_RxReady+0x4e>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008612:	2bff      	cmp	r3, #255	@ 0xff
 8008614:	d00f      	beq.n	8008636 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008624:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800862c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22ff      	movs	r2, #255	@ 0xff
 8008632:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2243      	movs	r2, #67	@ 0x43
 800864c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800864e:	4b03      	ldr	r3, [pc, #12]	@ (800865c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20000094 	.word	0x20000094

08008660 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2243      	movs	r2, #67	@ 0x43
 800866c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800866e:	4b03      	ldr	r3, [pc, #12]	@ (800867c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	20000050 	.word	0x20000050

08008680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2243      	movs	r2, #67	@ 0x43
 800868c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800868e:	4b03      	ldr	r3, [pc, #12]	@ (800869c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	200000d8 	.word	0x200000d8

080086a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	220a      	movs	r2, #10
 80086ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086ae:	4b03      	ldr	r3, [pc, #12]	@ (80086bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c

080086c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e004      	b.n	80086de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	e008      	b.n	800871a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008736:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	e004      	b.n	800874c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008766:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008772:	2303      	movs	r3, #3
 8008774:	e016      	b.n	80087a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7c1b      	ldrb	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008788:	2101      	movs	r1, #1
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fd6e 	bl	800a26c <USBD_LL_PrepareReceive>
 8008790:	e007      	b.n	80087a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008798:	2340      	movs	r3, #64	@ 0x40
 800879a:	2101      	movs	r1, #1
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 fd65 	bl	800a26c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	4613      	mov	r3, r2
 80087b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e01f      	b.n	8008804 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	79fa      	ldrb	r2, [r7, #7]
 80087f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f001 fbcd 	bl	8009f98 <USBD_LL_Init>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	e016      	b.n	8008852 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008840:	f107 020e 	add.w	r2, r7, #14
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	4602      	mov	r2, r0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fbf8 	bl	800a058 <USBD_LL_Start>
 8008868:	4603      	mov	r3, r0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008894:	2303      	movs	r3, #3
 8008896:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d009      	beq.n	80088b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	4611      	mov	r1, r2
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d007      	beq.n	80088e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
  }

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ff48 	bl	8009798 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008916:	461a      	mov	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008924:	f003 031f 	and.w	r3, r3, #31
 8008928:	2b02      	cmp	r3, #2
 800892a:	d01a      	beq.n	8008962 <USBD_LL_SetupStage+0x72>
 800892c:	2b02      	cmp	r3, #2
 800892e:	d822      	bhi.n	8008976 <USBD_LL_SetupStage+0x86>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <USBD_LL_SetupStage+0x4a>
 8008934:	2b01      	cmp	r3, #1
 8008936:	d00a      	beq.n	800894e <USBD_LL_SetupStage+0x5e>
 8008938:	e01d      	b.n	8008976 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9f0 	bl	8008d28 <USBD_StdDevReq>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
      break;
 800894c:	e020      	b.n	8008990 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa54 	bl	8008e04 <USBD_StdItfReq>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
      break;
 8008960:	e016      	b.n	8008990 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa93 	bl	8008e96 <USBD_StdEPReq>
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]
      break;
 8008974:	e00c      	b.n	8008990 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800897c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008980:	b2db      	uxtb	r3, r3
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fbc7 	bl	800a118 <USBD_LL_StallEP>
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]
      break;
 800898e:	bf00      	nop
  }

  return ret;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b086      	sub	sp, #24
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	460b      	mov	r3, r1
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d138      	bne.n	8008a20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80089b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d14a      	bne.n	8008a56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d913      	bls.n	80089f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	1ad2      	subs	r2, r2, r3
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	4293      	cmp	r3, r2
 80089e4:	bf28      	it	cs
 80089e6:	4613      	movcs	r3, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 ffc7 	bl	8009980 <USBD_CtlContinueRx>
 80089f2:	e030      	b.n	8008a56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d10b      	bne.n	8008a18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 ffc2 	bl	80099a2 <USBD_CtlSendStatus>
 8008a1e:	e01a      	b.n	8008a56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d114      	bne.n	8008a56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00e      	beq.n	8008a56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	7afa      	ldrb	r2, [r7, #11]
 8008a42:	4611      	mov	r1, r2
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	4798      	blx	r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	e000      	b.n	8008a58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d16b      	bne.n	8008b4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3314      	adds	r3, #20
 8008a78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d156      	bne.n	8008b32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d914      	bls.n	8008aba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 ff3c 	bl	8009924 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aac:	2300      	movs	r3, #0
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f001 fbda 	bl	800a26c <USBD_LL_PrepareReceive>
 8008ab8:	e03b      	b.n	8008b32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d11c      	bne.n	8008b00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d316      	bcc.n	8008b00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d20f      	bcs.n	8008b00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 ff1d 	bl	8009924 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008af2:	2300      	movs	r3, #0
 8008af4:	2200      	movs	r2, #0
 8008af6:	2100      	movs	r1, #0
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f001 fbb7 	bl	800a26c <USBD_LL_PrepareReceive>
 8008afe:	e018      	b.n	8008b32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d10b      	bne.n	8008b24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b24:	2180      	movs	r1, #128	@ 0x80
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f001 faf6 	bl	800a118 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 ff4b 	bl	80099c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d122      	bne.n	8008b82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff fe98 	bl	8008872 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008b4a:	e01a      	b.n	8008b82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d114      	bne.n	8008b82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00e      	beq.n	8008b82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	7afa      	ldrb	r2, [r7, #11]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	4798      	blx	r3
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	e000      	b.n	8008b84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e02f      	b.n	8008c20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00f      	beq.n	8008bea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6852      	ldr	r2, [r2, #4]
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	4611      	mov	r1, r2
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bea:	2340      	movs	r3, #64	@ 0x40
 8008bec:	2200      	movs	r2, #0
 8008bee:	2100      	movs	r1, #0
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 fa4c 	bl	800a08e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2240      	movs	r2, #64	@ 0x40
 8008c02:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c06:	2340      	movs	r3, #64	@ 0x40
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2180      	movs	r1, #128	@ 0x80
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fa3e 	bl	800a08e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2240      	movs	r2, #64	@ 0x40
 8008c1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2204      	movs	r2, #4
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d106      	bne.n	8008c96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e012      	b.n	8008ce0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d10b      	bne.n	8008cde <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	b21a      	sxth	r2, r3
 8008d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	b21b      	sxth	r3, r3
 8008d16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d18:	89fb      	ldrh	r3, [r7, #14]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d3e:	2b40      	cmp	r3, #64	@ 0x40
 8008d40:	d005      	beq.n	8008d4e <USBD_StdDevReq+0x26>
 8008d42:	2b40      	cmp	r3, #64	@ 0x40
 8008d44:	d853      	bhi.n	8008dee <USBD_StdDevReq+0xc6>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <USBD_StdDevReq+0x3a>
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d14f      	bne.n	8008dee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d60:	e04a      	b.n	8008df8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	2b09      	cmp	r3, #9
 8008d68:	d83b      	bhi.n	8008de2 <USBD_StdDevReq+0xba>
 8008d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <USBD_StdDevReq+0x48>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008dd9 	.word	0x08008dd9
 8008d78:	08008de3 	.word	0x08008de3
 8008d7c:	08008dcf 	.word	0x08008dcf
 8008d80:	08008de3 	.word	0x08008de3
 8008d84:	08008da3 	.word	0x08008da3
 8008d88:	08008d99 	.word	0x08008d99
 8008d8c:	08008de3 	.word	0x08008de3
 8008d90:	08008dbb 	.word	0x08008dbb
 8008d94:	08008dad 	.word	0x08008dad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f9de 	bl	800915c <USBD_GetDescriptor>
          break;
 8008da0:	e024      	b.n	8008dec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb6d 	bl	8009484 <USBD_SetAddress>
          break;
 8008daa:	e01f      	b.n	8008dec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fbac 	bl	800950c <USBD_SetConfig>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
          break;
 8008db8:	e018      	b.n	8008dec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fc4b 	bl	8009658 <USBD_GetConfig>
          break;
 8008dc2:	e013      	b.n	8008dec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fc7c 	bl	80096c4 <USBD_GetStatus>
          break;
 8008dcc:	e00e      	b.n	8008dec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fcab 	bl	800972c <USBD_SetFeature>
          break;
 8008dd6:	e009      	b.n	8008dec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fcba 	bl	8009754 <USBD_ClrFeature>
          break;
 8008de0:	e004      	b.n	8008dec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fd11 	bl	800980c <USBD_CtlError>
          break;
 8008dea:	bf00      	nop
      }
      break;
 8008dec:	e004      	b.n	8008df8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fd0b 	bl	800980c <USBD_CtlError>
      break;
 8008df6:	bf00      	nop
  }

  return ret;
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop

08008e04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e1a:	2b40      	cmp	r3, #64	@ 0x40
 8008e1c:	d005      	beq.n	8008e2a <USBD_StdItfReq+0x26>
 8008e1e:	2b40      	cmp	r3, #64	@ 0x40
 8008e20:	d82f      	bhi.n	8008e82 <USBD_StdItfReq+0x7e>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <USBD_StdItfReq+0x26>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d12b      	bne.n	8008e82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d81d      	bhi.n	8008e74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	889b      	ldrh	r3, [r3, #4]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d813      	bhi.n	8008e6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	88db      	ldrh	r3, [r3, #6]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d110      	bne.n	8008e7e <USBD_StdItfReq+0x7a>
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10d      	bne.n	8008e7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fd9d 	bl	80099a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e68:	e009      	b.n	8008e7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fccd 	bl	800980c <USBD_CtlError>
          break;
 8008e72:	e004      	b.n	8008e7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fcc8 	bl	800980c <USBD_CtlError>
          break;
 8008e7c:	e000      	b.n	8008e80 <USBD_StdItfReq+0x7c>
          break;
 8008e7e:	bf00      	nop
      }
      break;
 8008e80:	e004      	b.n	8008e8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fcc1 	bl	800980c <USBD_CtlError>
      break;
 8008e8a:	bf00      	nop
  }

  return ret;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	889b      	ldrh	r3, [r3, #4]
 8008ea8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008eb2:	2b40      	cmp	r3, #64	@ 0x40
 8008eb4:	d007      	beq.n	8008ec6 <USBD_StdEPReq+0x30>
 8008eb6:	2b40      	cmp	r3, #64	@ 0x40
 8008eb8:	f200 8145 	bhi.w	8009146 <USBD_StdEPReq+0x2b0>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <USBD_StdEPReq+0x44>
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	f040 8140 	bne.w	8009146 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed8:	e13a      	b.n	8009150 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d007      	beq.n	8008ef2 <USBD_StdEPReq+0x5c>
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	f300 8129 	bgt.w	800913a <USBD_StdEPReq+0x2a4>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d07f      	beq.n	8008fec <USBD_StdEPReq+0x156>
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d03c      	beq.n	8008f6a <USBD_StdEPReq+0xd4>
 8008ef0:	e123      	b.n	800913a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d002      	beq.n	8008f04 <USBD_StdEPReq+0x6e>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d016      	beq.n	8008f30 <USBD_StdEPReq+0x9a>
 8008f02:	e02c      	b.n	8008f5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00d      	beq.n	8008f26 <USBD_StdEPReq+0x90>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b80      	cmp	r3, #128	@ 0x80
 8008f0e:	d00a      	beq.n	8008f26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 f8ff 	bl	800a118 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1a:	2180      	movs	r1, #128	@ 0x80
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f8fb 	bl	800a118 <USBD_LL_StallEP>
 8008f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f24:	e020      	b.n	8008f68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fc6f 	bl	800980c <USBD_CtlError>
              break;
 8008f2e:	e01b      	b.n	8008f68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	885b      	ldrh	r3, [r3, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10e      	bne.n	8008f56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <USBD_StdEPReq+0xc0>
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b80      	cmp	r3, #128	@ 0x80
 8008f42:	d008      	beq.n	8008f56 <USBD_StdEPReq+0xc0>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	88db      	ldrh	r3, [r3, #6]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f8e1 	bl	800a118 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fd23 	bl	80099a2 <USBD_CtlSendStatus>

              break;
 8008f5c:	e004      	b.n	8008f68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fc53 	bl	800980c <USBD_CtlError>
              break;
 8008f66:	bf00      	nop
          }
          break;
 8008f68:	e0ec      	b.n	8009144 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d002      	beq.n	8008f7c <USBD_StdEPReq+0xe6>
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d016      	beq.n	8008fa8 <USBD_StdEPReq+0x112>
 8008f7a:	e030      	b.n	8008fde <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00d      	beq.n	8008f9e <USBD_StdEPReq+0x108>
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	2b80      	cmp	r3, #128	@ 0x80
 8008f86:	d00a      	beq.n	8008f9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 f8c3 	bl	800a118 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f92:	2180      	movs	r1, #128	@ 0x80
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 f8bf 	bl	800a118 <USBD_LL_StallEP>
 8008f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f9c:	e025      	b.n	8008fea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fc33 	bl	800980c <USBD_CtlError>
              break;
 8008fa6:	e020      	b.n	8008fea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	885b      	ldrh	r3, [r3, #2]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d11b      	bne.n	8008fe8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f8c9 	bl	800a156 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fcec 	bl	80099a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008fdc:	e004      	b.n	8008fe8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc13 	bl	800980c <USBD_CtlError>
              break;
 8008fe6:	e000      	b.n	8008fea <USBD_StdEPReq+0x154>
              break;
 8008fe8:	bf00      	nop
          }
          break;
 8008fea:	e0ab      	b.n	8009144 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d002      	beq.n	8008ffe <USBD_StdEPReq+0x168>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d032      	beq.n	8009062 <USBD_StdEPReq+0x1cc>
 8008ffc:	e097      	b.n	800912e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d007      	beq.n	8009014 <USBD_StdEPReq+0x17e>
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b80      	cmp	r3, #128	@ 0x80
 8009008:	d004      	beq.n	8009014 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fbfd 	bl	800980c <USBD_CtlError>
                break;
 8009012:	e091      	b.n	8009138 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009018:	2b00      	cmp	r3, #0
 800901a:	da0b      	bge.n	8009034 <USBD_StdEPReq+0x19e>
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	3310      	adds	r3, #16
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	4413      	add	r3, r2
 8009030:	3304      	adds	r3, #4
 8009032:	e00b      	b.n	800904c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	4413      	add	r3, r2
 800904a:	3304      	adds	r3, #4
 800904c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2202      	movs	r2, #2
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fc47 	bl	80098ee <USBD_CtlSendData>
              break;
 8009060:	e06a      	b.n	8009138 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	da11      	bge.n	800908e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	3324      	adds	r3, #36	@ 0x24
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d117      	bne.n	80090b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fbc0 	bl	800980c <USBD_CtlError>
                  break;
 800908c:	e054      	b.n	8009138 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	f003 020f 	and.w	r2, r3, #15
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fbad 	bl	800980c <USBD_CtlError>
                  break;
 80090b2:	e041      	b.n	8009138 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da0b      	bge.n	80090d4 <USBD_StdEPReq+0x23e>
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	3310      	adds	r3, #16
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	4413      	add	r3, r2
 80090d0:	3304      	adds	r3, #4
 80090d2:	e00b      	b.n	80090ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	4413      	add	r3, r2
 80090ea:	3304      	adds	r3, #4
 80090ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <USBD_StdEPReq+0x264>
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	2b80      	cmp	r3, #128	@ 0x80
 80090f8:	d103      	bne.n	8009102 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2200      	movs	r2, #0
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e00e      	b.n	8009120 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 f844 	bl	800a194 <USBD_LL_IsStallEP>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2201      	movs	r2, #1
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e002      	b.n	8009120 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2202      	movs	r2, #2
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fbe1 	bl	80098ee <USBD_CtlSendData>
              break;
 800912c:	e004      	b.n	8009138 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fb6b 	bl	800980c <USBD_CtlError>
              break;
 8009136:	bf00      	nop
          }
          break;
 8009138:	e004      	b.n	8009144 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fb65 	bl	800980c <USBD_CtlError>
          break;
 8009142:	bf00      	nop
      }
      break;
 8009144:	e004      	b.n	8009150 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fb5f 	bl	800980c <USBD_CtlError>
      break;
 800914e:	bf00      	nop
  }

  return ret;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	885b      	ldrh	r3, [r3, #2]
 8009176:	0a1b      	lsrs	r3, r3, #8
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	2b0e      	cmp	r3, #14
 800917e:	f200 8152 	bhi.w	8009426 <USBD_GetDescriptor+0x2ca>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <USBD_GetDescriptor+0x2c>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091f9 	.word	0x080091f9
 800918c:	08009211 	.word	0x08009211
 8009190:	08009251 	.word	0x08009251
 8009194:	08009427 	.word	0x08009427
 8009198:	08009427 	.word	0x08009427
 800919c:	080093c7 	.word	0x080093c7
 80091a0:	080093f3 	.word	0x080093f3
 80091a4:	08009427 	.word	0x08009427
 80091a8:	08009427 	.word	0x08009427
 80091ac:	08009427 	.word	0x08009427
 80091b0:	08009427 	.word	0x08009427
 80091b4:	08009427 	.word	0x08009427
 80091b8:	08009427 	.word	0x08009427
 80091bc:	08009427 	.word	0x08009427
 80091c0:	080091c5 	.word	0x080091c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	7c12      	ldrb	r2, [r2, #16]
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
 80091e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e6:	e126      	b.n	8009436 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb0e 	bl	800980c <USBD_CtlError>
        err++;
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	3301      	adds	r3, #1
 80091f4:	72fb      	strb	r3, [r7, #11]
      break;
 80091f6:	e11e      	b.n	8009436 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
      break;
 800920e:	e112      	b.n	8009436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7c1b      	ldrb	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10d      	bne.n	8009234 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	f107 0208 	add.w	r2, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	2202      	movs	r2, #2
 8009230:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009232:	e100      	b.n	8009436 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	f107 0208 	add.w	r2, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
      break;
 800924e:	e0f2      	b.n	8009436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b05      	cmp	r3, #5
 8009258:	f200 80ac 	bhi.w	80093b4 <USBD_GetDescriptor+0x258>
 800925c:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <USBD_GetDescriptor+0x108>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	0800927d 	.word	0x0800927d
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092e5 	.word	0x080092e5
 8009270:	08009319 	.word	0x08009319
 8009274:	0800934d 	.word	0x0800934d
 8009278:	08009381 	.word	0x08009381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 0108 	add.w	r1, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800929e:	e091      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fab2 	bl	800980c <USBD_CtlError>
            err++;
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	3301      	adds	r3, #1
 80092ac:	72fb      	strb	r3, [r7, #11]
          break;
 80092ae:	e089      	b.n	80093c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	7c12      	ldrb	r2, [r2, #16]
 80092c8:	f107 0108 	add.w	r1, r7, #8
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3
 80092d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d2:	e077      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa98 	bl	800980c <USBD_CtlError>
            err++;
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	3301      	adds	r3, #1
 80092e0:	72fb      	strb	r3, [r7, #11]
          break;
 80092e2:	e06f      	b.n	80093c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7c12      	ldrb	r2, [r2, #16]
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009306:	e05d      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa7e 	bl	800980c <USBD_CtlError>
            err++;
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	3301      	adds	r3, #1
 8009314:	72fb      	strb	r3, [r7, #11]
          break;
 8009316:	e055      	b.n	80093c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933a:	e043      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa64 	bl	800980c <USBD_CtlError>
            err++;
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	3301      	adds	r3, #1
 8009348:	72fb      	strb	r3, [r7, #11]
          break;
 800934a:	e03b      	b.n	80093c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7c12      	ldrb	r2, [r2, #16]
 8009364:	f107 0108 	add.w	r1, r7, #8
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936e:	e029      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa4a 	bl	800980c <USBD_CtlError>
            err++;
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	3301      	adds	r3, #1
 800937c:	72fb      	strb	r3, [r7, #11]
          break;
 800937e:	e021      	b.n	80093c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a2:	e00f      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa30 	bl	800980c <USBD_CtlError>
            err++;
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	3301      	adds	r3, #1
 80093b0:	72fb      	strb	r3, [r7, #11]
          break;
 80093b2:	e007      	b.n	80093c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa28 	bl	800980c <USBD_CtlError>
          err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80093c2:	bf00      	nop
      }
      break;
 80093c4:	e037      	b.n	8009436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7c1b      	ldrb	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	4610      	mov	r0, r2
 80093dc:	4798      	blx	r3
 80093de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e0:	e029      	b.n	8009436 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa11 	bl	800980c <USBD_CtlError>
        err++;
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	3301      	adds	r3, #1
 80093ee:	72fb      	strb	r3, [r7, #11]
      break;
 80093f0:	e021      	b.n	8009436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7c1b      	ldrb	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10d      	bne.n	8009416 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009402:	f107 0208 	add.w	r2, r7, #8
 8009406:	4610      	mov	r0, r2
 8009408:	4798      	blx	r3
 800940a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	2207      	movs	r2, #7
 8009412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009414:	e00f      	b.n	8009436 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9f7 	bl	800980c <USBD_CtlError>
        err++;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	3301      	adds	r3, #1
 8009422:	72fb      	strb	r3, [r7, #11]
      break;
 8009424:	e007      	b.n	8009436 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9ef 	bl	800980c <USBD_CtlError>
      err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	bf00      	nop
  }

  if (err != 0U)
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11e      	bne.n	800947a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d016      	beq.n	8009472 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00e      	beq.n	8009468 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	88da      	ldrh	r2, [r3, #6]
 800944e:	893b      	ldrh	r3, [r7, #8]
 8009450:	4293      	cmp	r3, r2
 8009452:	bf28      	it	cs
 8009454:	4613      	movcs	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800945a:	893b      	ldrh	r3, [r7, #8]
 800945c:	461a      	mov	r2, r3
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa44 	bl	80098ee <USBD_CtlSendData>
 8009466:	e009      	b.n	800947c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9ce 	bl	800980c <USBD_CtlError>
 8009470:	e004      	b.n	800947c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa95 	bl	80099a2 <USBD_CtlSendStatus>
 8009478:	e000      	b.n	800947c <USBD_GetDescriptor+0x320>
    return;
 800947a:	bf00      	nop
  }
}
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop

08009484 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	889b      	ldrh	r3, [r3, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d131      	bne.n	80094fa <USBD_SetAddress+0x76>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d12d      	bne.n	80094fa <USBD_SetAddress+0x76>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094a4:	d829      	bhi.n	80094fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	885b      	ldrh	r3, [r3, #2]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d104      	bne.n	80094c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f9a3 	bl	800980c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	e01d      	b.n	8009504 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7bfa      	ldrb	r2, [r7, #15]
 80094cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fe89 	bl	800a1ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa61 	bl	80099a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	e009      	b.n	8009504 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f8:	e004      	b.n	8009504 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f985 	bl	800980c <USBD_CtlError>
  }
}
 8009502:	bf00      	nop
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	4b4c      	ldr	r3, [pc, #304]	@ (8009654 <USBD_SetConfig+0x148>)
 8009522:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009524:	4b4b      	ldr	r3, [pc, #300]	@ (8009654 <USBD_SetConfig+0x148>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d905      	bls.n	8009538 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f96c 	bl	800980c <USBD_CtlError>
    return USBD_FAIL;
 8009534:	2303      	movs	r3, #3
 8009536:	e088      	b.n	800964a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d002      	beq.n	800954a <USBD_SetConfig+0x3e>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d025      	beq.n	8009594 <USBD_SetConfig+0x88>
 8009548:	e071      	b.n	800962e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800954a:	4b42      	ldr	r3, [pc, #264]	@ (8009654 <USBD_SetConfig+0x148>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01c      	beq.n	800958c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009552:	4b40      	ldr	r3, [pc, #256]	@ (8009654 <USBD_SetConfig+0x148>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800955c:	4b3d      	ldr	r3, [pc, #244]	@ (8009654 <USBD_SetConfig+0x148>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff f990 	bl	8008888 <USBD_SetClassConfig>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f949 	bl	800980c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800957a:	e065      	b.n	8009648 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fa10 	bl	80099a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2203      	movs	r2, #3
 8009586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800958a:	e05d      	b.n	8009648 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa08 	bl	80099a2 <USBD_CtlSendStatus>
      break;
 8009592:	e059      	b.n	8009648 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009594:	4b2f      	ldr	r3, [pc, #188]	@ (8009654 <USBD_SetConfig+0x148>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d112      	bne.n	80095c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009654 <USBD_SetConfig+0x148>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ae:	4b29      	ldr	r3, [pc, #164]	@ (8009654 <USBD_SetConfig+0x148>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff f983 	bl	80088c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f9f1 	bl	80099a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c0:	e042      	b.n	8009648 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80095c2:	4b24      	ldr	r3, [pc, #144]	@ (8009654 <USBD_SetConfig+0x148>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d02a      	beq.n	8009626 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff f971 	bl	80088c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095de:	4b1d      	ldr	r3, [pc, #116]	@ (8009654 <USBD_SetConfig+0x148>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009654 <USBD_SetConfig+0x148>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff f94a 	bl	8008888 <USBD_SetClassConfig>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f903 	bl	800980c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff f956 	bl	80088c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800961c:	e014      	b.n	8009648 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f9bf 	bl	80099a2 <USBD_CtlSendStatus>
      break;
 8009624:	e010      	b.n	8009648 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9bb 	bl	80099a2 <USBD_CtlSendStatus>
      break;
 800962c:	e00c      	b.n	8009648 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8eb 	bl	800980c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009636:	4b07      	ldr	r3, [pc, #28]	@ (8009654 <USBD_SetConfig+0x148>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff f93f 	bl	80088c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
      break;
 8009646:	bf00      	nop
  }

  return ret;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	200009bc 	.word	0x200009bc

08009658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	88db      	ldrh	r3, [r3, #6]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d004      	beq.n	8009674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f8cd 	bl	800980c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009672:	e023      	b.n	80096bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	dc02      	bgt.n	8009686 <USBD_GetConfig+0x2e>
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc03      	bgt.n	800968c <USBD_GetConfig+0x34>
 8009684:	e015      	b.n	80096b2 <USBD_GetConfig+0x5a>
 8009686:	2b03      	cmp	r3, #3
 8009688:	d00b      	beq.n	80096a2 <USBD_GetConfig+0x4a>
 800968a:	e012      	b.n	80096b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3308      	adds	r3, #8
 8009696:	2201      	movs	r2, #1
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f927 	bl	80098ee <USBD_CtlSendData>
        break;
 80096a0:	e00c      	b.n	80096bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	2201      	movs	r2, #1
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f91f 	bl	80098ee <USBD_CtlSendData>
        break;
 80096b0:	e004      	b.n	80096bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8a9 	bl	800980c <USBD_CtlError>
        break;
 80096ba:	bf00      	nop
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d81e      	bhi.n	800971a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	88db      	ldrh	r3, [r3, #6]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d004      	beq.n	80096ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f890 	bl	800980c <USBD_CtlError>
        break;
 80096ec:	e01a      	b.n	8009724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f043 0202 	orr.w	r2, r3, #2
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	330c      	adds	r3, #12
 800970e:	2202      	movs	r2, #2
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8eb 	bl	80098ee <USBD_CtlSendData>
      break;
 8009718:	e004      	b.n	8009724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f875 	bl	800980c <USBD_CtlError>
      break;
 8009722:	bf00      	nop
  }
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d106      	bne.n	800974c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f92b 	bl	80099a2 <USBD_CtlSendStatus>
  }
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009764:	b2db      	uxtb	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	2b02      	cmp	r3, #2
 800976a:	d80b      	bhi.n	8009784 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	885b      	ldrh	r3, [r3, #2]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d10c      	bne.n	800978e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f910 	bl	80099a2 <USBD_CtlSendStatus>
      }
      break;
 8009782:	e004      	b.n	800978e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f840 	bl	800980c <USBD_CtlError>
      break;
 800978c:	e000      	b.n	8009790 <USBD_ClrFeature+0x3c>
      break;
 800978e:	bf00      	nop
  }
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3301      	adds	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff fa90 	bl	8008ce8 <SWAPBYTE>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff fa83 	bl	8008ce8 <SWAPBYTE>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff fa76 	bl	8008ce8 <SWAPBYTE>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	80da      	strh	r2, [r3, #6]
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009816:	2180      	movs	r1, #128	@ 0x80
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fc7d 	bl	800a118 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800981e:	2100      	movs	r1, #0
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fc79 	bl	800a118 <USBD_LL_StallEP>
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d036      	beq.n	80098b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009848:	6938      	ldr	r0, [r7, #16]
 800984a:	f000 f836 	bl	80098ba <USBD_GetLen>
 800984e:	4603      	mov	r3, r0
 8009850:	3301      	adds	r3, #1
 8009852:	b29b      	uxth	r3, r3
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	7812      	ldrb	r2, [r2, #0]
 8009866:	701a      	strb	r2, [r3, #0]
  idx++;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	3301      	adds	r3, #1
 800986c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	4413      	add	r3, r2
 8009874:	2203      	movs	r2, #3
 8009876:	701a      	strb	r2, [r3, #0]
  idx++;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	3301      	adds	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800987e:	e013      	b.n	80098a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	4413      	add	r3, r2
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	7812      	ldrb	r2, [r2, #0]
 800988a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	3301      	adds	r3, #1
 8009890:	613b      	str	r3, [r7, #16]
    idx++;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	3301      	adds	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4413      	add	r3, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	3301      	adds	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e7      	bne.n	8009880 <USBD_GetString+0x52>
 80098b0:	e000      	b.n	80098b4 <USBD_GetString+0x86>
    return;
 80098b2:	bf00      	nop
  }
}
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098ca:	e005      	b.n	80098d8 <USBD_GetLen+0x1e>
  {
    len++;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	3301      	adds	r3, #1
 80098d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f5      	bne.n	80098cc <USBD_GetLen+0x12>
  }

  return len;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2202      	movs	r2, #2
 80098fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	2100      	movs	r1, #0
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fc88 	bl	800a22a <USBD_LL_Transmit>

  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	2100      	movs	r1, #0
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fc77 	bl	800a22a <USBD_LL_Transmit>

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2203      	movs	r2, #3
 8009956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	2100      	movs	r1, #0
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fc7b 	bl	800a26c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	2100      	movs	r1, #0
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 fc6a 	bl	800a26c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2204      	movs	r2, #4
 80099ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	2100      	movs	r1, #0
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc36 	bl	800a22a <USBD_LL_Transmit>

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2205      	movs	r2, #5
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099d8:	2300      	movs	r3, #0
 80099da:	2200      	movs	r2, #0
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fc44 	bl	800a26c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80099f4:	2200      	movs	r2, #0
 80099f6:	4912      	ldr	r1, [pc, #72]	@ (8009a40 <MX_USB_Device_Init+0x50>)
 80099f8:	4812      	ldr	r0, [pc, #72]	@ (8009a44 <MX_USB_Device_Init+0x54>)
 80099fa:	f7fe fed7 	bl	80087ac <USBD_Init>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009a04:	f7f7 f856 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009a08:	490f      	ldr	r1, [pc, #60]	@ (8009a48 <MX_USB_Device_Init+0x58>)
 8009a0a:	480e      	ldr	r0, [pc, #56]	@ (8009a44 <MX_USB_Device_Init+0x54>)
 8009a0c:	f7fe fefe 	bl	800880c <USBD_RegisterClass>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009a16:	f7f7 f84d 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009a1a:	490c      	ldr	r1, [pc, #48]	@ (8009a4c <MX_USB_Device_Init+0x5c>)
 8009a1c:	4809      	ldr	r0, [pc, #36]	@ (8009a44 <MX_USB_Device_Init+0x54>)
 8009a1e:	f7fe fe4f 	bl	80086c0 <USBD_CDC_RegisterInterface>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009a28:	f7f7 f844 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009a2c:	4805      	ldr	r0, [pc, #20]	@ (8009a44 <MX_USB_Device_Init+0x54>)
 8009a2e:	f7fe ff14 	bl	800885a <USBD_Start>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009a38:	f7f7 f83c 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a3c:	bf00      	nop
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000130 	.word	0x20000130
 8009a44:	200009c0 	.word	0x200009c0
 8009a48:	20000018 	.word	0x20000018
 8009a4c:	2000011c 	.word	0x2000011c

08009a50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a54:	2200      	movs	r2, #0
 8009a56:	4905      	ldr	r1, [pc, #20]	@ (8009a6c <CDC_Init_FS+0x1c>)
 8009a58:	4805      	ldr	r0, [pc, #20]	@ (8009a70 <CDC_Init_FS+0x20>)
 8009a5a:	f7fe fe46 	bl	80086ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a5e:	4905      	ldr	r1, [pc, #20]	@ (8009a74 <CDC_Init_FS+0x24>)
 8009a60:	4803      	ldr	r0, [pc, #12]	@ (8009a70 <CDC_Init_FS+0x20>)
 8009a62:	f7fe fe60 	bl	8008726 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	20001090 	.word	0x20001090
 8009a70:	200009c0 	.word	0x200009c0
 8009a74:	20000c90 	.word	0x20000c90

08009a78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	6039      	str	r1, [r7, #0]
 8009a92:	71fb      	strb	r3, [r7, #7]
 8009a94:	4613      	mov	r3, r2
 8009a96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	2b23      	cmp	r3, #35	@ 0x23
 8009a9c:	d84a      	bhi.n	8009b34 <CDC_Control_FS+0xac>
 8009a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <CDC_Control_FS+0x1c>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009b35 	.word	0x08009b35
 8009aa8:	08009b35 	.word	0x08009b35
 8009aac:	08009b35 	.word	0x08009b35
 8009ab0:	08009b35 	.word	0x08009b35
 8009ab4:	08009b35 	.word	0x08009b35
 8009ab8:	08009b35 	.word	0x08009b35
 8009abc:	08009b35 	.word	0x08009b35
 8009ac0:	08009b35 	.word	0x08009b35
 8009ac4:	08009b35 	.word	0x08009b35
 8009ac8:	08009b35 	.word	0x08009b35
 8009acc:	08009b35 	.word	0x08009b35
 8009ad0:	08009b35 	.word	0x08009b35
 8009ad4:	08009b35 	.word	0x08009b35
 8009ad8:	08009b35 	.word	0x08009b35
 8009adc:	08009b35 	.word	0x08009b35
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009b35 	.word	0x08009b35
 8009ae8:	08009b35 	.word	0x08009b35
 8009aec:	08009b35 	.word	0x08009b35
 8009af0:	08009b35 	.word	0x08009b35
 8009af4:	08009b35 	.word	0x08009b35
 8009af8:	08009b35 	.word	0x08009b35
 8009afc:	08009b35 	.word	0x08009b35
 8009b00:	08009b35 	.word	0x08009b35
 8009b04:	08009b35 	.word	0x08009b35
 8009b08:	08009b35 	.word	0x08009b35
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009b35 	.word	0x08009b35
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b35 	.word	0x08009b35
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b35 	.word	0x08009b35
 8009b2c:	08009b35 	.word	0x08009b35
 8009b30:	08009b35 	.word	0x08009b35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b34:	bf00      	nop
  }

  return (USBD_OK);
 8009b36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_ReceiveCplt_FS(Buf, *Len);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7f6 fd51 	bl	80005fc <CDC_ReceiveCplt_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4805      	ldr	r0, [pc, #20]	@ (8009b74 <CDC_Receive_FS+0x30>)
 8009b5e:	f7fe fde2 	bl	8008726 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b62:	4804      	ldr	r0, [pc, #16]	@ (8009b74 <CDC_Receive_FS+0x30>)
 8009b64:	f7fe fdf8 	bl	8008758 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200009c0 	.word	0x200009c0

08009b78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	4613      	mov	r3, r2
 8009b84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
	...

08009b9c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	6039      	str	r1, [r7, #0]
 8009ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2212      	movs	r2, #18
 8009bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009bae:	4b03      	ldr	r3, [pc, #12]	@ (8009bbc <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	20000150 	.word	0x20000150

08009bc0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	6039      	str	r1, [r7, #0]
 8009bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2204      	movs	r2, #4
 8009bd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bd2:	4b03      	ldr	r3, [pc, #12]	@ (8009be0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	20000164 	.word	0x20000164

08009be4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4907      	ldr	r1, [pc, #28]	@ (8009c18 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009bfa:	4808      	ldr	r0, [pc, #32]	@ (8009c1c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009bfc:	f7ff fe17 	bl	800982e <USBD_GetString>
 8009c00:	e004      	b.n	8009c0c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4904      	ldr	r1, [pc, #16]	@ (8009c18 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c06:	4805      	ldr	r0, [pc, #20]	@ (8009c1c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c08:	f7ff fe11 	bl	800982e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20001490 	.word	0x20001490
 8009c1c:	0800bc10 	.word	0x0800bc10

08009c20 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	6039      	str	r1, [r7, #0]
 8009c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	4904      	ldr	r1, [pc, #16]	@ (8009c40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009c30:	4804      	ldr	r0, [pc, #16]	@ (8009c44 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009c32:	f7ff fdfc 	bl	800982e <USBD_GetString>
  return USBD_StrDesc;
 8009c36:	4b02      	ldr	r3, [pc, #8]	@ (8009c40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20001490 	.word	0x20001490
 8009c44:	0800bc1c 	.word	0x0800bc1c

08009c48 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	221a      	movs	r2, #26
 8009c58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c5a:	f000 f843 	bl	8009ce4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009c5e:	4b02      	ldr	r3, [pc, #8]	@ (8009c68 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20000168 	.word	0x20000168

08009c6c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	4907      	ldr	r1, [pc, #28]	@ (8009ca0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009c82:	4808      	ldr	r0, [pc, #32]	@ (8009ca4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009c84:	f7ff fdd3 	bl	800982e <USBD_GetString>
 8009c88:	e004      	b.n	8009c94 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4904      	ldr	r1, [pc, #16]	@ (8009ca0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009c8e:	4805      	ldr	r0, [pc, #20]	@ (8009ca4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009c90:	f7ff fdcd 	bl	800982e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c94:	4b02      	ldr	r3, [pc, #8]	@ (8009ca0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20001490 	.word	0x20001490
 8009ca4:	0800bc28 	.word	0x0800bc28

08009ca8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d105      	bne.n	8009cc6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4907      	ldr	r1, [pc, #28]	@ (8009cdc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009cbe:	4808      	ldr	r0, [pc, #32]	@ (8009ce0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009cc0:	f7ff fdb5 	bl	800982e <USBD_GetString>
 8009cc4:	e004      	b.n	8009cd0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4904      	ldr	r1, [pc, #16]	@ (8009cdc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009cca:	4805      	ldr	r0, [pc, #20]	@ (8009ce0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009ccc:	f7ff fdaf 	bl	800982e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cd0:	4b02      	ldr	r3, [pc, #8]	@ (8009cdc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20001490 	.word	0x20001490
 8009ce0:	0800bc34 	.word	0x0800bc34

08009ce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cea:	4b0f      	ldr	r3, [pc, #60]	@ (8009d28 <Get_SerialNum+0x44>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8009d2c <Get_SerialNum+0x48>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8009d30 <Get_SerialNum+0x4c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4413      	add	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d009      	beq.n	8009d1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	4909      	ldr	r1, [pc, #36]	@ (8009d34 <Get_SerialNum+0x50>)
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f814 	bl	8009d3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d14:	2204      	movs	r2, #4
 8009d16:	4908      	ldr	r1, [pc, #32]	@ (8009d38 <Get_SerialNum+0x54>)
 8009d18:	68b8      	ldr	r0, [r7, #8]
 8009d1a:	f000 f80f 	bl	8009d3c <IntToUnicode>
  }
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	1fff7590 	.word	0x1fff7590
 8009d2c:	1fff7594 	.word	0x1fff7594
 8009d30:	1fff7598 	.word	0x1fff7598
 8009d34:	2000016a 	.word	0x2000016a
 8009d38:	2000017a 	.word	0x2000017a

08009d3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]
 8009d52:	e027      	b.n	8009da4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	0f1b      	lsrs	r3, r3, #28
 8009d58:	2b09      	cmp	r3, #9
 8009d5a:	d80b      	bhi.n	8009d74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	0f1b      	lsrs	r3, r3, #28
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	4619      	mov	r1, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3230      	adds	r2, #48	@ 0x30
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	e00a      	b.n	8009d8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	0f1b      	lsrs	r3, r3, #28
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	440b      	add	r3, r1
 8009d84:	3237      	adds	r2, #55	@ 0x37
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	3301      	adds	r3, #1
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	4413      	add	r3, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	3301      	adds	r3, #1
 8009da2:	75fb      	strb	r3, [r7, #23]
 8009da4:	7dfa      	ldrb	r2, [r7, #23]
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d3d3      	bcc.n	8009d54 <IntToUnicode+0x18>
  }
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b094      	sub	sp, #80	@ 0x50
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009dc4:	f107 030c 	add.w	r3, r7, #12
 8009dc8:	2244      	movs	r2, #68	@ 0x44
 8009dca:	2100      	movs	r1, #0
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 f8a0 	bl	800af12 <memset>
  if(pcdHandle->Instance==USB)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a19      	ldr	r2, [pc, #100]	@ (8009e3c <HAL_PCD_MspInit+0x80>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d12b      	bne.n	8009e34 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009de0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009de2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009de6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009de8:	f107 030c 	add.w	r3, r7, #12
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fa fae3 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009df8:	f7f6 fe5c 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009dfc:	4b10      	ldr	r3, [pc, #64]	@ (8009e40 <HAL_PCD_MspInit+0x84>)
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e00:	4a0f      	ldr	r2, [pc, #60]	@ (8009e40 <HAL_PCD_MspInit+0x84>)
 8009e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e08:	4b0d      	ldr	r3, [pc, #52]	@ (8009e40 <HAL_PCD_MspInit+0x84>)
 8009e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e10:	60bb      	str	r3, [r7, #8]
 8009e12:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8009e14:	2200      	movs	r2, #0
 8009e16:	2100      	movs	r1, #0
 8009e18:	2013      	movs	r0, #19
 8009e1a:	f7f7 fae8 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8009e1e:	2013      	movs	r0, #19
 8009e20:	f7f7 faff 	bl	8001422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e24:	2200      	movs	r2, #0
 8009e26:	2100      	movs	r1, #0
 8009e28:	2014      	movs	r0, #20
 8009e2a:	f7f7 fae0 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e2e:	2014      	movs	r0, #20
 8009e30:	f7f7 faf7 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e34:	bf00      	nop
 8009e36:	3750      	adds	r7, #80	@ 0x50
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40005c00 	.word	0x40005c00
 8009e40:	40021000 	.word	0x40021000

08009e44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f7fe fd48 	bl	80088f0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	440b      	add	r3, r1
 8009e88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f7fe fd82 	bl	800899a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	440b      	add	r3, r1
 8009ebe:	3324      	adds	r3, #36	@ 0x24
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	f7fe fdcb 	bl	8008a60 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fedf 	bl	8008ca4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	795b      	ldrb	r3, [r3, #5]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d001      	beq.n	8009f06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f02:	f7f6 fdd7 	bl	8000ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009f0c:	7bfa      	ldrb	r2, [r7, #15]
 8009f0e:	4611      	mov	r1, r2
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fe89 	bl	8008c28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fe35 	bl	8008b8c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe fe84 	bl	8008c48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	7a5b      	ldrb	r3, [r3, #9]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f48:	4b04      	ldr	r3, [pc, #16]	@ (8009f5c <HAL_PCD_SuspendCallback+0x30>)
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	4a03      	ldr	r2, [pc, #12]	@ (8009f5c <HAL_PCD_SuspendCallback+0x30>)
 8009f4e:	f043 0306 	orr.w	r3, r3, #6
 8009f52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	e000ed00 	.word	0xe000ed00

08009f60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7a5b      	ldrb	r3, [r3, #9]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f70:	4b08      	ldr	r3, [pc, #32]	@ (8009f94 <HAL_PCD_ResumeCallback+0x34>)
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	4a07      	ldr	r2, [pc, #28]	@ (8009f94 <HAL_PCD_ResumeCallback+0x34>)
 8009f76:	f023 0306 	bic.w	r3, r3, #6
 8009f7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009f7c:	f000 f9f8 	bl	800a370 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe fe74 	bl	8008c74 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	e000ed00 	.word	0xe000ed00

08009f98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009fa0:	4a2b      	ldr	r2, [pc, #172]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a29      	ldr	r2, [pc, #164]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009fb0:	4b27      	ldr	r3, [pc, #156]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fb2:	4a28      	ldr	r2, [pc, #160]	@ (800a054 <USBD_LL_Init+0xbc>)
 8009fb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fb6:	4b26      	ldr	r3, [pc, #152]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fb8:	2208      	movs	r2, #8
 8009fba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fbc:	4b24      	ldr	r3, [pc, #144]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fc2:	4b23      	ldr	r3, [pc, #140]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009fc8:	4b21      	ldr	r3, [pc, #132]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fce:	4b20      	ldr	r3, [pc, #128]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009fd4:	4b1e      	ldr	r3, [pc, #120]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fda:	4b1d      	ldr	r3, [pc, #116]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fe0:	481b      	ldr	r0, [pc, #108]	@ (800a050 <USBD_LL_Init+0xb8>)
 8009fe2:	f7f7 ff05 	bl	8001df0 <HAL_PCD_Init>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009fec:	f7f6 fd62 	bl	8000ab4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ff6:	2318      	movs	r3, #24
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f7f9 fb8c 	bl	8003718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a006:	2358      	movs	r3, #88	@ 0x58
 800a008:	2200      	movs	r2, #0
 800a00a:	2180      	movs	r1, #128	@ 0x80
 800a00c:	f7f9 fb84 	bl	8003718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a016:	23c0      	movs	r3, #192	@ 0xc0
 800a018:	2200      	movs	r2, #0
 800a01a:	2181      	movs	r1, #129	@ 0x81
 800a01c:	f7f9 fb7c 	bl	8003718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a026:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a02a:	2200      	movs	r2, #0
 800a02c:	2101      	movs	r1, #1
 800a02e:	f7f9 fb73 	bl	8003718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a03c:	2200      	movs	r2, #0
 800a03e:	2182      	movs	r1, #130	@ 0x82
 800a040:	f7f9 fb6a 	bl	8003718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20001690 	.word	0x20001690
 800a054:	40005c00 	.word	0x40005c00

0800a058 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f7 ff8c 	bl	8001f8c <HAL_PCD_Start>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 f97e 	bl	800a37c <USBD_Get_USB_Status>
 800a080:	4603      	mov	r3, r0
 800a082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	4608      	mov	r0, r1
 800a098:	4611      	mov	r1, r2
 800a09a:	461a      	mov	r2, r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	70fb      	strb	r3, [r7, #3]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70bb      	strb	r3, [r7, #2]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a0b6:	78bb      	ldrb	r3, [r7, #2]
 800a0b8:	883a      	ldrh	r2, [r7, #0]
 800a0ba:	78f9      	ldrb	r1, [r7, #3]
 800a0bc:	f7f8 f8d3 	bl	8002266 <HAL_PCD_EP_Open>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 f958 	bl	800a37c <USBD_Get_USB_Status>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a0f4:	78fa      	ldrb	r2, [r7, #3]
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f8 f913 	bl	8002324 <HAL_PCD_EP_Close>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f939 	bl	800a37c <USBD_Get_USB_Status>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a132:	78fa      	ldrb	r2, [r7, #3]
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f7f8 f9bc 	bl	80024b4 <HAL_PCD_EP_SetStall>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f91a 	bl	800a37c <USBD_Get_USB_Status>
 800a148:	4603      	mov	r3, r0
 800a14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	4611      	mov	r1, r2
 800a174:	4618      	mov	r0, r3
 800a176:	f7f8 f9ef 	bl	8002558 <HAL_PCD_EP_ClrStall>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 f8fb 	bl	800a37c <USBD_Get_USB_Status>
 800a186:	4603      	mov	r3, r0
 800a188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	da0b      	bge.n	800a1c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1b6:	68f9      	ldr	r1, [r7, #12]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	440b      	add	r3, r1
 800a1c2:	3312      	adds	r3, #18
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	e00b      	b.n	800a1e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	440b      	add	r3, r1
 800a1da:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a1de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a206:	78fa      	ldrb	r2, [r7, #3]
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f8 f807 	bl	800221e <HAL_PCD_SetAddress>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4618      	mov	r0, r3
 800a218:	f000 f8b0 	bl	800a37c <USBD_Get_USB_Status>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a220:	7bbb      	ldrb	r3, [r7, #14]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
 800a236:	460b      	mov	r3, r1
 800a238:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a248:	7af9      	ldrb	r1, [r7, #11]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	f7f8 f8fa 	bl	8002446 <HAL_PCD_EP_Transmit>
 800a252:	4603      	mov	r3, r0
 800a254:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f88f 	bl	800a37c <USBD_Get_USB_Status>
 800a25e:	4603      	mov	r3, r0
 800a260:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a262:	7dbb      	ldrb	r3, [r7, #22]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	607a      	str	r2, [r7, #4]
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	460b      	mov	r3, r1
 800a27a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a28a:	7af9      	ldrb	r1, [r7, #11]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	f7f8 f890 	bl	80023b4 <HAL_PCD_EP_Receive>
 800a294:	4603      	mov	r3, r0
 800a296:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 f86e 	bl	800a37c <USBD_Get_USB_Status>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f8 f8a6 	bl	8002416 <HAL_PCD_EP_GetRxCount>
 800a2ca:	4603      	mov	r3, r0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a2e0:	78fb      	ldrb	r3, [r7, #3]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <HAL_PCDEx_LPM_Callback+0x18>
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d013      	beq.n	800a312 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a2ea:	e023      	b.n	800a334 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	7a5b      	ldrb	r3, [r3, #9]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d007      	beq.n	800a304 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a2f4:	f000 f83c 	bl	800a370 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2f8:	4b10      	ldr	r3, [pc, #64]	@ (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a2fe:	f023 0306 	bic.w	r3, r3, #6
 800a302:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fcb2 	bl	8008c74 <USBD_LL_Resume>
    break;
 800a310:	e010      	b.n	800a334 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fc95 	bl	8008c48 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	7a5b      	ldrb	r3, [r3, #9]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a326:	4b05      	ldr	r3, [pc, #20]	@ (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	4a04      	ldr	r2, [pc, #16]	@ (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a32c:	f043 0306 	orr.w	r3, r3, #6
 800a330:	6113      	str	r3, [r2, #16]
    break;
 800a332:	bf00      	nop
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	e000ed00 	.word	0xe000ed00

0800a340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a348:	4b03      	ldr	r3, [pc, #12]	@ (800a358 <USBD_static_malloc+0x18>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	2000196c 	.word	0x2000196c

0800a35c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a374:	f7f6 fa0c 	bl	8000790 <SystemClock_Config>
}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d817      	bhi.n	800a3c0 <USBD_Get_USB_Status+0x44>
 800a390:	a201      	add	r2, pc, #4	@ (adr r2, 800a398 <USBD_Get_USB_Status+0x1c>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3a9 	.word	0x0800a3a9
 800a39c:	0800a3af 	.word	0x0800a3af
 800a3a0:	0800a3b5 	.word	0x0800a3b5
 800a3a4:	0800a3bb 	.word	0x0800a3bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ac:	e00b      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b2:	e008      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e005      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e002      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	bf00      	nop
  }
  return usb_status;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <ymodem_Init>:

/**
 * @brief  Initialise YMODEM Rx State 
 * 
 */
void ymodem_Init(ymodem_t *ymodem, ymodem_fxn_t SerialWriteFxn) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	assert (ymodem != NULL);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d105      	bne.n	800a3f0 <ymodem_Init+0x1c>
 800a3e4:	4b27      	ldr	r3, [pc, #156]	@ (800a484 <ymodem_Init+0xb0>)
 800a3e6:	4a28      	ldr	r2, [pc, #160]	@ (800a488 <ymodem_Init+0xb4>)
 800a3e8:	214a      	movs	r1, #74	@ 0x4a
 800a3ea:	4828      	ldr	r0, [pc, #160]	@ (800a48c <ymodem_Init+0xb8>)
 800a3ec:	f000 fc4a 	bl	800ac84 <__assert_func>

	if (ymodem->initialized == YM_INSTANCE_INIT_MASK){
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 351b 	ldrb.w	r3, [r3, #1307]	@ 0x51b
 800a3f6:	2b52      	cmp	r3, #82	@ 0x52
 800a3f8:	d040      	beq.n	800a47c <ymodem_Init+0xa8>
		return;
	}

	memset(ymodem->fileName, 	0, YM_FILE_NAME_LENGTH);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fd85 	bl	800af12 <memset>
	memset(ymodem->fileSizeStr, 0, YM_FILE_SIZE_LENGTH);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a40e:	2210      	movs	r2, #16
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fd7d 	bl	800af12 <memset>
	memset(ymodem->packetData, 	0, YM_PACKET_1K_OVRHD_SIZE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a41e:	f240 4205 	movw	r2, #1029	@ 0x405
 800a422:	2100      	movs	r1, #0
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fd74 	bl	800af12 <memset>
	ymodem->fileSize 		= 0;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c3 251c 	str.w	r2, [r3, #1308]	@ 0x51c
	ymodem->prevC 			= 0;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2520 	strb.w	r2, [r3, #1312]	@ 0x520
	ymodem->startOfPacket 	= 1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2521 	strb.w	r2, [r3, #1313]	@ 0x521
	ymodem->packetBytes 	= 0;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f8a3 2524 	strh.w	r2, [r3, #1316]	@ 0x524
	ymodem->packetSize 		= 0;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8a3 2526 	strh.w	r2, [r3, #1318]	@ 0x526
	ymodem->packetsReceived	= 0;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
	ymodem->eotReceived 	= 0;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2522 	strb.w	r2, [r3, #1314]	@ 0x522
	ymodem->serialWriteFxn 	= SerialWriteFxn;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	f8c3 2530 	str.w	r2, [r3, #1328]	@ 0x530
	ymodem->nextStatus 		= YMODEM_OK;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
	ymodem->initialized 	= YM_INSTANCE_INIT_MASK;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2252      	movs	r2, #82	@ 0x52
 800a476:	f883 251b 	strb.w	r2, [r3, #1307]	@ 0x51b
 800a47a:	e000      	b.n	800a47e <ymodem_Init+0xaa>
		return;
 800a47c:	bf00      	nop
}
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	0800bc44 	.word	0x0800bc44
 800a488:	0800bcac 	.word	0x0800bcac
 800a48c:	0800bc54 	.word	0x0800bc54

0800a490 <GenerateResponse>:
 * @param  retVal		The internal YM_RET_T to translate to YMODEM_T 
 * @param  respBuff		Buffer to write to the response to
 * @param  len			Length of data written
 * @return YMODEM_T 	
 */
static ymodem_err_e GenerateResponse(ymodem_t *ymodem, ym_ret_t retVal) {
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
	switch (retVal) {
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	2b09      	cmp	r3, #9
 800a4a0:	d87f      	bhi.n	800a5a2 <GenerateResponse+0x112>
 800a4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a8 <GenerateResponse+0x18>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4d1 	.word	0x0800a4d1
 800a4ac:	0800a4e7 	.word	0x0800a4e7
 800a4b0:	0800a4dd 	.word	0x0800a4dd
 800a4b4:	0800a503 	.word	0x0800a503
 800a4b8:	0800a515 	.word	0x0800a515
 800a4bc:	0800a527 	.word	0x0800a527
 800a4c0:	0800a543 	.word	0x0800a543
 800a4c4:	0800a557 	.word	0x0800a557
 800a4c8:	0800a56b 	.word	0x0800a56b
 800a4cc:	0800a587 	.word	0x0800a587
		case YM_OK:
			ymodem->payloadLen = 0;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			return YMODEM_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e064      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_ABORT:
			ymodem_Abort(ymodem);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f867 	bl	800a5b0 <ymodem_Abort>
			return YMODEM_TX_PENDING;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e05f      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_ABORTED:
			ymodem->payloadTx[0] = CRC16;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2243      	movs	r2, #67	@ 0x43
 800a4ea:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			ymodem->payloadLen = 1;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			ymodem->nextStatus = YMODEM_ABORTED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
			return YMODEM_TX_PENDING;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e051      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_WRITE_ERR:
			ymodem_Abort(ymodem);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f854 	bl	800a5b0 <ymodem_Abort>
			ymodem->nextStatus = YMODEM_WRITE_ERR;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2203      	movs	r2, #3
 800a50c:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
			return YMODEM_TX_PENDING;
 800a510:	2301      	movs	r3, #1
 800a512:	e048      	b.n	800a5a6 <GenerateResponse+0x116>
		case YM_SIZE_ERR:
			ymodem_Abort(ymodem);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f84b 	bl	800a5b0 <ymodem_Abort>
			ymodem->nextStatus = YMODEM_SIZE_ERR;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2204      	movs	r2, #4
 800a51e:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
			return YMODEM_TX_PENDING;
 800a522:	2301      	movs	r3, #1
 800a524:	e03f      	b.n	800a5a6 <GenerateResponse+0x116>
		case YM_START_RX:
			ymodem->payloadTx[0] = ACK;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2206      	movs	r2, #6
 800a52a:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			ymodem->payloadTx[1] = CRC16;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2243      	movs	r2, #67	@ 0x43
 800a532:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			ymodem->payloadLen = 2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2202      	movs	r2, #2
 800a53a:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			return YMODEM_TX_PENDING;
 800a53e:	2301      	movs	r3, #1
 800a540:	e031      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_RX_ERROR:
			ymodem->payloadTx[0] = NAK;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2215      	movs	r2, #21
 800a546:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			ymodem->payloadLen = 1;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			return YMODEM_TX_PENDING;
 800a552:	2301      	movs	r3, #1
 800a554:	e027      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_RX_OK:
			ymodem->payloadTx[0] = ACK;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2206      	movs	r2, #6
 800a55a:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			ymodem->payloadLen = 1;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			return YMODEM_TX_PENDING;
 800a566:	2301      	movs	r3, #1
 800a568:	e01d      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_RX_COMPLETE:
			ymodem->payloadTx[0] = ACK;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2206      	movs	r2, #6
 800a56e:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			ymodem->payloadTx[1] = CRC16;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2243      	movs	r2, #67	@ 0x43
 800a576:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			ymodem->payloadLen = 2;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2202      	movs	r2, #2
 800a57e:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			return YMODEM_TX_PENDING;
 800a582:	2301      	movs	r3, #1
 800a584:	e00f      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		case YM_SUCCESS:
			ymodem->payloadTx[0] = ACK;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2206      	movs	r2, #6
 800a58a:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			ymodem->payloadLen = 1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
			ymodem->nextStatus = YMODEM_COMPLETE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2205      	movs	r2, #5
 800a59a:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
			return YMODEM_TX_PENDING;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e001      	b.n	800a5a6 <GenerateResponse+0x116>
			break;
		default: 
			break;
 800a5a2:	bf00      	nop
	}
	return YMODEM_ABORTED;
 800a5a4:	2302      	movs	r3, #2
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop

0800a5b0 <ymodem_Abort>:
 * 
 * @param  respBuff		Buffer to write payload to.
 * @param  len			Length of the payload.
 * @return YMODEM_T 		
 */
ymodem_err_e ymodem_Abort(ymodem_t *ymodem) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
	assert (ymodem != NULL);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <ymodem_Abort+0x1a>
 800a5be:	4b11      	ldr	r3, [pc, #68]	@ (800a604 <ymodem_Abort+0x54>)
 800a5c0:	4a11      	ldr	r2, [pc, #68]	@ (800a608 <ymodem_Abort+0x58>)
 800a5c2:	21ab      	movs	r1, #171	@ 0xab
 800a5c4:	4811      	ldr	r0, [pc, #68]	@ (800a60c <ymodem_Abort+0x5c>)
 800a5c6:	f000 fb5d 	bl	800ac84 <__assert_func>
	assert (ymodem->initialized = YM_INSTANCE_INIT_MASK);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2252      	movs	r2, #82	@ 0x52
 800a5ce:	f883 251b 	strb.w	r2, [r3, #1307]	@ 0x51b

	ymodem->payloadTx[0] = CA;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2218      	movs	r2, #24
 800a5d6:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
	ymodem->payloadTx[1] = CA;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2218      	movs	r2, #24
 800a5de:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
	ymodem->payloadLen = 2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	f883 251a 	strb.w	r2, [r3, #1306]	@ 0x51a
	ymodem->nextStatus = YMODEM_ABORTED;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c
	ymodem->packetsReceived = 0;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
	return YMODEM_ABORTED;
 800a5fa:	2302      	movs	r3, #2
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	0800bc44 	.word	0x0800bc44
 800a608:	0800bcb8 	.word	0x0800bcb8
 800a60c:	0800bc54 	.word	0x0800bc54

0800a610 <ymodem_Reset>:
/**
 * @brief  				Restart all variables and machine state of ymodem.
 *
 * @param  ymodem		Ymodem instance.
 */
ymodem_err_e 	ymodem_Reset(ymodem_t *ymodem){
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	assert (ymodem != NULL);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d105      	bne.n	800a62a <ymodem_Reset+0x1a>
 800a61e:	4b17      	ldr	r3, [pc, #92]	@ (800a67c <ymodem_Reset+0x6c>)
 800a620:	4a17      	ldr	r2, [pc, #92]	@ (800a680 <ymodem_Reset+0x70>)
 800a622:	21bc      	movs	r1, #188	@ 0xbc
 800a624:	4817      	ldr	r0, [pc, #92]	@ (800a684 <ymodem_Reset+0x74>)
 800a626:	f000 fb2d 	bl	800ac84 <__assert_func>
	assert (ymodem->initialized = YM_INSTANCE_INIT_MASK);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2252      	movs	r2, #82	@ 0x52
 800a62e:	f883 251b 	strb.w	r2, [r3, #1307]	@ 0x51b

	ymodem->fileSize 		= 0;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f8c3 251c 	str.w	r2, [r3, #1308]	@ 0x51c
	ymodem->prevC 			= 0;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2520 	strb.w	r2, [r3, #1312]	@ 0x520
	ymodem->startOfPacket 	= 1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2521 	strb.w	r2, [r3, #1313]	@ 0x521
	ymodem->packetBytes 	= 0;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f8a3 2524 	strh.w	r2, [r3, #1316]	@ 0x524
	ymodem->packetSize 		= 0;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f8a3 2526 	strh.w	r2, [r3, #1318]	@ 0x526
	ymodem->packetsReceived	= 0;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
	ymodem->eotReceived 	= 0;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2522 	strb.w	r2, [r3, #1314]	@ 0x522
	ymodem->nextStatus 		= YMODEM_OK;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 252c 	strb.w	r2, [r3, #1324]	@ 0x52c

	return YMODEM_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	0800bc44 	.word	0x0800bc44
 800a680:	0800bcc8 	.word	0x0800bcc8
 800a684:	0800bc54 	.word	0x0800bc54

0800a688 <ymodem_ReceiveByte>:
 * @param  c			A byte from the YMODEM Sender
 * @param  respBuff		Buffer to write the data to be sent back to the sender
 * @param  respLen		Length of the data to send to the sender.
 * @return YMODEM_T 	Return value indicating status after each byte.
 */
ymodem_err_e ymodem_ReceiveByte(ymodem_t *ymodem, uint8_t c) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
	ym_ret_t ret = YM_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
	ymodem_err_e GenRet;

	assert (ymodem != NULL);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d105      	bne.n	800a6aa <ymodem_ReceiveByte+0x22>
 800a69e:	4b83      	ldr	r3, [pc, #524]	@ (800a8ac <ymodem_ReceiveByte+0x224>)
 800a6a0:	4a83      	ldr	r2, [pc, #524]	@ (800a8b0 <ymodem_ReceiveByte+0x228>)
 800a6a2:	21d8      	movs	r1, #216	@ 0xd8
 800a6a4:	4883      	ldr	r0, [pc, #524]	@ (800a8b4 <ymodem_ReceiveByte+0x22c>)
 800a6a6:	f000 faed 	bl	800ac84 <__assert_func>
	assert (ymodem->initialized = YM_INSTANCE_INIT_MASK);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2252      	movs	r2, #82	@ 0x52
 800a6ae:	f883 251b 	strb.w	r2, [r3, #1307]	@ 0x51b

	/* Return status if just closed connection */
	if (ymodem->nextStatus != YMODEM_OK) return ymodem->nextStatus;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 352c 	ldrb.w	r3, [r3, #1324]	@ 0x52c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <ymodem_ReceiveByte+0x3c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 352c 	ldrb.w	r3, [r3, #1324]	@ 0x52c
 800a6c2:	e0ef      	b.n	800a8a4 <ymodem_ReceiveByte+0x21c>

	do {	
		/* Receive full packet */
		if (ymodem->startOfPacket) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3521 	ldrb.w	r3, [r3, #1313]	@ 0x521
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 8082 	beq.w	800a7d4 <ymodem_ReceiveByte+0x14c>
			/* Process start of packet */
			switch (c) {
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	2b61      	cmp	r3, #97	@ 0x61
 800a6d4:	d078      	beq.n	800a7c8 <ymodem_ReceiveByte+0x140>
 800a6d6:	2b61      	cmp	r3, #97	@ 0x61
 800a6d8:	dc79      	bgt.n	800a7ce <ymodem_ReceiveByte+0x146>
 800a6da:	2b18      	cmp	r3, #24
 800a6dc:	dc38      	bgt.n	800a750 <ymodem_ReceiveByte+0xc8>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dd75      	ble.n	800a7ce <ymodem_ReceiveByte+0x146>
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b17      	cmp	r3, #23
 800a6e6:	d872      	bhi.n	800a7ce <ymodem_ReceiveByte+0x146>
 800a6e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f0 <ymodem_ReceiveByte+0x68>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a757 	.word	0x0800a757
 800a6f4:	0800a77d 	.word	0x0800a77d
 800a6f8:	0800a7cf 	.word	0x0800a7cf
 800a6fc:	0800a7a5 	.word	0x0800a7a5
 800a700:	0800a7cf 	.word	0x0800a7cf
 800a704:	0800a7cf 	.word	0x0800a7cf
 800a708:	0800a7cf 	.word	0x0800a7cf
 800a70c:	0800a7cf 	.word	0x0800a7cf
 800a710:	0800a7cf 	.word	0x0800a7cf
 800a714:	0800a7cf 	.word	0x0800a7cf
 800a718:	0800a7cf 	.word	0x0800a7cf
 800a71c:	0800a7cf 	.word	0x0800a7cf
 800a720:	0800a7cf 	.word	0x0800a7cf
 800a724:	0800a7cf 	.word	0x0800a7cf
 800a728:	0800a7cf 	.word	0x0800a7cf
 800a72c:	0800a7cf 	.word	0x0800a7cf
 800a730:	0800a7cf 	.word	0x0800a7cf
 800a734:	0800a7cf 	.word	0x0800a7cf
 800a738:	0800a7cf 	.word	0x0800a7cf
 800a73c:	0800a7cf 	.word	0x0800a7cf
 800a740:	0800a7cf 	.word	0x0800a7cf
 800a744:	0800a7cf 	.word	0x0800a7cf
 800a748:	0800a7cf 	.word	0x0800a7cf
 800a74c:	0800a7b3 	.word	0x0800a7b3
 800a750:	2b41      	cmp	r3, #65	@ 0x41
 800a752:	d039      	beq.n	800a7c8 <ymodem_ReceiveByte+0x140>
 800a754:	e03b      	b.n	800a7ce <ymodem_ReceiveByte+0x146>
				case SOH:
					ymodem->packetSize = YM_PACKET_SIZE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2280      	movs	r2, #128	@ 0x80
 800a75a:	f8a3 2526 	strh.w	r2, [r3, #1318]	@ 0x526
					/* start receiving payload */
					ymodem->startOfPacket = 0;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2521 	strb.w	r2, [r3, #1313]	@ 0x521
					ymodem->packetBytes++; //increment by 1 byte
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	@ 0x524
 800a76c:	3301      	adds	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8a3 2524 	strh.w	r2, [r3, #1316]	@ 0x524
					ret = YM_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
					break; 
 800a77a:	e076      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
				case STX:
					ymodem->packetSize = YM_PACKET_1K_SIZE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a782:	f8a3 2526 	strh.w	r2, [r3, #1318]	@ 0x526
					/* start receiving payload */
					ymodem->startOfPacket = 0;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2521 	strb.w	r2, [r3, #1313]	@ 0x521
					ymodem->packetBytes++; //increment by 1 byte
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	@ 0x524
 800a794:	3301      	adds	r3, #1
 800a796:	b29a      	uxth	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8a3 2524 	strh.w	r2, [r3, #1316]	@ 0x524
					ret = YM_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
					break;
 800a7a2:	e062      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
				case EOT: 
				/* One more packet comes after with 0,FF so reset this */
					ymodem->eotReceived = 1;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2522 	strb.w	r2, [r3, #1314]	@ 0x522
					ret = YM_RX_COMPLETE;
 800a7ac:	2308      	movs	r3, #8
 800a7ae:	73fb      	strb	r3, [r7, #15]
					break;
 800a7b0:	e05b      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
				case CA:
					/* Two of these aborts transfer */
					if (ymodem->prevC == CA) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3520 	ldrb.w	r3, [r3, #1312]	@ 0x520
 800a7b8:	2b18      	cmp	r3, #24
 800a7ba:	d102      	bne.n	800a7c2 <ymodem_ReceiveByte+0x13a>
						ret = YM_ABORTED;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	73fb      	strb	r3, [r7, #15]
						break;
 800a7c0:	e053      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
					}
					ret = YM_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]
					break;
 800a7c6:	e050      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
				case ABORT1:
				case ABORT2: 
					ret = YM_ABORT;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	73fb      	strb	r3, [r7, #15]
					break;
 800a7cc:	e04d      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
				default: 
					ret = YM_RX_ERROR;
 800a7ce:	2306      	movs	r3, #6
 800a7d0:	73fb      	strb	r3, [r7, #15]
					break;
 800a7d2:	e04a      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
			}
		} else {
			/* receive rest of packet */
			if (ymodem->packetBytes < (ymodem->packetSize + YM_PACKET_OVERHEAD)-1) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	@ 0x526
 800a7da:	3303      	adds	r3, #3
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	@ 0x524
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	db10      	blt.n	800a808 <ymodem_ReceiveByte+0x180>
				ymodem->packetData[ymodem->packetBytes++] = c;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	@ 0x524
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	b291      	uxth	r1, r2
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	f8a2 1524 	strh.w	r1, [r2, #1316]	@ 0x524
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	78fa      	ldrb	r2, [r7, #3]
 800a7fe:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
				ret = YM_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	73fb      	strb	r3, [r7, #15]
				break;
 800a806:	e030      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
			} else {
				/* Last byte of packet */
				ymodem->packetData[ymodem->packetBytes++] = c;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	@ 0x524
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	b291      	uxth	r1, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	f8a2 1524 	strh.w	r1, [r2, #1316]	@ 0x524
 800a818:	461a      	mov	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4413      	add	r3, r2
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
				if (ymodem->packetData[YM_PACKET_SEQNO_INDEX] != ((ymodem->packetData[YM_PACKET_SEQNO_COMP_INDEX] ^ 0xFF) & 0xFF)) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 800a830:	43db      	mvns	r3, r3
 800a832:	b2db      	uxtb	r3, r3
 800a834:	429a      	cmp	r2, r3
 800a836:	d00a      	beq.n	800a84e <ymodem_ReceiveByte+0x1c6>
					/* Check byte 1 == (byte 2 XOR 0xFF) */
					ymodem->startOfPacket = 1;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2521 	strb.w	r2, [r3, #1313]	@ 0x521
					ymodem->packetBytes = 0;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8a3 2524 	strh.w	r2, [r3, #1316]	@ 0x524
					ret = YM_RX_ERROR;
 800a848:	2306      	movs	r3, #6
 800a84a:	73fb      	strb	r3, [r7, #15]
					break;
 800a84c:	e00d      	b.n	800a86a <ymodem_ReceiveByte+0x1e2>
				} else {
					/* Full packet received */
					ret = ymodem_ProcessPacket(ymodem);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f832 	bl	800a8b8 <ymodem_ProcessPacket>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
					ymodem->startOfPacket = 1;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2521 	strb.w	r2, [r3, #1313]	@ 0x521
					ymodem->packetBytes = 0;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f8a3 2524 	strh.w	r2, [r3, #1316]	@ 0x524
					break;
 800a868:	bf00      	nop
				}
			}
		}
	} while (0); // Empty do while to avoid multiple "return" statements
	ymodem->prevC = c;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	f883 2520 	strb.w	r2, [r3, #1312]	@ 0x520
	GenRet = GenerateResponse(ymodem, ret);
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff fe0a 	bl	800a490 <GenerateResponse>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73bb      	strb	r3, [r7, #14]
	switch (GenRet){
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d002      	beq.n	800a88c <ymodem_ReceiveByte+0x204>
 800a886:	2b02      	cmp	r3, #2
 800a888:	d004      	beq.n	800a894 <ymodem_ReceiveByte+0x20c>
	case YMODEM_ABORTED:
		ymodem_FileCallback(ymodem, YMODEM_FILE_CB_ABORTED, NULL, 0);
		break;
	default:

		break;
 800a88a:	e00a      	b.n	800a8a2 <ymodem_ReceiveByte+0x21a>
		ymodem_WriteSerial(ymodem);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f8ee 	bl	800aa6e <ymodem_WriteSerial>
		break;
 800a892:	e006      	b.n	800a8a2 <ymodem_ReceiveByte+0x21a>
		ymodem_FileCallback(ymodem, YMODEM_FILE_CB_ABORTED, NULL, 0);
 800a894:	2300      	movs	r3, #0
 800a896:	2200      	movs	r2, #0
 800a898:	2103      	movs	r1, #3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7f5 fefc 	bl	8000698 <ymodem_FileCallback>
		break;
 800a8a0:	bf00      	nop
	}

	return GenRet;
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	0800bc44 	.word	0x0800bc44
 800a8b0:	0800bcd8 	.word	0x0800bcd8
 800a8b4:	0800bc54 	.word	0x0800bc54

0800a8b8 <ymodem_ProcessPacket>:

static ym_ret_t ymodem_ProcessPacket(ymodem_t *ymodem) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
	ym_ret_t ret = YM_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
	do {
		if (ymodem->eotReceived == 1) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3522 	ldrb.w	r3, [r3, #1314]	@ 0x522
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d108      	bne.n	800a8e0 <ymodem_ProcessPacket+0x28>
			ymodem_FileCallback(ymodem, YMODEM_FILE_CB_END, NULL, 0);
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2102      	movs	r1, #2
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7f5 fedf 	bl	8000698 <ymodem_FileCallback>
			ret = YM_SUCCESS;
 800a8da:	2309      	movs	r3, #9
 800a8dc:	73fb      	strb	r3, [r7, #15]
			break;
 800a8de:	e026      	b.n	800a92e <ymodem_ProcessPacket+0x76>
		/* Check byte 1 == num of bytes received */
		} else if ((ymodem->packetData[YM_PACKET_SEQNO_INDEX] & 0xFF) != (ymodem->packetsReceived & 0xFF)) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 3528 	ldr.w	r3, [r3, #1320]	@ 0x528
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d002      	beq.n	800a8fa <ymodem_ProcessPacket+0x42>
			/* Send a NAK */
			ret = YM_RX_ERROR;
 800a8f4:	2306      	movs	r3, #6
 800a8f6:	73fb      	strb	r3, [r7, #15]
			break;
 800a8f8:	e019      	b.n	800a92e <ymodem_ProcessPacket+0x76>
		} else if (ymodem_CheckCRC(ymodem) != YM_OK) {
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f976 	bl	800abec <ymodem_CheckCRC>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <ymodem_ProcessPacket+0x54>
			ret = YM_RX_ERROR;
 800a906:	2306      	movs	r3, #6
 800a908:	73fb      	strb	r3, [r7, #15]
			break;
 800a90a:	e010      	b.n	800a92e <ymodem_ProcessPacket+0x76>
		} else {
			if (ymodem->packetsReceived == 0) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3528 	ldr.w	r3, [r3, #1320]	@ 0x528
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <ymodem_ProcessPacket+0x6a>
				ret = ymodem_ProcessFirstPacket(ymodem);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f835 	bl	800a986 <ymodem_ProcessFirstPacket>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
				break;
 800a920:	e005      	b.n	800a92e <ymodem_ProcessPacket+0x76>
			} else {
				ret = ymodem_ProcessDataPacket(ymodem);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f808 	bl	800a938 <ymodem_ProcessDataPacket>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
				break;
 800a92c:	bf00      	nop
			}
		}
	} while(0);
	return ret;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <ymodem_ProcessDataPacket>:
 * @brief  				Writes a data packet to the flash set in ymodem_conf.h
 * 						Optionally validates the writes.
 * 
 * @return YM_RET_T 	YM_WRITE_ERR if write fails, otherwise YM_RX_OK
 */
static ym_ret_t ymodem_ProcessDataPacket(ymodem_t *ymodem) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	ym_ret_t ret;
	ymodem_err_e err;
	uint8_t *buffIn;

	do { 
		buffIn = (uint8_t *)ymodem->packetData + YM_PACKET_HEADER;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a946:	3303      	adds	r3, #3
 800a948:	613b      	str	r3, [r7, #16]
		err = ymodem_FileCallback(ymodem, YMODEM_FILE_CB_DATA, buffIn, ymodem->packetSize);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	@ 0x526
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	2101      	movs	r1, #1
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7f5 fe9f 	bl	8000698 <ymodem_FileCallback>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73fb      	strb	r3, [r7, #15]
		if (err == YMODEM_OK){
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <ymodem_ProcessDataPacket+0x32>
			ret = YM_RX_OK;
 800a964:	2307      	movs	r3, #7
 800a966:	75fb      	strb	r3, [r7, #23]
 800a968:	e001      	b.n	800a96e <ymodem_ProcessDataPacket+0x36>
		}
		else{
			ret = YM_WRITE_ERR;
 800a96a:	2303      	movs	r3, #3
 800a96c:	75fb      	strb	r3, [r7, #23]
		}
		ymodem->packetsReceived++;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 3528 	ldr.w	r3, [r3, #1320]	@ 0x528
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528

	} while(0);
	return ret;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <ymodem_ProcessFirstPacket>:
/**
 * @brief  			Gets data from the first YMODEM packet.
 * 
 * @return YM_RET_T 
 */
static ym_ret_t ymodem_ProcessFirstPacket(ymodem_t *ymodem) {
 800a986:	b580      	push	{r7, lr}
 800a988:	b086      	sub	sp, #24
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
	ymodem_err_e err;
	int32_t i; 
	uint8_t *filePtr; 
	do {
		/* Filename packet */
		if (ymodem->packetData[YM_PACKET_HEADER] != 0) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800a994:	2b00      	cmp	r3, #0
 800a996:	d062      	beq.n	800aa5e <ymodem_ProcessFirstPacket+0xd8>
			/* Packet has valid data */
			/* Get File Name */
			filePtr = ymodem->packetData + YM_PACKET_HEADER;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a99e:	3303      	adds	r3, #3
 800a9a0:	60fb      	str	r3, [r7, #12]
			i = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	613b      	str	r3, [r7, #16]
			while ((i < YM_FILE_NAME_LENGTH) && (*filePtr != '\0')){
 800a9a6:	e008      	b.n	800a9ba <ymodem_ProcessFirstPacket+0x34>
				ymodem->fileName[i++] = *filePtr++;
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	1c53      	adds	r3, r2, #1
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	1c59      	adds	r1, r3, #1
 800a9b2:	6139      	str	r1, [r7, #16]
 800a9b4:	7811      	ldrb	r1, [r2, #0]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	54d1      	strb	r1, [r2, r3]
			while ((i < YM_FILE_NAME_LENGTH) && (*filePtr != '\0')){
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2bff      	cmp	r3, #255	@ 0xff
 800a9be:	dc03      	bgt.n	800a9c8 <ymodem_ProcessFirstPacket+0x42>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1ef      	bne.n	800a9a8 <ymodem_ProcessFirstPacket+0x22>
			}
			ymodem->fileName[i++] = '\0';
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	613a      	str	r2, [r7, #16]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	54d1      	strb	r1, [r2, r3]

			i = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
			filePtr++;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	60fb      	str	r3, [r7, #12]
			while ((i < YM_FILE_SIZE_LENGTH)  && (*filePtr != ' ')){
 800a9de:	e00b      	b.n	800a9f8 <ymodem_ProcessFirstPacket+0x72>
				ymodem->fileSizeStr[i++] = *filePtr++;
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	1c53      	adds	r3, r2, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	1c59      	adds	r1, r3, #1
 800a9ea:	6139      	str	r1, [r7, #16]
 800a9ec:	7811      	ldrb	r1, [r2, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	460a      	mov	r2, r1
 800a9f4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			while ((i < YM_FILE_SIZE_LENGTH)  && (*filePtr != ' ')){
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2b0f      	cmp	r3, #15
 800a9fc:	dc03      	bgt.n	800aa06 <ymodem_ProcessFirstPacket+0x80>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b20      	cmp	r3, #32
 800aa04:	d1ec      	bne.n	800a9e0 <ymodem_ProcessFirstPacket+0x5a>
			}
			ymodem->fileSizeStr[i++] = '\0';
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	613a      	str	r2, [r7, #16]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	4413      	add	r3, r2
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			Str2Int(ymodem->fileSizeStr, &ymodem->fileSize);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f000 f83a 	bl	800aa9e <Str2Int>

			err = ymodem_FileCallback(ymodem, YMODEM_FILE_CB_NAME, ymodem->fileName, ymodem->fileSize);
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 351c 	ldr.w	r3, [r3, #1308]	@ 0x51c
 800aa32:	2100      	movs	r1, #0
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7f5 fe2f 	bl	8000698 <ymodem_FileCallback>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	72fb      	strb	r3, [r7, #11]
			if (err == YMODEM_OK){
 800aa3e:	7afb      	ldrb	r3, [r7, #11]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <ymodem_ProcessFirstPacket+0xc4>
				ret = YM_START_RX;
 800aa44:	2305      	movs	r3, #5
 800aa46:	75fb      	strb	r3, [r7, #23]
 800aa48:	e001      	b.n	800aa4e <ymodem_ProcessFirstPacket+0xc8>
			}
			else{
				ret = YM_SIZE_ERR;
 800aa4a:	2304      	movs	r3, #4
 800aa4c:	75fb      	strb	r3, [r7, #23]
			}
			ymodem->packetsReceived++;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 3528 	ldr.w	r3, [r3, #1320]	@ 0x528
 800aa54:	1c5a      	adds	r2, r3, #1
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
			break;
 800aa5c:	e002      	b.n	800aa64 <ymodem_ProcessFirstPacket+0xde>

		} else {
			/* Filename packet is empty, end session */ 
			ret = YM_ABORT;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	75fb      	strb	r3, [r7, #23]
			break;
 800aa62:	bf00      	nop
		}

	} while (0);
	return ret;
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <ymodem_WriteSerial>:

static void ymodem_WriteSerial(ymodem_t *ymodem){
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
	if (ymodem->serialWriteFxn != NULL){
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3530 	ldr.w	r3, [r3, #1328]	@ 0x530
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <ymodem_WriteSerial+0x28>
		ymodem->serialWriteFxn(ymodem->payloadTx, ymodem->payloadLen);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3530 	ldr.w	r3, [r3, #1328]	@ 0x530
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	f202 5015 	addw	r0, r2, #1301	@ 0x515
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	f892 251a 	ldrb.w	r2, [r2, #1306]	@ 0x51a
 800aa92:	4611      	mov	r1, r2
 800aa94:	4798      	blx	r3
	}
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <Str2Int>:

static uint32_t Str2Int(uint8_t *inputstr, uint32_t *intnum) {
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, res = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	617b      	str	r3, [r7, #20]
 800aaac:	2300      	movs	r3, #0
 800aaae:	613b      	str	r3, [r7, #16]
	uint32_t val = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

	/* max 10-digit decimal input */
	for (i = 0; i < 11; i++) {
 800aab4:	2300      	movs	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e02b      	b.n	800ab12 <Str2Int+0x74>
		if (inputstr[i] == '\0') {
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	4413      	add	r3, r2
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d105      	bne.n	800aad2 <Str2Int+0x34>
			*intnum = val;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	601a      	str	r2, [r3, #0]
			/* return 1 */
			res = 1;
 800aacc:	2301      	movs	r3, #1
 800aace:	613b      	str	r3, [r7, #16]
			break;
 800aad0:	e022      	b.n	800ab18 <Str2Int+0x7a>
		} else if (ISVALIDDEC(inputstr[i])) {
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	4413      	add	r3, r2
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b2f      	cmp	r3, #47	@ 0x2f
 800aadc:	d916      	bls.n	800ab0c <Str2Int+0x6e>
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	4413      	add	r3, r2
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b39      	cmp	r3, #57	@ 0x39
 800aae8:	d810      	bhi.n	800ab0c <Str2Int+0x6e>
			val = val * 10 + CONVERTDEC(inputstr[i]);
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4413      	add	r3, r2
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	440b      	add	r3, r1
 800ab00:	3b30      	subs	r3, #48	@ 0x30
 800ab02:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 11; i++) {
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	3301      	adds	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	e002      	b.n	800ab12 <Str2Int+0x74>
		} else {
			/* return 0, Invalid input */
			res = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	613b      	str	r3, [r7, #16]
			break;
 800ab10:	e002      	b.n	800ab18 <Str2Int+0x7a>
	for (i = 0; i < 11; i++) {
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b0a      	cmp	r3, #10
 800ab16:	d9d0      	bls.n	800aaba <Str2Int+0x1c>
		}
	}
	/* Over 10 digit decimal --invalid */
	if (i >= 11) {
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2b0a      	cmp	r3, #10
 800ab1c:	d901      	bls.n	800ab22 <Str2Int+0x84>
		res = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	613b      	str	r3, [r7, #16]
	}
	return res;
 800ab22:	693b      	ldr	r3, [r7, #16]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <crc_update>:

static uint16_t crc_update(uint16_t crc_in, int incr)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	80fb      	strh	r3, [r7, #6]
        uint16_t xor = crc_in >> 15;
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	0bdb      	lsrs	r3, r3, #15
 800ab40:	81bb      	strh	r3, [r7, #12]
        uint16_t out = crc_in << 1;
 800ab42:	88fb      	ldrh	r3, [r7, #6]
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	81fb      	strh	r3, [r7, #14]

        if (incr)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <crc_update+0x24>
                out++;
 800ab4e:	89fb      	ldrh	r3, [r7, #14]
 800ab50:	3301      	adds	r3, #1
 800ab52:	81fb      	strh	r3, [r7, #14]

        if (xor)
 800ab54:	89bb      	ldrh	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <crc_update+0x36>
                out ^= YM_CRC_POLY;
 800ab5a:	89fb      	ldrh	r3, [r7, #14]
 800ab5c:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800ab60:	f083 0301 	eor.w	r3, r3, #1
 800ab64:	81fb      	strh	r3, [r7, #14]

        return out;
 800ab66:	89fb      	ldrh	r3, [r7, #14]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <crc16>:


static uint16_t crc16(const uint8_t *data, uint16_t size)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	807b      	strh	r3, [r7, #2]
        uint16_t crc, i;

        for (crc = 0; size > 0; size--, data++)
 800ab80:	2300      	movs	r3, #0
 800ab82:	81fb      	strh	r3, [r7, #14]
 800ab84:	e01a      	b.n	800abbc <crc16+0x48>
                for (i = 0x80; i; i >>= 1)
 800ab86:	2380      	movs	r3, #128	@ 0x80
 800ab88:	81bb      	strh	r3, [r7, #12]
 800ab8a:	e00e      	b.n	800abaa <crc16+0x36>
                        crc = crc_update(crc, *data & i);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	89bb      	ldrh	r3, [r7, #12]
 800ab94:	401a      	ands	r2, r3
 800ab96:	89fb      	ldrh	r3, [r7, #14]
 800ab98:	4611      	mov	r1, r2
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff ffc8 	bl	800ab30 <crc_update>
 800aba0:	4603      	mov	r3, r0
 800aba2:	81fb      	strh	r3, [r7, #14]
                for (i = 0x80; i; i >>= 1)
 800aba4:	89bb      	ldrh	r3, [r7, #12]
 800aba6:	085b      	lsrs	r3, r3, #1
 800aba8:	81bb      	strh	r3, [r7, #12]
 800abaa:	89bb      	ldrh	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1ed      	bne.n	800ab8c <crc16+0x18>
        for (crc = 0; size > 0; size--, data++)
 800abb0:	887b      	ldrh	r3, [r7, #2]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	807b      	strh	r3, [r7, #2]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3301      	adds	r3, #1
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	887b      	ldrh	r3, [r7, #2]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e1      	bne.n	800ab86 <crc16+0x12>

        for (i = 0; i < 16; i++)
 800abc2:	2300      	movs	r3, #0
 800abc4:	81bb      	strh	r3, [r7, #12]
 800abc6:	e009      	b.n	800abdc <crc16+0x68>
                crc = crc_update(crc, 0);
 800abc8:	89fb      	ldrh	r3, [r7, #14]
 800abca:	2100      	movs	r1, #0
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff ffaf 	bl	800ab30 <crc_update>
 800abd2:	4603      	mov	r3, r0
 800abd4:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 16; i++)
 800abd6:	89bb      	ldrh	r3, [r7, #12]
 800abd8:	3301      	adds	r3, #1
 800abda:	81bb      	strh	r3, [r7, #12]
 800abdc:	89bb      	ldrh	r3, [r7, #12]
 800abde:	2b0f      	cmp	r3, #15
 800abe0:	d9f2      	bls.n	800abc8 <crc16+0x54>

        return crc;
 800abe2:	89fb      	ldrh	r3, [r7, #14]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <ymodem_CheckCRC>:

static ym_ret_t ymodem_CheckCRC(ymodem_t *ymodem) {
 800abec:	b590      	push	{r4, r7, lr}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	uint16_t sourceCRC = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	81fb      	strh	r3, [r7, #14]
	sourceCRC = ymodem->packetData[(ymodem->packetSize+YM_PACKET_OVERHEAD) - 1];
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	@ 0x526
 800abfe:	3304      	adds	r3, #4
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800ac08:	81fb      	strh	r3, [r7, #14]
	sourceCRC = (sourceCRC << 8) | ymodem->packetData[(ymodem->packetSize+YM_PACKET_OVERHEAD) - 2];
 800ac0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ac0e:	021b      	lsls	r3, r3, #8
 800ac10:	b21a      	sxth	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	@ 0x526
 800ac18:	3303      	adds	r3, #3
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	440b      	add	r3, r1
 800ac1e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800ac22:	b21b      	sxth	r3, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	b21b      	sxth	r3, r3
 800ac28:	81fb      	strh	r3, [r7, #14]

	uint16_t newCRC = SWAP16(crc16(ymodem->packetData+YM_PACKET_HEADER, ymodem->packetSize));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ac30:	1cda      	adds	r2, r3, #3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	@ 0x526
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7ff ff9a 	bl	800ab74 <crc16>
 800ac40:	4603      	mov	r3, r0
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	b21c      	sxth	r4, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ac4e:	1cda      	adds	r2, r3, #3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	@ 0x526
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7ff ff8b 	bl	800ab74 <crc16>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	b21b      	sxth	r3, r3
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	b21b      	sxth	r3, r3
 800ac66:	4323      	orrs	r3, r4
 800ac68:	b21b      	sxth	r3, r3
 800ac6a:	81bb      	strh	r3, [r7, #12]
	if (newCRC != sourceCRC) {
 800ac6c:	89ba      	ldrh	r2, [r7, #12]
 800ac6e:	89fb      	ldrh	r3, [r7, #14]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d001      	beq.n	800ac78 <ymodem_CheckCRC+0x8c>
		return YM_RX_ERROR;
 800ac74:	2306      	movs	r3, #6
 800ac76:	e000      	b.n	800ac7a <ymodem_CheckCRC+0x8e>
	} else {
		return YM_OK;
 800ac78:	2300      	movs	r3, #0
	}
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd90      	pop	{r4, r7, pc}
	...

0800ac84 <__assert_func>:
 800ac84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac86:	4614      	mov	r4, r2
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <__assert_func+0x2c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4605      	mov	r5, r0
 800ac90:	68d8      	ldr	r0, [r3, #12]
 800ac92:	b14c      	cbz	r4, 800aca8 <__assert_func+0x24>
 800ac94:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <__assert_func+0x30>)
 800ac96:	9100      	str	r1, [sp, #0]
 800ac98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac9c:	4906      	ldr	r1, [pc, #24]	@ (800acb8 <__assert_func+0x34>)
 800ac9e:	462b      	mov	r3, r5
 800aca0:	f000 f8b2 	bl	800ae08 <fiprintf>
 800aca4:	f000 f9b1 	bl	800b00a <abort>
 800aca8:	4b04      	ldr	r3, [pc, #16]	@ (800acbc <__assert_func+0x38>)
 800acaa:	461c      	mov	r4, r3
 800acac:	e7f3      	b.n	800ac96 <__assert_func+0x12>
 800acae:	bf00      	nop
 800acb0:	20000190 	.word	0x20000190
 800acb4:	0800bceb 	.word	0x0800bceb
 800acb8:	0800bcf8 	.word	0x0800bcf8
 800acbc:	0800bd26 	.word	0x0800bd26

0800acc0 <std>:
 800acc0:	2300      	movs	r3, #0
 800acc2:	b510      	push	{r4, lr}
 800acc4:	4604      	mov	r4, r0
 800acc6:	e9c0 3300 	strd	r3, r3, [r0]
 800acca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acce:	6083      	str	r3, [r0, #8]
 800acd0:	8181      	strh	r1, [r0, #12]
 800acd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800acd4:	81c2      	strh	r2, [r0, #14]
 800acd6:	6183      	str	r3, [r0, #24]
 800acd8:	4619      	mov	r1, r3
 800acda:	2208      	movs	r2, #8
 800acdc:	305c      	adds	r0, #92	@ 0x5c
 800acde:	f000 f918 	bl	800af12 <memset>
 800ace2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad18 <std+0x58>)
 800ace4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ace6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad1c <std+0x5c>)
 800ace8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acea:	4b0d      	ldr	r3, [pc, #52]	@ (800ad20 <std+0x60>)
 800acec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acee:	4b0d      	ldr	r3, [pc, #52]	@ (800ad24 <std+0x64>)
 800acf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800acf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad28 <std+0x68>)
 800acf4:	6224      	str	r4, [r4, #32]
 800acf6:	429c      	cmp	r4, r3
 800acf8:	d006      	beq.n	800ad08 <std+0x48>
 800acfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acfe:	4294      	cmp	r4, r2
 800ad00:	d002      	beq.n	800ad08 <std+0x48>
 800ad02:	33d0      	adds	r3, #208	@ 0xd0
 800ad04:	429c      	cmp	r4, r3
 800ad06:	d105      	bne.n	800ad14 <std+0x54>
 800ad08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad10:	f000 b978 	b.w	800b004 <__retarget_lock_init_recursive>
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	bf00      	nop
 800ad18:	0800ae8d 	.word	0x0800ae8d
 800ad1c:	0800aeaf 	.word	0x0800aeaf
 800ad20:	0800aee7 	.word	0x0800aee7
 800ad24:	0800af0b 	.word	0x0800af0b
 800ad28:	20001b8c 	.word	0x20001b8c

0800ad2c <stdio_exit_handler>:
 800ad2c:	4a02      	ldr	r2, [pc, #8]	@ (800ad38 <stdio_exit_handler+0xc>)
 800ad2e:	4903      	ldr	r1, [pc, #12]	@ (800ad3c <stdio_exit_handler+0x10>)
 800ad30:	4803      	ldr	r0, [pc, #12]	@ (800ad40 <stdio_exit_handler+0x14>)
 800ad32:	f000 b87b 	b.w	800ae2c <_fwalk_sglue>
 800ad36:	bf00      	nop
 800ad38:	20000184 	.word	0x20000184
 800ad3c:	0800b8ad 	.word	0x0800b8ad
 800ad40:	20000194 	.word	0x20000194

0800ad44 <cleanup_stdio>:
 800ad44:	6841      	ldr	r1, [r0, #4]
 800ad46:	4b0c      	ldr	r3, [pc, #48]	@ (800ad78 <cleanup_stdio+0x34>)
 800ad48:	4299      	cmp	r1, r3
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	d001      	beq.n	800ad54 <cleanup_stdio+0x10>
 800ad50:	f000 fdac 	bl	800b8ac <_fflush_r>
 800ad54:	68a1      	ldr	r1, [r4, #8]
 800ad56:	4b09      	ldr	r3, [pc, #36]	@ (800ad7c <cleanup_stdio+0x38>)
 800ad58:	4299      	cmp	r1, r3
 800ad5a:	d002      	beq.n	800ad62 <cleanup_stdio+0x1e>
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 fda5 	bl	800b8ac <_fflush_r>
 800ad62:	68e1      	ldr	r1, [r4, #12]
 800ad64:	4b06      	ldr	r3, [pc, #24]	@ (800ad80 <cleanup_stdio+0x3c>)
 800ad66:	4299      	cmp	r1, r3
 800ad68:	d004      	beq.n	800ad74 <cleanup_stdio+0x30>
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad70:	f000 bd9c 	b.w	800b8ac <_fflush_r>
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	bf00      	nop
 800ad78:	20001b8c 	.word	0x20001b8c
 800ad7c:	20001bf4 	.word	0x20001bf4
 800ad80:	20001c5c 	.word	0x20001c5c

0800ad84 <global_stdio_init.part.0>:
 800ad84:	b510      	push	{r4, lr}
 800ad86:	4b0b      	ldr	r3, [pc, #44]	@ (800adb4 <global_stdio_init.part.0+0x30>)
 800ad88:	4c0b      	ldr	r4, [pc, #44]	@ (800adb8 <global_stdio_init.part.0+0x34>)
 800ad8a:	4a0c      	ldr	r2, [pc, #48]	@ (800adbc <global_stdio_init.part.0+0x38>)
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	2200      	movs	r2, #0
 800ad92:	2104      	movs	r1, #4
 800ad94:	f7ff ff94 	bl	800acc0 <std>
 800ad98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	2109      	movs	r1, #9
 800ada0:	f7ff ff8e 	bl	800acc0 <std>
 800ada4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ada8:	2202      	movs	r2, #2
 800adaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adae:	2112      	movs	r1, #18
 800adb0:	f7ff bf86 	b.w	800acc0 <std>
 800adb4:	20001cc4 	.word	0x20001cc4
 800adb8:	20001b8c 	.word	0x20001b8c
 800adbc:	0800ad2d 	.word	0x0800ad2d

0800adc0 <__sfp_lock_acquire>:
 800adc0:	4801      	ldr	r0, [pc, #4]	@ (800adc8 <__sfp_lock_acquire+0x8>)
 800adc2:	f000 b920 	b.w	800b006 <__retarget_lock_acquire_recursive>
 800adc6:	bf00      	nop
 800adc8:	20001ccd 	.word	0x20001ccd

0800adcc <__sfp_lock_release>:
 800adcc:	4801      	ldr	r0, [pc, #4]	@ (800add4 <__sfp_lock_release+0x8>)
 800adce:	f000 b91b 	b.w	800b008 <__retarget_lock_release_recursive>
 800add2:	bf00      	nop
 800add4:	20001ccd 	.word	0x20001ccd

0800add8 <__sinit>:
 800add8:	b510      	push	{r4, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	f7ff fff0 	bl	800adc0 <__sfp_lock_acquire>
 800ade0:	6a23      	ldr	r3, [r4, #32]
 800ade2:	b11b      	cbz	r3, 800adec <__sinit+0x14>
 800ade4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ade8:	f7ff bff0 	b.w	800adcc <__sfp_lock_release>
 800adec:	4b04      	ldr	r3, [pc, #16]	@ (800ae00 <__sinit+0x28>)
 800adee:	6223      	str	r3, [r4, #32]
 800adf0:	4b04      	ldr	r3, [pc, #16]	@ (800ae04 <__sinit+0x2c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1f5      	bne.n	800ade4 <__sinit+0xc>
 800adf8:	f7ff ffc4 	bl	800ad84 <global_stdio_init.part.0>
 800adfc:	e7f2      	b.n	800ade4 <__sinit+0xc>
 800adfe:	bf00      	nop
 800ae00:	0800ad45 	.word	0x0800ad45
 800ae04:	20001cc4 	.word	0x20001cc4

0800ae08 <fiprintf>:
 800ae08:	b40e      	push	{r1, r2, r3}
 800ae0a:	b503      	push	{r0, r1, lr}
 800ae0c:	4601      	mov	r1, r0
 800ae0e:	ab03      	add	r3, sp, #12
 800ae10:	4805      	ldr	r0, [pc, #20]	@ (800ae28 <fiprintf+0x20>)
 800ae12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae16:	6800      	ldr	r0, [r0, #0]
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	f000 fa1f 	bl	800b25c <_vfiprintf_r>
 800ae1e:	b002      	add	sp, #8
 800ae20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae24:	b003      	add	sp, #12
 800ae26:	4770      	bx	lr
 800ae28:	20000190 	.word	0x20000190

0800ae2c <_fwalk_sglue>:
 800ae2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae30:	4607      	mov	r7, r0
 800ae32:	4688      	mov	r8, r1
 800ae34:	4614      	mov	r4, r2
 800ae36:	2600      	movs	r6, #0
 800ae38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ae40:	d505      	bpl.n	800ae4e <_fwalk_sglue+0x22>
 800ae42:	6824      	ldr	r4, [r4, #0]
 800ae44:	2c00      	cmp	r4, #0
 800ae46:	d1f7      	bne.n	800ae38 <_fwalk_sglue+0xc>
 800ae48:	4630      	mov	r0, r6
 800ae4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4e:	89ab      	ldrh	r3, [r5, #12]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d907      	bls.n	800ae64 <_fwalk_sglue+0x38>
 800ae54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	d003      	beq.n	800ae64 <_fwalk_sglue+0x38>
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4638      	mov	r0, r7
 800ae60:	47c0      	blx	r8
 800ae62:	4306      	orrs	r6, r0
 800ae64:	3568      	adds	r5, #104	@ 0x68
 800ae66:	e7e9      	b.n	800ae3c <_fwalk_sglue+0x10>

0800ae68 <iprintf>:
 800ae68:	b40f      	push	{r0, r1, r2, r3}
 800ae6a:	b507      	push	{r0, r1, r2, lr}
 800ae6c:	4906      	ldr	r1, [pc, #24]	@ (800ae88 <iprintf+0x20>)
 800ae6e:	ab04      	add	r3, sp, #16
 800ae70:	6808      	ldr	r0, [r1, #0]
 800ae72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae76:	6881      	ldr	r1, [r0, #8]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	f000 f9ef 	bl	800b25c <_vfiprintf_r>
 800ae7e:	b003      	add	sp, #12
 800ae80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae84:	b004      	add	sp, #16
 800ae86:	4770      	bx	lr
 800ae88:	20000190 	.word	0x20000190

0800ae8c <__sread>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	460c      	mov	r4, r1
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	f000 f868 	bl	800af68 <_read_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	bfab      	itete	ge
 800ae9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aea0:	181b      	addge	r3, r3, r0
 800aea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aea6:	bfac      	ite	ge
 800aea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeaa:	81a3      	strhlt	r3, [r4, #12]
 800aeac:	bd10      	pop	{r4, pc}

0800aeae <__swrite>:
 800aeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb2:	461f      	mov	r7, r3
 800aeb4:	898b      	ldrh	r3, [r1, #12]
 800aeb6:	05db      	lsls	r3, r3, #23
 800aeb8:	4605      	mov	r5, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	4616      	mov	r6, r2
 800aebe:	d505      	bpl.n	800aecc <__swrite+0x1e>
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	2302      	movs	r3, #2
 800aec6:	2200      	movs	r2, #0
 800aec8:	f000 f83c 	bl	800af44 <_lseek_r>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	4632      	mov	r2, r6
 800aeda:	463b      	mov	r3, r7
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	f000 b853 	b.w	800af8c <_write_r>

0800aee6 <__sseek>:
 800aee6:	b510      	push	{r4, lr}
 800aee8:	460c      	mov	r4, r1
 800aeea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeee:	f000 f829 	bl	800af44 <_lseek_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	bf15      	itete	ne
 800aef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aefa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aefe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af02:	81a3      	strheq	r3, [r4, #12]
 800af04:	bf18      	it	ne
 800af06:	81a3      	strhne	r3, [r4, #12]
 800af08:	bd10      	pop	{r4, pc}

0800af0a <__sclose>:
 800af0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0e:	f000 b809 	b.w	800af24 <_close_r>

0800af12 <memset>:
 800af12:	4402      	add	r2, r0
 800af14:	4603      	mov	r3, r0
 800af16:	4293      	cmp	r3, r2
 800af18:	d100      	bne.n	800af1c <memset+0xa>
 800af1a:	4770      	bx	lr
 800af1c:	f803 1b01 	strb.w	r1, [r3], #1
 800af20:	e7f9      	b.n	800af16 <memset+0x4>
	...

0800af24 <_close_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d06      	ldr	r5, [pc, #24]	@ (800af40 <_close_r+0x1c>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f6 f84a 	bl	8000fc8 <_close>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_close_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_close_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20001cc8 	.word	0x20001cc8

0800af44 <_lseek_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	@ (800af64 <_lseek_r+0x20>)
 800af48:	4604      	mov	r4, r0
 800af4a:	4608      	mov	r0, r1
 800af4c:	4611      	mov	r1, r2
 800af4e:	2200      	movs	r2, #0
 800af50:	602a      	str	r2, [r5, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	f7f6 f85f 	bl	8001016 <_lseek>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_lseek_r+0x1e>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_lseek_r+0x1e>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20001cc8 	.word	0x20001cc8

0800af68 <_read_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	@ (800af88 <_read_r+0x20>)
 800af6c:	4604      	mov	r4, r0
 800af6e:	4608      	mov	r0, r1
 800af70:	4611      	mov	r1, r2
 800af72:	2200      	movs	r2, #0
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f5 ffed 	bl	8000f56 <_read>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_read_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_read_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20001cc8 	.word	0x20001cc8

0800af8c <_write_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	@ (800afac <_write_r+0x20>)
 800af90:	4604      	mov	r4, r0
 800af92:	4608      	mov	r0, r1
 800af94:	4611      	mov	r1, r2
 800af96:	2200      	movs	r2, #0
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	f7f5 fff8 	bl	8000f90 <_write>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_write_r+0x1e>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_write_r+0x1e>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20001cc8 	.word	0x20001cc8

0800afb0 <__errno>:
 800afb0:	4b01      	ldr	r3, [pc, #4]	@ (800afb8 <__errno+0x8>)
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20000190 	.word	0x20000190

0800afbc <__libc_init_array>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4d0d      	ldr	r5, [pc, #52]	@ (800aff4 <__libc_init_array+0x38>)
 800afc0:	4c0d      	ldr	r4, [pc, #52]	@ (800aff8 <__libc_init_array+0x3c>)
 800afc2:	1b64      	subs	r4, r4, r5
 800afc4:	10a4      	asrs	r4, r4, #2
 800afc6:	2600      	movs	r6, #0
 800afc8:	42a6      	cmp	r6, r4
 800afca:	d109      	bne.n	800afe0 <__libc_init_array+0x24>
 800afcc:	4d0b      	ldr	r5, [pc, #44]	@ (800affc <__libc_init_array+0x40>)
 800afce:	4c0c      	ldr	r4, [pc, #48]	@ (800b000 <__libc_init_array+0x44>)
 800afd0:	f000 fe00 	bl	800bbd4 <_init>
 800afd4:	1b64      	subs	r4, r4, r5
 800afd6:	10a4      	asrs	r4, r4, #2
 800afd8:	2600      	movs	r6, #0
 800afda:	42a6      	cmp	r6, r4
 800afdc:	d105      	bne.n	800afea <__libc_init_array+0x2e>
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe4:	4798      	blx	r3
 800afe6:	3601      	adds	r6, #1
 800afe8:	e7ee      	b.n	800afc8 <__libc_init_array+0xc>
 800afea:	f855 3b04 	ldr.w	r3, [r5], #4
 800afee:	4798      	blx	r3
 800aff0:	3601      	adds	r6, #1
 800aff2:	e7f2      	b.n	800afda <__libc_init_array+0x1e>
 800aff4:	0800bd64 	.word	0x0800bd64
 800aff8:	0800bd64 	.word	0x0800bd64
 800affc:	0800bd64 	.word	0x0800bd64
 800b000:	0800bd68 	.word	0x0800bd68

0800b004 <__retarget_lock_init_recursive>:
 800b004:	4770      	bx	lr

0800b006 <__retarget_lock_acquire_recursive>:
 800b006:	4770      	bx	lr

0800b008 <__retarget_lock_release_recursive>:
 800b008:	4770      	bx	lr

0800b00a <abort>:
 800b00a:	b508      	push	{r3, lr}
 800b00c:	2006      	movs	r0, #6
 800b00e:	f000 fd31 	bl	800ba74 <raise>
 800b012:	2001      	movs	r0, #1
 800b014:	f7f5 ff94 	bl	8000f40 <_exit>

0800b018 <_free_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4605      	mov	r5, r0
 800b01c:	2900      	cmp	r1, #0
 800b01e:	d041      	beq.n	800b0a4 <_free_r+0x8c>
 800b020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b024:	1f0c      	subs	r4, r1, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfb8      	it	lt
 800b02a:	18e4      	addlt	r4, r4, r3
 800b02c:	f000 f8e0 	bl	800b1f0 <__malloc_lock>
 800b030:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a8 <_free_r+0x90>)
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	b933      	cbnz	r3, 800b044 <_free_r+0x2c>
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	6014      	str	r4, [r2, #0]
 800b03a:	4628      	mov	r0, r5
 800b03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b040:	f000 b8dc 	b.w	800b1fc <__malloc_unlock>
 800b044:	42a3      	cmp	r3, r4
 800b046:	d908      	bls.n	800b05a <_free_r+0x42>
 800b048:	6820      	ldr	r0, [r4, #0]
 800b04a:	1821      	adds	r1, r4, r0
 800b04c:	428b      	cmp	r3, r1
 800b04e:	bf01      	itttt	eq
 800b050:	6819      	ldreq	r1, [r3, #0]
 800b052:	685b      	ldreq	r3, [r3, #4]
 800b054:	1809      	addeq	r1, r1, r0
 800b056:	6021      	streq	r1, [r4, #0]
 800b058:	e7ed      	b.n	800b036 <_free_r+0x1e>
 800b05a:	461a      	mov	r2, r3
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	b10b      	cbz	r3, 800b064 <_free_r+0x4c>
 800b060:	42a3      	cmp	r3, r4
 800b062:	d9fa      	bls.n	800b05a <_free_r+0x42>
 800b064:	6811      	ldr	r1, [r2, #0]
 800b066:	1850      	adds	r0, r2, r1
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d10b      	bne.n	800b084 <_free_r+0x6c>
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	4401      	add	r1, r0
 800b070:	1850      	adds	r0, r2, r1
 800b072:	4283      	cmp	r3, r0
 800b074:	6011      	str	r1, [r2, #0]
 800b076:	d1e0      	bne.n	800b03a <_free_r+0x22>
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	6053      	str	r3, [r2, #4]
 800b07e:	4408      	add	r0, r1
 800b080:	6010      	str	r0, [r2, #0]
 800b082:	e7da      	b.n	800b03a <_free_r+0x22>
 800b084:	d902      	bls.n	800b08c <_free_r+0x74>
 800b086:	230c      	movs	r3, #12
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	e7d6      	b.n	800b03a <_free_r+0x22>
 800b08c:	6820      	ldr	r0, [r4, #0]
 800b08e:	1821      	adds	r1, r4, r0
 800b090:	428b      	cmp	r3, r1
 800b092:	bf04      	itt	eq
 800b094:	6819      	ldreq	r1, [r3, #0]
 800b096:	685b      	ldreq	r3, [r3, #4]
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	bf04      	itt	eq
 800b09c:	1809      	addeq	r1, r1, r0
 800b09e:	6021      	streq	r1, [r4, #0]
 800b0a0:	6054      	str	r4, [r2, #4]
 800b0a2:	e7ca      	b.n	800b03a <_free_r+0x22>
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20001cd4 	.word	0x20001cd4

0800b0ac <sbrk_aligned>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b0ec <sbrk_aligned+0x40>)
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	6831      	ldr	r1, [r6, #0]
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	b911      	cbnz	r1, 800b0be <sbrk_aligned+0x12>
 800b0b8:	f000 fcf8 	bl	800baac <_sbrk_r>
 800b0bc:	6030      	str	r0, [r6, #0]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 fcf3 	bl	800baac <_sbrk_r>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d103      	bne.n	800b0d2 <sbrk_aligned+0x26>
 800b0ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	1cc4      	adds	r4, r0, #3
 800b0d4:	f024 0403 	bic.w	r4, r4, #3
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	d0f8      	beq.n	800b0ce <sbrk_aligned+0x22>
 800b0dc:	1a21      	subs	r1, r4, r0
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f000 fce4 	bl	800baac <_sbrk_r>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d1f2      	bne.n	800b0ce <sbrk_aligned+0x22>
 800b0e8:	e7ef      	b.n	800b0ca <sbrk_aligned+0x1e>
 800b0ea:	bf00      	nop
 800b0ec:	20001cd0 	.word	0x20001cd0

0800b0f0 <_malloc_r>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	1ccd      	adds	r5, r1, #3
 800b0f6:	f025 0503 	bic.w	r5, r5, #3
 800b0fa:	3508      	adds	r5, #8
 800b0fc:	2d0c      	cmp	r5, #12
 800b0fe:	bf38      	it	cc
 800b100:	250c      	movcc	r5, #12
 800b102:	2d00      	cmp	r5, #0
 800b104:	4606      	mov	r6, r0
 800b106:	db01      	blt.n	800b10c <_malloc_r+0x1c>
 800b108:	42a9      	cmp	r1, r5
 800b10a:	d904      	bls.n	800b116 <_malloc_r+0x26>
 800b10c:	230c      	movs	r3, #12
 800b10e:	6033      	str	r3, [r6, #0]
 800b110:	2000      	movs	r0, #0
 800b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1ec <_malloc_r+0xfc>
 800b11a:	f000 f869 	bl	800b1f0 <__malloc_lock>
 800b11e:	f8d8 3000 	ldr.w	r3, [r8]
 800b122:	461c      	mov	r4, r3
 800b124:	bb44      	cbnz	r4, 800b178 <_malloc_r+0x88>
 800b126:	4629      	mov	r1, r5
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff ffbf 	bl	800b0ac <sbrk_aligned>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	4604      	mov	r4, r0
 800b132:	d158      	bne.n	800b1e6 <_malloc_r+0xf6>
 800b134:	f8d8 4000 	ldr.w	r4, [r8]
 800b138:	4627      	mov	r7, r4
 800b13a:	2f00      	cmp	r7, #0
 800b13c:	d143      	bne.n	800b1c6 <_malloc_r+0xd6>
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d04b      	beq.n	800b1da <_malloc_r+0xea>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	4639      	mov	r1, r7
 800b146:	4630      	mov	r0, r6
 800b148:	eb04 0903 	add.w	r9, r4, r3
 800b14c:	f000 fcae 	bl	800baac <_sbrk_r>
 800b150:	4581      	cmp	r9, r0
 800b152:	d142      	bne.n	800b1da <_malloc_r+0xea>
 800b154:	6821      	ldr	r1, [r4, #0]
 800b156:	1a6d      	subs	r5, r5, r1
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffa6 	bl	800b0ac <sbrk_aligned>
 800b160:	3001      	adds	r0, #1
 800b162:	d03a      	beq.n	800b1da <_malloc_r+0xea>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	442b      	add	r3, r5
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	f8d8 3000 	ldr.w	r3, [r8]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	bb62      	cbnz	r2, 800b1cc <_malloc_r+0xdc>
 800b172:	f8c8 7000 	str.w	r7, [r8]
 800b176:	e00f      	b.n	800b198 <_malloc_r+0xa8>
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	1b52      	subs	r2, r2, r5
 800b17c:	d420      	bmi.n	800b1c0 <_malloc_r+0xd0>
 800b17e:	2a0b      	cmp	r2, #11
 800b180:	d917      	bls.n	800b1b2 <_malloc_r+0xc2>
 800b182:	1961      	adds	r1, r4, r5
 800b184:	42a3      	cmp	r3, r4
 800b186:	6025      	str	r5, [r4, #0]
 800b188:	bf18      	it	ne
 800b18a:	6059      	strne	r1, [r3, #4]
 800b18c:	6863      	ldr	r3, [r4, #4]
 800b18e:	bf08      	it	eq
 800b190:	f8c8 1000 	streq.w	r1, [r8]
 800b194:	5162      	str	r2, [r4, r5]
 800b196:	604b      	str	r3, [r1, #4]
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 f82f 	bl	800b1fc <__malloc_unlock>
 800b19e:	f104 000b 	add.w	r0, r4, #11
 800b1a2:	1d23      	adds	r3, r4, #4
 800b1a4:	f020 0007 	bic.w	r0, r0, #7
 800b1a8:	1ac2      	subs	r2, r0, r3
 800b1aa:	bf1c      	itt	ne
 800b1ac:	1a1b      	subne	r3, r3, r0
 800b1ae:	50a3      	strne	r3, [r4, r2]
 800b1b0:	e7af      	b.n	800b112 <_malloc_r+0x22>
 800b1b2:	6862      	ldr	r2, [r4, #4]
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	bf0c      	ite	eq
 800b1b8:	f8c8 2000 	streq.w	r2, [r8]
 800b1bc:	605a      	strne	r2, [r3, #4]
 800b1be:	e7eb      	b.n	800b198 <_malloc_r+0xa8>
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	6864      	ldr	r4, [r4, #4]
 800b1c4:	e7ae      	b.n	800b124 <_malloc_r+0x34>
 800b1c6:	463c      	mov	r4, r7
 800b1c8:	687f      	ldr	r7, [r7, #4]
 800b1ca:	e7b6      	b.n	800b13a <_malloc_r+0x4a>
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d1fb      	bne.n	800b1cc <_malloc_r+0xdc>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6053      	str	r3, [r2, #4]
 800b1d8:	e7de      	b.n	800b198 <_malloc_r+0xa8>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 f80c 	bl	800b1fc <__malloc_unlock>
 800b1e4:	e794      	b.n	800b110 <_malloc_r+0x20>
 800b1e6:	6005      	str	r5, [r0, #0]
 800b1e8:	e7d6      	b.n	800b198 <_malloc_r+0xa8>
 800b1ea:	bf00      	nop
 800b1ec:	20001cd4 	.word	0x20001cd4

0800b1f0 <__malloc_lock>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	@ (800b1f8 <__malloc_lock+0x8>)
 800b1f2:	f7ff bf08 	b.w	800b006 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20001ccc 	.word	0x20001ccc

0800b1fc <__malloc_unlock>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <__malloc_unlock+0x8>)
 800b1fe:	f7ff bf03 	b.w	800b008 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	20001ccc 	.word	0x20001ccc

0800b208 <__sfputc_r>:
 800b208:	6893      	ldr	r3, [r2, #8]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	b410      	push	{r4}
 800b210:	6093      	str	r3, [r2, #8]
 800b212:	da08      	bge.n	800b226 <__sfputc_r+0x1e>
 800b214:	6994      	ldr	r4, [r2, #24]
 800b216:	42a3      	cmp	r3, r4
 800b218:	db01      	blt.n	800b21e <__sfputc_r+0x16>
 800b21a:	290a      	cmp	r1, #10
 800b21c:	d103      	bne.n	800b226 <__sfputc_r+0x1e>
 800b21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b222:	f000 bb6b 	b.w	800b8fc <__swbuf_r>
 800b226:	6813      	ldr	r3, [r2, #0]
 800b228:	1c58      	adds	r0, r3, #1
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	7019      	strb	r1, [r3, #0]
 800b22e:	4608      	mov	r0, r1
 800b230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <__sfputs_r>:
 800b236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b238:	4606      	mov	r6, r0
 800b23a:	460f      	mov	r7, r1
 800b23c:	4614      	mov	r4, r2
 800b23e:	18d5      	adds	r5, r2, r3
 800b240:	42ac      	cmp	r4, r5
 800b242:	d101      	bne.n	800b248 <__sfputs_r+0x12>
 800b244:	2000      	movs	r0, #0
 800b246:	e007      	b.n	800b258 <__sfputs_r+0x22>
 800b248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24c:	463a      	mov	r2, r7
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ffda 	bl	800b208 <__sfputc_r>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d1f3      	bne.n	800b240 <__sfputs_r+0xa>
 800b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b25c <_vfiprintf_r>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	460d      	mov	r5, r1
 800b262:	b09d      	sub	sp, #116	@ 0x74
 800b264:	4614      	mov	r4, r2
 800b266:	4698      	mov	r8, r3
 800b268:	4606      	mov	r6, r0
 800b26a:	b118      	cbz	r0, 800b274 <_vfiprintf_r+0x18>
 800b26c:	6a03      	ldr	r3, [r0, #32]
 800b26e:	b90b      	cbnz	r3, 800b274 <_vfiprintf_r+0x18>
 800b270:	f7ff fdb2 	bl	800add8 <__sinit>
 800b274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b276:	07d9      	lsls	r1, r3, #31
 800b278:	d405      	bmi.n	800b286 <_vfiprintf_r+0x2a>
 800b27a:	89ab      	ldrh	r3, [r5, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d402      	bmi.n	800b286 <_vfiprintf_r+0x2a>
 800b280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b282:	f7ff fec0 	bl	800b006 <__retarget_lock_acquire_recursive>
 800b286:	89ab      	ldrh	r3, [r5, #12]
 800b288:	071b      	lsls	r3, r3, #28
 800b28a:	d501      	bpl.n	800b290 <_vfiprintf_r+0x34>
 800b28c:	692b      	ldr	r3, [r5, #16]
 800b28e:	b99b      	cbnz	r3, 800b2b8 <_vfiprintf_r+0x5c>
 800b290:	4629      	mov	r1, r5
 800b292:	4630      	mov	r0, r6
 800b294:	f000 fb70 	bl	800b978 <__swsetup_r>
 800b298:	b170      	cbz	r0, 800b2b8 <_vfiprintf_r+0x5c>
 800b29a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b29c:	07dc      	lsls	r4, r3, #31
 800b29e:	d504      	bpl.n	800b2aa <_vfiprintf_r+0x4e>
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2a4:	b01d      	add	sp, #116	@ 0x74
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	89ab      	ldrh	r3, [r5, #12]
 800b2ac:	0598      	lsls	r0, r3, #22
 800b2ae:	d4f7      	bmi.n	800b2a0 <_vfiprintf_r+0x44>
 800b2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2b2:	f7ff fea9 	bl	800b008 <__retarget_lock_release_recursive>
 800b2b6:	e7f3      	b.n	800b2a0 <_vfiprintf_r+0x44>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2bc:	2320      	movs	r3, #32
 800b2be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2c6:	2330      	movs	r3, #48	@ 0x30
 800b2c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b478 <_vfiprintf_r+0x21c>
 800b2cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2d0:	f04f 0901 	mov.w	r9, #1
 800b2d4:	4623      	mov	r3, r4
 800b2d6:	469a      	mov	sl, r3
 800b2d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2dc:	b10a      	cbz	r2, 800b2e2 <_vfiprintf_r+0x86>
 800b2de:	2a25      	cmp	r2, #37	@ 0x25
 800b2e0:	d1f9      	bne.n	800b2d6 <_vfiprintf_r+0x7a>
 800b2e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b2e6:	d00b      	beq.n	800b300 <_vfiprintf_r+0xa4>
 800b2e8:	465b      	mov	r3, fp
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f7ff ffa1 	bl	800b236 <__sfputs_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f000 80a7 	beq.w	800b448 <_vfiprintf_r+0x1ec>
 800b2fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2fc:	445a      	add	r2, fp
 800b2fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800b300:	f89a 3000 	ldrb.w	r3, [sl]
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 809f 	beq.w	800b448 <_vfiprintf_r+0x1ec>
 800b30a:	2300      	movs	r3, #0
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b314:	f10a 0a01 	add.w	sl, sl, #1
 800b318:	9304      	str	r3, [sp, #16]
 800b31a:	9307      	str	r3, [sp, #28]
 800b31c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b320:	931a      	str	r3, [sp, #104]	@ 0x68
 800b322:	4654      	mov	r4, sl
 800b324:	2205      	movs	r2, #5
 800b326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32a:	4853      	ldr	r0, [pc, #332]	@ (800b478 <_vfiprintf_r+0x21c>)
 800b32c:	f7f4 ff80 	bl	8000230 <memchr>
 800b330:	9a04      	ldr	r2, [sp, #16]
 800b332:	b9d8      	cbnz	r0, 800b36c <_vfiprintf_r+0x110>
 800b334:	06d1      	lsls	r1, r2, #27
 800b336:	bf44      	itt	mi
 800b338:	2320      	movmi	r3, #32
 800b33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b33e:	0713      	lsls	r3, r2, #28
 800b340:	bf44      	itt	mi
 800b342:	232b      	movmi	r3, #43	@ 0x2b
 800b344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b348:	f89a 3000 	ldrb.w	r3, [sl]
 800b34c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b34e:	d015      	beq.n	800b37c <_vfiprintf_r+0x120>
 800b350:	9a07      	ldr	r2, [sp, #28]
 800b352:	4654      	mov	r4, sl
 800b354:	2000      	movs	r0, #0
 800b356:	f04f 0c0a 	mov.w	ip, #10
 800b35a:	4621      	mov	r1, r4
 800b35c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b360:	3b30      	subs	r3, #48	@ 0x30
 800b362:	2b09      	cmp	r3, #9
 800b364:	d94b      	bls.n	800b3fe <_vfiprintf_r+0x1a2>
 800b366:	b1b0      	cbz	r0, 800b396 <_vfiprintf_r+0x13a>
 800b368:	9207      	str	r2, [sp, #28]
 800b36a:	e014      	b.n	800b396 <_vfiprintf_r+0x13a>
 800b36c:	eba0 0308 	sub.w	r3, r0, r8
 800b370:	fa09 f303 	lsl.w	r3, r9, r3
 800b374:	4313      	orrs	r3, r2
 800b376:	9304      	str	r3, [sp, #16]
 800b378:	46a2      	mov	sl, r4
 800b37a:	e7d2      	b.n	800b322 <_vfiprintf_r+0xc6>
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	1d19      	adds	r1, r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	9103      	str	r1, [sp, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	bfbb      	ittet	lt
 800b388:	425b      	neglt	r3, r3
 800b38a:	f042 0202 	orrlt.w	r2, r2, #2
 800b38e:	9307      	strge	r3, [sp, #28]
 800b390:	9307      	strlt	r3, [sp, #28]
 800b392:	bfb8      	it	lt
 800b394:	9204      	strlt	r2, [sp, #16]
 800b396:	7823      	ldrb	r3, [r4, #0]
 800b398:	2b2e      	cmp	r3, #46	@ 0x2e
 800b39a:	d10a      	bne.n	800b3b2 <_vfiprintf_r+0x156>
 800b39c:	7863      	ldrb	r3, [r4, #1]
 800b39e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3a0:	d132      	bne.n	800b408 <_vfiprintf_r+0x1ac>
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	1d1a      	adds	r2, r3, #4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	9203      	str	r2, [sp, #12]
 800b3aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3ae:	3402      	adds	r4, #2
 800b3b0:	9305      	str	r3, [sp, #20]
 800b3b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b488 <_vfiprintf_r+0x22c>
 800b3b6:	7821      	ldrb	r1, [r4, #0]
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	4650      	mov	r0, sl
 800b3bc:	f7f4 ff38 	bl	8000230 <memchr>
 800b3c0:	b138      	cbz	r0, 800b3d2 <_vfiprintf_r+0x176>
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	eba0 000a 	sub.w	r0, r0, sl
 800b3c8:	2240      	movs	r2, #64	@ 0x40
 800b3ca:	4082      	lsls	r2, r0
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	3401      	adds	r4, #1
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d6:	4829      	ldr	r0, [pc, #164]	@ (800b47c <_vfiprintf_r+0x220>)
 800b3d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3dc:	2206      	movs	r2, #6
 800b3de:	f7f4 ff27 	bl	8000230 <memchr>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d03f      	beq.n	800b466 <_vfiprintf_r+0x20a>
 800b3e6:	4b26      	ldr	r3, [pc, #152]	@ (800b480 <_vfiprintf_r+0x224>)
 800b3e8:	bb1b      	cbnz	r3, 800b432 <_vfiprintf_r+0x1d6>
 800b3ea:	9b03      	ldr	r3, [sp, #12]
 800b3ec:	3307      	adds	r3, #7
 800b3ee:	f023 0307 	bic.w	r3, r3, #7
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	9303      	str	r3, [sp, #12]
 800b3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f8:	443b      	add	r3, r7
 800b3fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3fc:	e76a      	b.n	800b2d4 <_vfiprintf_r+0x78>
 800b3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b402:	460c      	mov	r4, r1
 800b404:	2001      	movs	r0, #1
 800b406:	e7a8      	b.n	800b35a <_vfiprintf_r+0xfe>
 800b408:	2300      	movs	r3, #0
 800b40a:	3401      	adds	r4, #1
 800b40c:	9305      	str	r3, [sp, #20]
 800b40e:	4619      	mov	r1, r3
 800b410:	f04f 0c0a 	mov.w	ip, #10
 800b414:	4620      	mov	r0, r4
 800b416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b41a:	3a30      	subs	r2, #48	@ 0x30
 800b41c:	2a09      	cmp	r2, #9
 800b41e:	d903      	bls.n	800b428 <_vfiprintf_r+0x1cc>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0c6      	beq.n	800b3b2 <_vfiprintf_r+0x156>
 800b424:	9105      	str	r1, [sp, #20]
 800b426:	e7c4      	b.n	800b3b2 <_vfiprintf_r+0x156>
 800b428:	fb0c 2101 	mla	r1, ip, r1, r2
 800b42c:	4604      	mov	r4, r0
 800b42e:	2301      	movs	r3, #1
 800b430:	e7f0      	b.n	800b414 <_vfiprintf_r+0x1b8>
 800b432:	ab03      	add	r3, sp, #12
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	462a      	mov	r2, r5
 800b438:	4b12      	ldr	r3, [pc, #72]	@ (800b484 <_vfiprintf_r+0x228>)
 800b43a:	a904      	add	r1, sp, #16
 800b43c:	4630      	mov	r0, r6
 800b43e:	f3af 8000 	nop.w
 800b442:	4607      	mov	r7, r0
 800b444:	1c78      	adds	r0, r7, #1
 800b446:	d1d6      	bne.n	800b3f6 <_vfiprintf_r+0x19a>
 800b448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b44a:	07d9      	lsls	r1, r3, #31
 800b44c:	d405      	bmi.n	800b45a <_vfiprintf_r+0x1fe>
 800b44e:	89ab      	ldrh	r3, [r5, #12]
 800b450:	059a      	lsls	r2, r3, #22
 800b452:	d402      	bmi.n	800b45a <_vfiprintf_r+0x1fe>
 800b454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b456:	f7ff fdd7 	bl	800b008 <__retarget_lock_release_recursive>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	065b      	lsls	r3, r3, #25
 800b45e:	f53f af1f 	bmi.w	800b2a0 <_vfiprintf_r+0x44>
 800b462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b464:	e71e      	b.n	800b2a4 <_vfiprintf_r+0x48>
 800b466:	ab03      	add	r3, sp, #12
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	462a      	mov	r2, r5
 800b46c:	4b05      	ldr	r3, [pc, #20]	@ (800b484 <_vfiprintf_r+0x228>)
 800b46e:	a904      	add	r1, sp, #16
 800b470:	4630      	mov	r0, r6
 800b472:	f000 f879 	bl	800b568 <_printf_i>
 800b476:	e7e4      	b.n	800b442 <_vfiprintf_r+0x1e6>
 800b478:	0800bd27 	.word	0x0800bd27
 800b47c:	0800bd31 	.word	0x0800bd31
 800b480:	00000000 	.word	0x00000000
 800b484:	0800b237 	.word	0x0800b237
 800b488:	0800bd2d 	.word	0x0800bd2d

0800b48c <_printf_common>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	4616      	mov	r6, r2
 800b492:	4698      	mov	r8, r3
 800b494:	688a      	ldr	r2, [r1, #8]
 800b496:	690b      	ldr	r3, [r1, #16]
 800b498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bfb8      	it	lt
 800b4a0:	4613      	movlt	r3, r2
 800b4a2:	6033      	str	r3, [r6, #0]
 800b4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	b10a      	cbz	r2, 800b4b2 <_printf_common+0x26>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	6033      	str	r3, [r6, #0]
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	0699      	lsls	r1, r3, #26
 800b4b6:	bf42      	ittt	mi
 800b4b8:	6833      	ldrmi	r3, [r6, #0]
 800b4ba:	3302      	addmi	r3, #2
 800b4bc:	6033      	strmi	r3, [r6, #0]
 800b4be:	6825      	ldr	r5, [r4, #0]
 800b4c0:	f015 0506 	ands.w	r5, r5, #6
 800b4c4:	d106      	bne.n	800b4d4 <_printf_common+0x48>
 800b4c6:	f104 0a19 	add.w	sl, r4, #25
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	6832      	ldr	r2, [r6, #0]
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	dc26      	bgt.n	800b522 <_printf_common+0x96>
 800b4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	3b00      	subs	r3, #0
 800b4dc:	bf18      	it	ne
 800b4de:	2301      	movne	r3, #1
 800b4e0:	0692      	lsls	r2, r2, #26
 800b4e2:	d42b      	bmi.n	800b53c <_printf_common+0xb0>
 800b4e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4e8:	4641      	mov	r1, r8
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c8      	blx	r9
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d01e      	beq.n	800b530 <_printf_common+0xa4>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	f003 0306 	and.w	r3, r3, #6
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	bf02      	ittt	eq
 800b4fe:	68e5      	ldreq	r5, [r4, #12]
 800b500:	6833      	ldreq	r3, [r6, #0]
 800b502:	1aed      	subeq	r5, r5, r3
 800b504:	68a3      	ldr	r3, [r4, #8]
 800b506:	bf0c      	ite	eq
 800b508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b50c:	2500      	movne	r5, #0
 800b50e:	4293      	cmp	r3, r2
 800b510:	bfc4      	itt	gt
 800b512:	1a9b      	subgt	r3, r3, r2
 800b514:	18ed      	addgt	r5, r5, r3
 800b516:	2600      	movs	r6, #0
 800b518:	341a      	adds	r4, #26
 800b51a:	42b5      	cmp	r5, r6
 800b51c:	d11a      	bne.n	800b554 <_printf_common+0xc8>
 800b51e:	2000      	movs	r0, #0
 800b520:	e008      	b.n	800b534 <_printf_common+0xa8>
 800b522:	2301      	movs	r3, #1
 800b524:	4652      	mov	r2, sl
 800b526:	4641      	mov	r1, r8
 800b528:	4638      	mov	r0, r7
 800b52a:	47c8      	blx	r9
 800b52c:	3001      	adds	r0, #1
 800b52e:	d103      	bne.n	800b538 <_printf_common+0xac>
 800b530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b538:	3501      	adds	r5, #1
 800b53a:	e7c6      	b.n	800b4ca <_printf_common+0x3e>
 800b53c:	18e1      	adds	r1, r4, r3
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	2030      	movs	r0, #48	@ 0x30
 800b542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b546:	4422      	add	r2, r4
 800b548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b54c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b550:	3302      	adds	r3, #2
 800b552:	e7c7      	b.n	800b4e4 <_printf_common+0x58>
 800b554:	2301      	movs	r3, #1
 800b556:	4622      	mov	r2, r4
 800b558:	4641      	mov	r1, r8
 800b55a:	4638      	mov	r0, r7
 800b55c:	47c8      	blx	r9
 800b55e:	3001      	adds	r0, #1
 800b560:	d0e6      	beq.n	800b530 <_printf_common+0xa4>
 800b562:	3601      	adds	r6, #1
 800b564:	e7d9      	b.n	800b51a <_printf_common+0x8e>
	...

0800b568 <_printf_i>:
 800b568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b56c:	7e0f      	ldrb	r7, [r1, #24]
 800b56e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b570:	2f78      	cmp	r7, #120	@ 0x78
 800b572:	4691      	mov	r9, r2
 800b574:	4680      	mov	r8, r0
 800b576:	460c      	mov	r4, r1
 800b578:	469a      	mov	sl, r3
 800b57a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b57e:	d807      	bhi.n	800b590 <_printf_i+0x28>
 800b580:	2f62      	cmp	r7, #98	@ 0x62
 800b582:	d80a      	bhi.n	800b59a <_printf_i+0x32>
 800b584:	2f00      	cmp	r7, #0
 800b586:	f000 80d1 	beq.w	800b72c <_printf_i+0x1c4>
 800b58a:	2f58      	cmp	r7, #88	@ 0x58
 800b58c:	f000 80b8 	beq.w	800b700 <_printf_i+0x198>
 800b590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b598:	e03a      	b.n	800b610 <_printf_i+0xa8>
 800b59a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b59e:	2b15      	cmp	r3, #21
 800b5a0:	d8f6      	bhi.n	800b590 <_printf_i+0x28>
 800b5a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b5a8 <_printf_i+0x40>)
 800b5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a8:	0800b601 	.word	0x0800b601
 800b5ac:	0800b615 	.word	0x0800b615
 800b5b0:	0800b591 	.word	0x0800b591
 800b5b4:	0800b591 	.word	0x0800b591
 800b5b8:	0800b591 	.word	0x0800b591
 800b5bc:	0800b591 	.word	0x0800b591
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b591 	.word	0x0800b591
 800b5c8:	0800b591 	.word	0x0800b591
 800b5cc:	0800b591 	.word	0x0800b591
 800b5d0:	0800b591 	.word	0x0800b591
 800b5d4:	0800b713 	.word	0x0800b713
 800b5d8:	0800b63f 	.word	0x0800b63f
 800b5dc:	0800b6cd 	.word	0x0800b6cd
 800b5e0:	0800b591 	.word	0x0800b591
 800b5e4:	0800b591 	.word	0x0800b591
 800b5e8:	0800b735 	.word	0x0800b735
 800b5ec:	0800b591 	.word	0x0800b591
 800b5f0:	0800b63f 	.word	0x0800b63f
 800b5f4:	0800b591 	.word	0x0800b591
 800b5f8:	0800b591 	.word	0x0800b591
 800b5fc:	0800b6d5 	.word	0x0800b6d5
 800b600:	6833      	ldr	r3, [r6, #0]
 800b602:	1d1a      	adds	r2, r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6032      	str	r2, [r6, #0]
 800b608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b60c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b610:	2301      	movs	r3, #1
 800b612:	e09c      	b.n	800b74e <_printf_i+0x1e6>
 800b614:	6833      	ldr	r3, [r6, #0]
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	1d19      	adds	r1, r3, #4
 800b61a:	6031      	str	r1, [r6, #0]
 800b61c:	0606      	lsls	r6, r0, #24
 800b61e:	d501      	bpl.n	800b624 <_printf_i+0xbc>
 800b620:	681d      	ldr	r5, [r3, #0]
 800b622:	e003      	b.n	800b62c <_printf_i+0xc4>
 800b624:	0645      	lsls	r5, r0, #25
 800b626:	d5fb      	bpl.n	800b620 <_printf_i+0xb8>
 800b628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	da03      	bge.n	800b638 <_printf_i+0xd0>
 800b630:	232d      	movs	r3, #45	@ 0x2d
 800b632:	426d      	negs	r5, r5
 800b634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b638:	4858      	ldr	r0, [pc, #352]	@ (800b79c <_printf_i+0x234>)
 800b63a:	230a      	movs	r3, #10
 800b63c:	e011      	b.n	800b662 <_printf_i+0xfa>
 800b63e:	6821      	ldr	r1, [r4, #0]
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	0608      	lsls	r0, r1, #24
 800b644:	f853 5b04 	ldr.w	r5, [r3], #4
 800b648:	d402      	bmi.n	800b650 <_printf_i+0xe8>
 800b64a:	0649      	lsls	r1, r1, #25
 800b64c:	bf48      	it	mi
 800b64e:	b2ad      	uxthmi	r5, r5
 800b650:	2f6f      	cmp	r7, #111	@ 0x6f
 800b652:	4852      	ldr	r0, [pc, #328]	@ (800b79c <_printf_i+0x234>)
 800b654:	6033      	str	r3, [r6, #0]
 800b656:	bf14      	ite	ne
 800b658:	230a      	movne	r3, #10
 800b65a:	2308      	moveq	r3, #8
 800b65c:	2100      	movs	r1, #0
 800b65e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b662:	6866      	ldr	r6, [r4, #4]
 800b664:	60a6      	str	r6, [r4, #8]
 800b666:	2e00      	cmp	r6, #0
 800b668:	db05      	blt.n	800b676 <_printf_i+0x10e>
 800b66a:	6821      	ldr	r1, [r4, #0]
 800b66c:	432e      	orrs	r6, r5
 800b66e:	f021 0104 	bic.w	r1, r1, #4
 800b672:	6021      	str	r1, [r4, #0]
 800b674:	d04b      	beq.n	800b70e <_printf_i+0x1a6>
 800b676:	4616      	mov	r6, r2
 800b678:	fbb5 f1f3 	udiv	r1, r5, r3
 800b67c:	fb03 5711 	mls	r7, r3, r1, r5
 800b680:	5dc7      	ldrb	r7, [r0, r7]
 800b682:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b686:	462f      	mov	r7, r5
 800b688:	42bb      	cmp	r3, r7
 800b68a:	460d      	mov	r5, r1
 800b68c:	d9f4      	bls.n	800b678 <_printf_i+0x110>
 800b68e:	2b08      	cmp	r3, #8
 800b690:	d10b      	bne.n	800b6aa <_printf_i+0x142>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	07df      	lsls	r7, r3, #31
 800b696:	d508      	bpl.n	800b6aa <_printf_i+0x142>
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	6861      	ldr	r1, [r4, #4]
 800b69c:	4299      	cmp	r1, r3
 800b69e:	bfde      	ittt	le
 800b6a0:	2330      	movle	r3, #48	@ 0x30
 800b6a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b6aa:	1b92      	subs	r2, r2, r6
 800b6ac:	6122      	str	r2, [r4, #16]
 800b6ae:	f8cd a000 	str.w	sl, [sp]
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	aa03      	add	r2, sp, #12
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	f7ff fee7 	bl	800b48c <_printf_common>
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d14a      	bne.n	800b758 <_printf_i+0x1f0>
 800b6c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6c6:	b004      	add	sp, #16
 800b6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	f043 0320 	orr.w	r3, r3, #32
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	4832      	ldr	r0, [pc, #200]	@ (800b7a0 <_printf_i+0x238>)
 800b6d6:	2778      	movs	r7, #120	@ 0x78
 800b6d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	6831      	ldr	r1, [r6, #0]
 800b6e0:	061f      	lsls	r7, r3, #24
 800b6e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6e6:	d402      	bmi.n	800b6ee <_printf_i+0x186>
 800b6e8:	065f      	lsls	r7, r3, #25
 800b6ea:	bf48      	it	mi
 800b6ec:	b2ad      	uxthmi	r5, r5
 800b6ee:	6031      	str	r1, [r6, #0]
 800b6f0:	07d9      	lsls	r1, r3, #31
 800b6f2:	bf44      	itt	mi
 800b6f4:	f043 0320 	orrmi.w	r3, r3, #32
 800b6f8:	6023      	strmi	r3, [r4, #0]
 800b6fa:	b11d      	cbz	r5, 800b704 <_printf_i+0x19c>
 800b6fc:	2310      	movs	r3, #16
 800b6fe:	e7ad      	b.n	800b65c <_printf_i+0xf4>
 800b700:	4826      	ldr	r0, [pc, #152]	@ (800b79c <_printf_i+0x234>)
 800b702:	e7e9      	b.n	800b6d8 <_printf_i+0x170>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	f023 0320 	bic.w	r3, r3, #32
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	e7f6      	b.n	800b6fc <_printf_i+0x194>
 800b70e:	4616      	mov	r6, r2
 800b710:	e7bd      	b.n	800b68e <_printf_i+0x126>
 800b712:	6833      	ldr	r3, [r6, #0]
 800b714:	6825      	ldr	r5, [r4, #0]
 800b716:	6961      	ldr	r1, [r4, #20]
 800b718:	1d18      	adds	r0, r3, #4
 800b71a:	6030      	str	r0, [r6, #0]
 800b71c:	062e      	lsls	r6, r5, #24
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	d501      	bpl.n	800b726 <_printf_i+0x1be>
 800b722:	6019      	str	r1, [r3, #0]
 800b724:	e002      	b.n	800b72c <_printf_i+0x1c4>
 800b726:	0668      	lsls	r0, r5, #25
 800b728:	d5fb      	bpl.n	800b722 <_printf_i+0x1ba>
 800b72a:	8019      	strh	r1, [r3, #0]
 800b72c:	2300      	movs	r3, #0
 800b72e:	6123      	str	r3, [r4, #16]
 800b730:	4616      	mov	r6, r2
 800b732:	e7bc      	b.n	800b6ae <_printf_i+0x146>
 800b734:	6833      	ldr	r3, [r6, #0]
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	6032      	str	r2, [r6, #0]
 800b73a:	681e      	ldr	r6, [r3, #0]
 800b73c:	6862      	ldr	r2, [r4, #4]
 800b73e:	2100      	movs	r1, #0
 800b740:	4630      	mov	r0, r6
 800b742:	f7f4 fd75 	bl	8000230 <memchr>
 800b746:	b108      	cbz	r0, 800b74c <_printf_i+0x1e4>
 800b748:	1b80      	subs	r0, r0, r6
 800b74a:	6060      	str	r0, [r4, #4]
 800b74c:	6863      	ldr	r3, [r4, #4]
 800b74e:	6123      	str	r3, [r4, #16]
 800b750:	2300      	movs	r3, #0
 800b752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b756:	e7aa      	b.n	800b6ae <_printf_i+0x146>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	4632      	mov	r2, r6
 800b75c:	4649      	mov	r1, r9
 800b75e:	4640      	mov	r0, r8
 800b760:	47d0      	blx	sl
 800b762:	3001      	adds	r0, #1
 800b764:	d0ad      	beq.n	800b6c2 <_printf_i+0x15a>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	079b      	lsls	r3, r3, #30
 800b76a:	d413      	bmi.n	800b794 <_printf_i+0x22c>
 800b76c:	68e0      	ldr	r0, [r4, #12]
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	4298      	cmp	r0, r3
 800b772:	bfb8      	it	lt
 800b774:	4618      	movlt	r0, r3
 800b776:	e7a6      	b.n	800b6c6 <_printf_i+0x15e>
 800b778:	2301      	movs	r3, #1
 800b77a:	4632      	mov	r2, r6
 800b77c:	4649      	mov	r1, r9
 800b77e:	4640      	mov	r0, r8
 800b780:	47d0      	blx	sl
 800b782:	3001      	adds	r0, #1
 800b784:	d09d      	beq.n	800b6c2 <_printf_i+0x15a>
 800b786:	3501      	adds	r5, #1
 800b788:	68e3      	ldr	r3, [r4, #12]
 800b78a:	9903      	ldr	r1, [sp, #12]
 800b78c:	1a5b      	subs	r3, r3, r1
 800b78e:	42ab      	cmp	r3, r5
 800b790:	dcf2      	bgt.n	800b778 <_printf_i+0x210>
 800b792:	e7eb      	b.n	800b76c <_printf_i+0x204>
 800b794:	2500      	movs	r5, #0
 800b796:	f104 0619 	add.w	r6, r4, #25
 800b79a:	e7f5      	b.n	800b788 <_printf_i+0x220>
 800b79c:	0800bd38 	.word	0x0800bd38
 800b7a0:	0800bd49 	.word	0x0800bd49

0800b7a4 <__sflush_r>:
 800b7a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ac:	0716      	lsls	r6, r2, #28
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	d454      	bmi.n	800b85e <__sflush_r+0xba>
 800b7b4:	684b      	ldr	r3, [r1, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dc02      	bgt.n	800b7c0 <__sflush_r+0x1c>
 800b7ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dd48      	ble.n	800b852 <__sflush_r+0xae>
 800b7c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	d045      	beq.n	800b852 <__sflush_r+0xae>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7cc:	682f      	ldr	r7, [r5, #0]
 800b7ce:	6a21      	ldr	r1, [r4, #32]
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	d030      	beq.n	800b836 <__sflush_r+0x92>
 800b7d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	0759      	lsls	r1, r3, #29
 800b7da:	d505      	bpl.n	800b7e8 <__sflush_r+0x44>
 800b7dc:	6863      	ldr	r3, [r4, #4]
 800b7de:	1ad2      	subs	r2, r2, r3
 800b7e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7e2:	b10b      	cbz	r3, 800b7e8 <__sflush_r+0x44>
 800b7e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7e6:	1ad2      	subs	r2, r2, r3
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7ec:	6a21      	ldr	r1, [r4, #32]
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b0      	blx	r6
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	d106      	bne.n	800b806 <__sflush_r+0x62>
 800b7f8:	6829      	ldr	r1, [r5, #0]
 800b7fa:	291d      	cmp	r1, #29
 800b7fc:	d82b      	bhi.n	800b856 <__sflush_r+0xb2>
 800b7fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b8a8 <__sflush_r+0x104>)
 800b800:	40ca      	lsrs	r2, r1
 800b802:	07d6      	lsls	r6, r2, #31
 800b804:	d527      	bpl.n	800b856 <__sflush_r+0xb2>
 800b806:	2200      	movs	r2, #0
 800b808:	6062      	str	r2, [r4, #4]
 800b80a:	04d9      	lsls	r1, r3, #19
 800b80c:	6922      	ldr	r2, [r4, #16]
 800b80e:	6022      	str	r2, [r4, #0]
 800b810:	d504      	bpl.n	800b81c <__sflush_r+0x78>
 800b812:	1c42      	adds	r2, r0, #1
 800b814:	d101      	bne.n	800b81a <__sflush_r+0x76>
 800b816:	682b      	ldr	r3, [r5, #0]
 800b818:	b903      	cbnz	r3, 800b81c <__sflush_r+0x78>
 800b81a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b81c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b81e:	602f      	str	r7, [r5, #0]
 800b820:	b1b9      	cbz	r1, 800b852 <__sflush_r+0xae>
 800b822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b826:	4299      	cmp	r1, r3
 800b828:	d002      	beq.n	800b830 <__sflush_r+0x8c>
 800b82a:	4628      	mov	r0, r5
 800b82c:	f7ff fbf4 	bl	800b018 <_free_r>
 800b830:	2300      	movs	r3, #0
 800b832:	6363      	str	r3, [r4, #52]	@ 0x34
 800b834:	e00d      	b.n	800b852 <__sflush_r+0xae>
 800b836:	2301      	movs	r3, #1
 800b838:	4628      	mov	r0, r5
 800b83a:	47b0      	blx	r6
 800b83c:	4602      	mov	r2, r0
 800b83e:	1c50      	adds	r0, r2, #1
 800b840:	d1c9      	bne.n	800b7d6 <__sflush_r+0x32>
 800b842:	682b      	ldr	r3, [r5, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0c6      	beq.n	800b7d6 <__sflush_r+0x32>
 800b848:	2b1d      	cmp	r3, #29
 800b84a:	d001      	beq.n	800b850 <__sflush_r+0xac>
 800b84c:	2b16      	cmp	r3, #22
 800b84e:	d11e      	bne.n	800b88e <__sflush_r+0xea>
 800b850:	602f      	str	r7, [r5, #0]
 800b852:	2000      	movs	r0, #0
 800b854:	e022      	b.n	800b89c <__sflush_r+0xf8>
 800b856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b85a:	b21b      	sxth	r3, r3
 800b85c:	e01b      	b.n	800b896 <__sflush_r+0xf2>
 800b85e:	690f      	ldr	r7, [r1, #16]
 800b860:	2f00      	cmp	r7, #0
 800b862:	d0f6      	beq.n	800b852 <__sflush_r+0xae>
 800b864:	0793      	lsls	r3, r2, #30
 800b866:	680e      	ldr	r6, [r1, #0]
 800b868:	bf08      	it	eq
 800b86a:	694b      	ldreq	r3, [r1, #20]
 800b86c:	600f      	str	r7, [r1, #0]
 800b86e:	bf18      	it	ne
 800b870:	2300      	movne	r3, #0
 800b872:	eba6 0807 	sub.w	r8, r6, r7
 800b876:	608b      	str	r3, [r1, #8]
 800b878:	f1b8 0f00 	cmp.w	r8, #0
 800b87c:	dde9      	ble.n	800b852 <__sflush_r+0xae>
 800b87e:	6a21      	ldr	r1, [r4, #32]
 800b880:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b882:	4643      	mov	r3, r8
 800b884:	463a      	mov	r2, r7
 800b886:	4628      	mov	r0, r5
 800b888:	47b0      	blx	r6
 800b88a:	2800      	cmp	r0, #0
 800b88c:	dc08      	bgt.n	800b8a0 <__sflush_r+0xfc>
 800b88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a0:	4407      	add	r7, r0
 800b8a2:	eba8 0800 	sub.w	r8, r8, r0
 800b8a6:	e7e7      	b.n	800b878 <__sflush_r+0xd4>
 800b8a8:	20400001 	.word	0x20400001

0800b8ac <_fflush_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	690b      	ldr	r3, [r1, #16]
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	b913      	cbnz	r3, 800b8bc <_fflush_r+0x10>
 800b8b6:	2500      	movs	r5, #0
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	b118      	cbz	r0, 800b8c6 <_fflush_r+0x1a>
 800b8be:	6a03      	ldr	r3, [r0, #32]
 800b8c0:	b90b      	cbnz	r3, 800b8c6 <_fflush_r+0x1a>
 800b8c2:	f7ff fa89 	bl	800add8 <__sinit>
 800b8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f3      	beq.n	800b8b6 <_fflush_r+0xa>
 800b8ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8d0:	07d0      	lsls	r0, r2, #31
 800b8d2:	d404      	bmi.n	800b8de <_fflush_r+0x32>
 800b8d4:	0599      	lsls	r1, r3, #22
 800b8d6:	d402      	bmi.n	800b8de <_fflush_r+0x32>
 800b8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8da:	f7ff fb94 	bl	800b006 <__retarget_lock_acquire_recursive>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	f7ff ff5f 	bl	800b7a4 <__sflush_r>
 800b8e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8e8:	07da      	lsls	r2, r3, #31
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	d4e4      	bmi.n	800b8b8 <_fflush_r+0xc>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	059b      	lsls	r3, r3, #22
 800b8f2:	d4e1      	bmi.n	800b8b8 <_fflush_r+0xc>
 800b8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8f6:	f7ff fb87 	bl	800b008 <__retarget_lock_release_recursive>
 800b8fa:	e7dd      	b.n	800b8b8 <_fflush_r+0xc>

0800b8fc <__swbuf_r>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	460e      	mov	r6, r1
 800b900:	4614      	mov	r4, r2
 800b902:	4605      	mov	r5, r0
 800b904:	b118      	cbz	r0, 800b90e <__swbuf_r+0x12>
 800b906:	6a03      	ldr	r3, [r0, #32]
 800b908:	b90b      	cbnz	r3, 800b90e <__swbuf_r+0x12>
 800b90a:	f7ff fa65 	bl	800add8 <__sinit>
 800b90e:	69a3      	ldr	r3, [r4, #24]
 800b910:	60a3      	str	r3, [r4, #8]
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	071a      	lsls	r2, r3, #28
 800b916:	d501      	bpl.n	800b91c <__swbuf_r+0x20>
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	b943      	cbnz	r3, 800b92e <__swbuf_r+0x32>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4628      	mov	r0, r5
 800b920:	f000 f82a 	bl	800b978 <__swsetup_r>
 800b924:	b118      	cbz	r0, 800b92e <__swbuf_r+0x32>
 800b926:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b92a:	4638      	mov	r0, r7
 800b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	6922      	ldr	r2, [r4, #16]
 800b932:	1a98      	subs	r0, r3, r2
 800b934:	6963      	ldr	r3, [r4, #20]
 800b936:	b2f6      	uxtb	r6, r6
 800b938:	4283      	cmp	r3, r0
 800b93a:	4637      	mov	r7, r6
 800b93c:	dc05      	bgt.n	800b94a <__swbuf_r+0x4e>
 800b93e:	4621      	mov	r1, r4
 800b940:	4628      	mov	r0, r5
 800b942:	f7ff ffb3 	bl	800b8ac <_fflush_r>
 800b946:	2800      	cmp	r0, #0
 800b948:	d1ed      	bne.n	800b926 <__swbuf_r+0x2a>
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	60a3      	str	r3, [r4, #8]
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	6022      	str	r2, [r4, #0]
 800b956:	701e      	strb	r6, [r3, #0]
 800b958:	6962      	ldr	r2, [r4, #20]
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d004      	beq.n	800b96a <__swbuf_r+0x6e>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	07db      	lsls	r3, r3, #31
 800b964:	d5e1      	bpl.n	800b92a <__swbuf_r+0x2e>
 800b966:	2e0a      	cmp	r6, #10
 800b968:	d1df      	bne.n	800b92a <__swbuf_r+0x2e>
 800b96a:	4621      	mov	r1, r4
 800b96c:	4628      	mov	r0, r5
 800b96e:	f7ff ff9d 	bl	800b8ac <_fflush_r>
 800b972:	2800      	cmp	r0, #0
 800b974:	d0d9      	beq.n	800b92a <__swbuf_r+0x2e>
 800b976:	e7d6      	b.n	800b926 <__swbuf_r+0x2a>

0800b978 <__swsetup_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4b29      	ldr	r3, [pc, #164]	@ (800ba20 <__swsetup_r+0xa8>)
 800b97c:	4605      	mov	r5, r0
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	460c      	mov	r4, r1
 800b982:	b118      	cbz	r0, 800b98c <__swsetup_r+0x14>
 800b984:	6a03      	ldr	r3, [r0, #32]
 800b986:	b90b      	cbnz	r3, 800b98c <__swsetup_r+0x14>
 800b988:	f7ff fa26 	bl	800add8 <__sinit>
 800b98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b990:	0719      	lsls	r1, r3, #28
 800b992:	d422      	bmi.n	800b9da <__swsetup_r+0x62>
 800b994:	06da      	lsls	r2, r3, #27
 800b996:	d407      	bmi.n	800b9a8 <__swsetup_r+0x30>
 800b998:	2209      	movs	r2, #9
 800b99a:	602a      	str	r2, [r5, #0]
 800b99c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a0:	81a3      	strh	r3, [r4, #12]
 800b9a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9a6:	e033      	b.n	800ba10 <__swsetup_r+0x98>
 800b9a8:	0758      	lsls	r0, r3, #29
 800b9aa:	d512      	bpl.n	800b9d2 <__swsetup_r+0x5a>
 800b9ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9ae:	b141      	cbz	r1, 800b9c2 <__swsetup_r+0x4a>
 800b9b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9b4:	4299      	cmp	r1, r3
 800b9b6:	d002      	beq.n	800b9be <__swsetup_r+0x46>
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f7ff fb2d 	bl	800b018 <_free_r>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6063      	str	r3, [r4, #4]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f043 0308 	orr.w	r3, r3, #8
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	b94b      	cbnz	r3, 800b9f2 <__swsetup_r+0x7a>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9e8:	d003      	beq.n	800b9f2 <__swsetup_r+0x7a>
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 f893 	bl	800bb18 <__smakebuf_r>
 800b9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9f6:	f013 0201 	ands.w	r2, r3, #1
 800b9fa:	d00a      	beq.n	800ba12 <__swsetup_r+0x9a>
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	60a2      	str	r2, [r4, #8]
 800ba00:	6962      	ldr	r2, [r4, #20]
 800ba02:	4252      	negs	r2, r2
 800ba04:	61a2      	str	r2, [r4, #24]
 800ba06:	6922      	ldr	r2, [r4, #16]
 800ba08:	b942      	cbnz	r2, 800ba1c <__swsetup_r+0xa4>
 800ba0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba0e:	d1c5      	bne.n	800b99c <__swsetup_r+0x24>
 800ba10:	bd38      	pop	{r3, r4, r5, pc}
 800ba12:	0799      	lsls	r1, r3, #30
 800ba14:	bf58      	it	pl
 800ba16:	6962      	ldrpl	r2, [r4, #20]
 800ba18:	60a2      	str	r2, [r4, #8]
 800ba1a:	e7f4      	b.n	800ba06 <__swsetup_r+0x8e>
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	e7f7      	b.n	800ba10 <__swsetup_r+0x98>
 800ba20:	20000190 	.word	0x20000190

0800ba24 <_raise_r>:
 800ba24:	291f      	cmp	r1, #31
 800ba26:	b538      	push	{r3, r4, r5, lr}
 800ba28:	4605      	mov	r5, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	d904      	bls.n	800ba38 <_raise_r+0x14>
 800ba2e:	2316      	movs	r3, #22
 800ba30:	6003      	str	r3, [r0, #0]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba3a:	b112      	cbz	r2, 800ba42 <_raise_r+0x1e>
 800ba3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba40:	b94b      	cbnz	r3, 800ba56 <_raise_r+0x32>
 800ba42:	4628      	mov	r0, r5
 800ba44:	f000 f830 	bl	800baa8 <_getpid_r>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba52:	f000 b817 	b.w	800ba84 <_kill_r>
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d00a      	beq.n	800ba70 <_raise_r+0x4c>
 800ba5a:	1c59      	adds	r1, r3, #1
 800ba5c:	d103      	bne.n	800ba66 <_raise_r+0x42>
 800ba5e:	2316      	movs	r3, #22
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	2001      	movs	r0, #1
 800ba64:	e7e7      	b.n	800ba36 <_raise_r+0x12>
 800ba66:	2100      	movs	r1, #0
 800ba68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4798      	blx	r3
 800ba70:	2000      	movs	r0, #0
 800ba72:	e7e0      	b.n	800ba36 <_raise_r+0x12>

0800ba74 <raise>:
 800ba74:	4b02      	ldr	r3, [pc, #8]	@ (800ba80 <raise+0xc>)
 800ba76:	4601      	mov	r1, r0
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	f7ff bfd3 	b.w	800ba24 <_raise_r>
 800ba7e:	bf00      	nop
 800ba80:	20000190 	.word	0x20000190

0800ba84 <_kill_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	@ (800baa4 <_kill_r+0x20>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f7f5 fa45 	bl	8000f20 <_kill>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d102      	bne.n	800baa0 <_kill_r+0x1c>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	b103      	cbz	r3, 800baa0 <_kill_r+0x1c>
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	20001cc8 	.word	0x20001cc8

0800baa8 <_getpid_r>:
 800baa8:	f7f5 ba32 	b.w	8000f10 <_getpid>

0800baac <_sbrk_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d06      	ldr	r5, [pc, #24]	@ (800bac8 <_sbrk_r+0x1c>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	f7f5 faba 	bl	8001030 <_sbrk>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_sbrk_r+0x1a>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_sbrk_r+0x1a>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	20001cc8 	.word	0x20001cc8

0800bacc <__swhatbuf_r>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	460c      	mov	r4, r1
 800bad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad4:	2900      	cmp	r1, #0
 800bad6:	b096      	sub	sp, #88	@ 0x58
 800bad8:	4615      	mov	r5, r2
 800bada:	461e      	mov	r6, r3
 800badc:	da0d      	bge.n	800bafa <__swhatbuf_r+0x2e>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bae4:	f04f 0100 	mov.w	r1, #0
 800bae8:	bf14      	ite	ne
 800baea:	2340      	movne	r3, #64	@ 0x40
 800baec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800baf0:	2000      	movs	r0, #0
 800baf2:	6031      	str	r1, [r6, #0]
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	b016      	add	sp, #88	@ 0x58
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	466a      	mov	r2, sp
 800bafc:	f000 f848 	bl	800bb90 <_fstat_r>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	dbec      	blt.n	800bade <__swhatbuf_r+0x12>
 800bb04:	9901      	ldr	r1, [sp, #4]
 800bb06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb0e:	4259      	negs	r1, r3
 800bb10:	4159      	adcs	r1, r3
 800bb12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb16:	e7eb      	b.n	800baf0 <__swhatbuf_r+0x24>

0800bb18 <__smakebuf_r>:
 800bb18:	898b      	ldrh	r3, [r1, #12]
 800bb1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb1c:	079d      	lsls	r5, r3, #30
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460c      	mov	r4, r1
 800bb22:	d507      	bpl.n	800bb34 <__smakebuf_r+0x1c>
 800bb24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	6163      	str	r3, [r4, #20]
 800bb30:	b003      	add	sp, #12
 800bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb34:	ab01      	add	r3, sp, #4
 800bb36:	466a      	mov	r2, sp
 800bb38:	f7ff ffc8 	bl	800bacc <__swhatbuf_r>
 800bb3c:	9f00      	ldr	r7, [sp, #0]
 800bb3e:	4605      	mov	r5, r0
 800bb40:	4639      	mov	r1, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7ff fad4 	bl	800b0f0 <_malloc_r>
 800bb48:	b948      	cbnz	r0, 800bb5e <__smakebuf_r+0x46>
 800bb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb4e:	059a      	lsls	r2, r3, #22
 800bb50:	d4ee      	bmi.n	800bb30 <__smakebuf_r+0x18>
 800bb52:	f023 0303 	bic.w	r3, r3, #3
 800bb56:	f043 0302 	orr.w	r3, r3, #2
 800bb5a:	81a3      	strh	r3, [r4, #12]
 800bb5c:	e7e2      	b.n	800bb24 <__smakebuf_r+0xc>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	6020      	str	r0, [r4, #0]
 800bb62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	9b01      	ldr	r3, [sp, #4]
 800bb6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb6e:	b15b      	cbz	r3, 800bb88 <__smakebuf_r+0x70>
 800bb70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb74:	4630      	mov	r0, r6
 800bb76:	f000 f81d 	bl	800bbb4 <_isatty_r>
 800bb7a:	b128      	cbz	r0, 800bb88 <__smakebuf_r+0x70>
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f023 0303 	bic.w	r3, r3, #3
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	431d      	orrs	r5, r3
 800bb8c:	81a5      	strh	r5, [r4, #12]
 800bb8e:	e7cf      	b.n	800bb30 <__smakebuf_r+0x18>

0800bb90 <_fstat_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d07      	ldr	r5, [pc, #28]	@ (800bbb0 <_fstat_r+0x20>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	602b      	str	r3, [r5, #0]
 800bb9e:	f7f5 fa1f 	bl	8000fe0 <_fstat>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	d102      	bne.n	800bbac <_fstat_r+0x1c>
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	b103      	cbz	r3, 800bbac <_fstat_r+0x1c>
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
 800bbae:	bf00      	nop
 800bbb0:	20001cc8 	.word	0x20001cc8

0800bbb4 <_isatty_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4d06      	ldr	r5, [pc, #24]	@ (800bbd0 <_isatty_r+0x1c>)
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	602b      	str	r3, [r5, #0]
 800bbc0:	f7f5 fa1e 	bl	8001000 <_isatty>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_isatty_r+0x1a>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_isatty_r+0x1a>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20001cc8 	.word	0x20001cc8

0800bbd4 <_init>:
 800bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd6:	bf00      	nop
 800bbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbda:	bc08      	pop	{r3}
 800bbdc:	469e      	mov	lr, r3
 800bbde:	4770      	bx	lr

0800bbe0 <_fini>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	bf00      	nop
 800bbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe6:	bc08      	pop	{r3}
 800bbe8:	469e      	mov	lr, r3
 800bbea:	4770      	bx	lr
